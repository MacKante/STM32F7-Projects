
nucleo-f767zi-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac0  08005ac0  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac8  08005ac8  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08005b38  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08005bd8  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000844  200001a8  08005c78  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200009ec  08005c78  000209ec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00014e20  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a48  00000000  00000000  00035039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000010d0  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d02  00000000  00000000  00038b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029be3  00000000  00000000  0003985a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014f81  00000000  00000000  0006343d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fcf14  00000000  00000000  000783be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004e68  00000000  00000000  001752d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  0017a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080059f8 	.word	0x080059f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	080059f8 	.word	0x080059f8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <__io_putchar+0x20>)
 80005ee:	f003 fadf 	bl	8003bb0 <HAL_UART_Transmit>
  return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000300 	.word	0x20000300

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fd80 	bl	800110a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f84f 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f9ab 	bl	8000968 <MX_GPIO_Init>
  MX_ETH_Init();
 8000612:	f000 f8bd 	bl	8000790 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000616:	f000 f949 	bl	80008ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061a:	f000 f977 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800061e:	f000 f905 	bl	800082c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t lcdAddress = 0x40;
 8000622:	2340      	movs	r3, #64	; 0x40
 8000624:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef hal;
  printf("Starting I2C Scanner\r\n");
 8000626:	481a      	ldr	r0, [pc, #104]	; (8000690 <main+0x90>)
 8000628:	f004 fb7c 	bl	8004d24 <puts>
  while((hal != HAL_OK) || (lcdAddress != 0x50)) {
 800062c:	e016      	b.n	800065c <main+0x5c>
	  printf("test\r\n");
 800062e:	4819      	ldr	r0, [pc, #100]	; (8000694 <main+0x94>)
 8000630:	f004 fb78 	bl	8004d24 <puts>
	  hal = HAL_I2C_Master_Transmit(&hi2c2, lcdAddress << 1, 0, 1, HAL_MAX_DELAY);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	b29b      	uxth	r3, r3
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	b299      	uxth	r1, r3
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	2200      	movs	r2, #0
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <main+0x98>)
 8000648:	f001 fc42 	bl	8001ed0 <HAL_I2C_Master_Transmit>
 800064c:	4603      	mov	r3, r0
 800064e:	71bb      	strb	r3, [r7, #6]
	  printf("test2\r\n");
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <main+0x9c>)
 8000652:	f004 fb67 	bl	8004d24 <puts>
	  lcdAddress += 2;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3302      	adds	r3, #2
 800065a:	71fb      	strb	r3, [r7, #7]
  while((hal != HAL_OK) || (lcdAddress != 0x50)) {
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1e5      	bne.n	800062e <main+0x2e>
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b50      	cmp	r3, #80	; 0x50
 8000666:	d1e2      	bne.n	800062e <main+0x2e>
  }
  if ((hal != HAL_OK) || (lcdAddress == 0x50)) {
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d102      	bne.n	8000674 <main+0x74>
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b50      	cmp	r3, #80	; 0x50
 8000672:	d103      	bne.n	800067c <main+0x7c>
	  printf("Shit is not sheishty\r\n");
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <main+0xa0>)
 8000676:	f004 fb55 	bl	8004d24 <puts>
 800067a:	e004      	b.n	8000686 <main+0x86>
  } else {
	  printf("LCD Address: %X\r\n", lcdAddress);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4619      	mov	r1, r3
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <main+0xa4>)
 8000682:	f004 fae9 	bl	8004c58 <iprintf>
  }

  printf("Scanner Ended\r\n");
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0xa8>)
 8000688:	f004 fb4c 	bl	8004d24 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x8c>
 800068e:	bf00      	nop
 8000690:	08005a10 	.word	0x08005a10
 8000694:	08005a28 	.word	0x08005a28
 8000698:	200002ac 	.word	0x200002ac
 800069c:	08005a30 	.word	0x08005a30
 80006a0:	08005a38 	.word	0x08005a38
 80006a4:	08005a50 	.word	0x08005a50
 80006a8:	08005a64 	.word	0x08005a64

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fc12 	bl	8004ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d0:	f002 f8c4 	bl	800285c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <SystemClock_Config+0xdc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <SystemClock_Config+0xdc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xdc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xe0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <SystemClock_Config+0xe0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xe0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800070c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f002 f8f1 	bl	800291c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 f9c0 	bl	8000ac4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f002 f89a 	bl	800287c <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074e:	f000 f9b9 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2103      	movs	r1, #3
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fb82 	bl	8002e78 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800077a:	f000 f9a3 	bl	8000ac4 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ETH_Init+0x84>)
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <MX_ETH_Init+0x88>)
 8000798:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_ETH_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ETH_Init+0x8c>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_ETH_Init+0x8c>)
 80007a8:	22e1      	movs	r2, #225	; 0xe1
 80007aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_ETH_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ETH_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_ETH_Init+0x84>)
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_ETH_Init+0x8c>)
 80007c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ETH_Init+0x84>)
 80007c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ETH_Init+0x84>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <MX_ETH_Init+0x90>)
 80007d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_ETH_Init+0x84>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_ETH_Init+0x94>)
 80007d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ETH_Init+0x84>)
 80007da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_ETH_Init+0x84>)
 80007e2:	f000 fdf9 	bl	80013d8 <HAL_ETH_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 f96a 	bl	8000ac4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f0:	2238      	movs	r2, #56	; 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_ETH_Init+0x98>)
 80007f6:	f004 fb75 	bl	8004ee4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_ETH_Init+0x98>)
 80007fc:	2221      	movs	r2, #33	; 0x21
 80007fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_ETH_Init+0x98>)
 8000802:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000806:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_ETH_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001fc 	.word	0x200001fc
 8000818:	40028000 	.word	0x40028000
 800081c:	20000890 	.word	0x20000890
 8000820:	20000108 	.word	0x20000108
 8000824:	20000068 	.word	0x20000068
 8000828:	200001c4 	.word	0x200001c4

0800082c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_I2C2_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <MX_I2C2_Init+0x7c>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000868:	f001 faa2 	bl	8001db0 <HAL_I2C_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000872:	f000 f927 	bl	8000ac4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_I2C2_Init+0x74>)
 800087a:	f001 fe0f 	bl	800249c <HAL_I2CEx_ConfigAnalogFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000884:	f000 f91e 	bl	8000ac4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2C2_Init+0x74>)
 800088c:	f001 fe51 	bl	8002532 <HAL_I2CEx_ConfigDigitalFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 f915 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200002ac 	.word	0x200002ac
 80008a4:	40005800 	.word	0x40005800
 80008a8:	20303e5d 	.word	0x20303e5d

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART3_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008f0:	f003 f910 	bl	8003b14 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f8e3 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000300 	.word	0x20000300
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2201      	movs	r2, #1
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 fe3b 	bl	80025ca <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8b3 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000388 	.word	0x20000388

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a4c      	ldr	r2, [pc, #304]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a46      	ldr	r2, [pc, #280]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a40      	ldr	r2, [pc, #256]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b35      	ldr	r3, [pc, #212]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a34      	ldr	r2, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0x14c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x150>)
 8000a2e:	f001 f9a5 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4821      	ldr	r0, [pc, #132]	; (8000abc <MX_GPIO_Init+0x154>)
 8000a38:	f001 f9a0 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0x158>)
 8000a54:	f000 ffe6 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a58:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0x150>)
 8000a72:	f000 ffd7 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0x154>)
 8000a8e:	f000 ffc9 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_GPIO_Init+0x154>)
 8000aa6:	f000 ffbd 	bl	8001a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3730      	adds	r7, #48	; 0x30
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x44>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x44>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x44>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x44>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x44>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <HAL_ETH_MspInit+0x158>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	f040 8096 	bne.w	8000c68 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a4c      	ldr	r2, [pc, #304]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a46      	ldr	r2, [pc, #280]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a3a      	ldr	r2, [pc, #232]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a2e      	ldr	r2, [pc, #184]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <HAL_ETH_MspInit+0x15c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <HAL_ETH_MspInit+0x160>)
 8000c00:	f000 ff10 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c04:	2386      	movs	r3, #134	; 0x86
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_ETH_MspInit+0x164>)
 8000c20:	f000 ff00 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c36:	230b      	movs	r3, #11
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <HAL_ETH_MspInit+0x168>)
 8000c42:	f000 feef 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_ETH_MspInit+0x16c>)
 8000c64:	f000 fede 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	; 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40028000 	.word	0x40028000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40021800 	.word	0x40021800

08000c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0ae      	sub	sp, #184	; 0xb8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2290      	movs	r2, #144	; 0x90
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 f91b 	bl	8004ee4 <memset>
  if(hi2c->Instance==I2C2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <HAL_I2C_MspInit+0xb0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d13b      	bne.n	8000d30 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fafc 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cd2:	f7ff fef7 	bl	8000ac4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf4:	2312      	movs	r3, #18
 8000cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d10:	4619      	mov	r1, r3
 8000d12:	480b      	ldr	r0, [pc, #44]	; (8000d40 <HAL_I2C_MspInit+0xb8>)
 8000d14:	f000 fe86 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37b8      	adds	r7, #184	; 0xb8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005800 	.word	0x40005800
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40021400 	.word	0x40021400

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ae      	sub	sp, #184	; 0xb8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2290      	movs	r2, #144	; 0x90
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 f8bd 	bl	8004ee4 <memset>
  if(huart->Instance==USART3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d13c      	bne.n	8000dee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fa9e 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8e:	f7ff fe99 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0xb8>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_UART_MspInit+0xb8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <HAL_UART_MspInit+0xb8>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0xb8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0xbc>)
 8000dea:	f000 fe1b 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	37b8      	adds	r7, #184	; 0xb8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ae      	sub	sp, #184	; 0xb8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2290      	movs	r2, #144	; 0x90
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 f85d 	bl	8004ee4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e32:	d159      	bne.n	8000ee8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 fa3d 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e50:	f7ff fe38 	bl	8000ac4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e6c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e86:	230a      	movs	r3, #10
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <HAL_PCD_MspInit+0xf0>)
 8000e94:	f000 fdc6 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <HAL_PCD_MspInit+0xf0>)
 8000eb4:	f000 fdb6 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec2:	6353      	str	r3, [r2, #52]	; 0x34
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6453      	str	r3, [r2, #68]	; 0x44
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	37b8      	adds	r7, #184	; 0xb8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f91e 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e00a      	b.n	8000f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5e:	f3af 8000 	nop.w
 8000f62:	4601      	mov	r1, r0
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	b2ca      	uxtb	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf0      	blt.n	8000f5e <_read+0x12>
  }

  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e009      	b.n	8000fac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	60ba      	str	r2, [r7, #8]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fb1b 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf1      	blt.n	8000f98 <_write+0x12>
  }
  return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_close>:

int _close(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_isatty>:

int _isatty(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f003 ff92 	bl	8004f80 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20080000 	.word	0x20080000
 8001088:	00000400 	.word	0x00000400
 800108c:	20000898 	.word	0x20000898
 8001090:	200009f0 	.word	0x200009f0

08001094 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e2:	f7ff ffd7 	bl	8001094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 ff51 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff fa89 	bl	8000600 <main>
  bx  lr    
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010fc:	08005ad0 	.word	0x08005ad0
  ldr r2, =_sbss
 8001100:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001104:	200009ec 	.word	0x200009ec

08001108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC_IRQHandler>

0800110a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110e:	2003      	movs	r0, #3
 8001110:	f000 f92e 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f805 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111a:	f7ff fcd9 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f93b 	bl	80013be <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f911 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008
 80011a8:	2000089c 	.word	0x2000089c

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000089c 	.word	0x2000089c

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <__NVIC_SetPriorityGrouping+0x40>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	4313      	orrs	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x40>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	05fa0000 	.word	0x05fa0000

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff47 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff5c 	bl	8001254 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffb0 	bl	800132c <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e06a      	b.n	80014c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d106      	bne.n	8001402 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2223      	movs	r2, #35	; 0x23
 80013f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fb8b 	bl	8000b18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_ETH_Init+0xf0>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <HAL_ETH_Init+0xf0>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_ETH_Init+0xf0>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <HAL_ETH_Init+0xf4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <HAL_ETH_Init+0xf4>)
 8001420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001424:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_ETH_Init+0xf4>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4927      	ldr	r1, [pc, #156]	; (80014cc <HAL_ETH_Init+0xf4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_ETH_Init+0xf4>)
 8001436:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800144e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff feac 	bl	80011ac <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001456:	e011      	b.n	800147c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001458:	f7ff fea8 	bl	80011ac <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001466:	d909      	bls.n	800147c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	22e0      	movs	r2, #224	; 0xe0
 8001474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e021      	b.n	80014c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e4      	bne.n	8001458 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f958 	bl	8001744 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f9ff 	bl	8001898 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fa55 	bl	800194a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	461a      	mov	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f9bd 	bl	8001828 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2210      	movs	r2, #16
 80014ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800

080014d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4b51      	ldr	r3, [pc, #324]	; (800162c <ETH_SetMACConfig+0x15c>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	7c1b      	ldrb	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <ETH_SetMACConfig+0x28>
 80014f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014f6:	e000      	b.n	80014fa <ETH_SetMACConfig+0x2a>
 80014f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7c5b      	ldrb	r3, [r3, #17]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <ETH_SetMACConfig+0x38>
 8001502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001506:	e000      	b.n	800150a <ETH_SetMACConfig+0x3a>
 8001508:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800150a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001510:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7fdb      	ldrb	r3, [r3, #31]
 8001516:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001518:	431a      	orrs	r2, r3
                        macconf->Speed |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800151e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	7f92      	ldrb	r2, [r2, #30]
 8001524:	2a00      	cmp	r2, #0
 8001526:	d102      	bne.n	800152e <ETH_SetMACConfig+0x5e>
 8001528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152c:	e000      	b.n	8001530 <ETH_SetMACConfig+0x60>
 800152e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001530:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	7f1b      	ldrb	r3, [r3, #28]
 8001536:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001538:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800153e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800154e:	2a00      	cmp	r2, #0
 8001550:	d102      	bne.n	8001558 <ETH_SetMACConfig+0x88>
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	e000      	b.n	800155a <ETH_SetMACConfig+0x8a>
 8001558:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800155a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	7bdb      	ldrb	r3, [r3, #15]
 8001560:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001562:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001570:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001572:	4313      	orrs	r3, r2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff fe1a 	bl	80011c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d101      	bne.n	80015be <ETH_SetMACConfig+0xee>
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	e000      	b.n	80015c0 <ETH_SetMACConfig+0xf0>
 80015be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015ce:	2a01      	cmp	r2, #1
 80015d0:	d101      	bne.n	80015d6 <ETH_SetMACConfig+0x106>
 80015d2:	2208      	movs	r2, #8
 80015d4:	e000      	b.n	80015d8 <ETH_SetMACConfig+0x108>
 80015d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015e0:	2a01      	cmp	r2, #1
 80015e2:	d101      	bne.n	80015e8 <ETH_SetMACConfig+0x118>
 80015e4:	2204      	movs	r2, #4
 80015e6:	e000      	b.n	80015ea <ETH_SetMACConfig+0x11a>
 80015e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015f2:	2a01      	cmp	r2, #1
 80015f4:	d101      	bne.n	80015fa <ETH_SetMACConfig+0x12a>
 80015f6:	2202      	movs	r2, #2
 80015f8:	e000      	b.n	80015fc <ETH_SetMACConfig+0x12c>
 80015fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015fc:	4313      	orrs	r3, r2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fdd5 	bl	80011c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	ff20810f 	.word	0xff20810f

08001630 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <ETH_SetDMAConfig+0x110>)
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	7b1b      	ldrb	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <ETH_SetDMAConfig+0x2c>
 8001656:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800165a:	e000      	b.n	800165e <ETH_SetDMAConfig+0x2e>
 800165c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	7b5b      	ldrb	r3, [r3, #13]
 8001662:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001664:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	7f52      	ldrb	r2, [r2, #29]
 800166a:	2a00      	cmp	r2, #0
 800166c:	d102      	bne.n	8001674 <ETH_SetDMAConfig+0x44>
 800166e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001672:	e000      	b.n	8001676 <ETH_SetDMAConfig+0x46>
 8001674:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001676:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	7b9b      	ldrb	r3, [r3, #14]
 800167c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800167e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001684:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	7f1b      	ldrb	r3, [r3, #28]
 800168a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800168c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7f9b      	ldrb	r3, [r3, #30]
 8001692:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001694:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800169a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff fd7c 	bl	80011c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d4:	461a      	mov	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001702:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001708:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001716:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fd4d 	bl	80011c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	f8de3f23 	.word	0xf8de3f23

08001744 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0a6      	sub	sp, #152	; 0x98
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001758:	2300      	movs	r3, #0
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001780:	2300      	movs	r3, #0
 8001782:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800178a:	2300      	movs	r3, #0
 800178c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe86 	bl	80014d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4619      	mov	r1, r3
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff08 	bl	8001630 <ETH_SetDMAConfig>
}
 8001820:	bf00      	nop
 8001822:	3798      	adds	r7, #152	; 0x98
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3305      	adds	r3, #5
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	3204      	adds	r2, #4
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <ETH_MACAddressConfig+0x68>)
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3303      	adds	r3, #3
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	061a      	lsls	r2, r3, #24
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3302      	adds	r3, #2
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	4313      	orrs	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <ETH_MACAddressConfig+0x6c>)
 800187a:	4413      	add	r3, r2
 800187c:	461a      	mov	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40028040 	.word	0x40028040
 8001894:	40028044 	.word	0x40028044

08001898 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e03e      	b.n	8001924 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	3206      	adds	r2, #6
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d80c      	bhi.n	8001908 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68d9      	ldr	r1, [r3, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	e004      	b.n	8001912 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d9bd      	bls.n	80018a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	611a      	str	r2, [r3, #16]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e046      	b.n	80019e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6919      	ldr	r1, [r3, #16]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001994:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800199c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	3212      	adds	r2, #18
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d80c      	bhi.n	80019d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6919      	ldr	r1, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	e004      	b.n	80019e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d9b5      	bls.n	8001958 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e175      	b.n	8001d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8164 	bne.w	8001d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x56>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80be 	beq.w	8001d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a65      	ldr	r2, [pc, #404]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bc6:	4a61      	ldr	r2, [pc, #388]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_GPIO_Init+0x32c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d037      	beq.n	8001c62 <HAL_GPIO_Init+0x23e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_GPIO_Init+0x23a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x334>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x236>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <HAL_GPIO_Init+0x338>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x232>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a54      	ldr	r2, [pc, #336]	; (8001d60 <HAL_GPIO_Init+0x33c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x22e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a53      	ldr	r2, [pc, #332]	; (8001d64 <HAL_GPIO_Init+0x340>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x22a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x344>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_GPIO_Init+0x348>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <HAL_GPIO_Init+0x34c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	e012      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e010      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae86 	bls.w	8001a44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40022400 	.word	0x40022400
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07f      	b.n	8001ec2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe ff56 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e006      	b.n	8001e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d104      	bne.n	8001e4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_I2C_Init+0x11c>)
 8001e56:	430b      	orrs	r3, r1
 8001e58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69d9      	ldr	r1, [r3, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	02008000 	.word	0x02008000

08001ed0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80da 	bne.w	80020a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_I2C_Master_Transmit+0x30>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0d3      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f08:	f7ff f950 	bl	80011ac <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f8f0 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0be      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2bff      	cmp	r3, #255	; 0xff
 8001f5a:	d90e      	bls.n	8001f7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fa60 	bl	8002438 <I2C_TransferConfig>
 8001f78:	e06c      	b.n	8002054 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	8979      	ldrh	r1, [r7, #10]
 8001f8c:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fa4f 	bl	8002438 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f9a:	e05b      	b.n	8002054 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6a39      	ldr	r1, [r7, #32]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f8ed 	bl	8002180 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e07b      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d034      	beq.n	8002054 <HAL_I2C_Master_Transmit+0x184>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d130      	bne.n	8002054 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f87f 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04d      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d90e      	bls.n	8002034 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fa03 	bl	8002438 <I2C_TransferConfig>
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	2300      	movs	r3, #0
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f9f2 	bl	8002438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d19e      	bne.n	8001f9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f8cc 	bl	8002200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01a      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002086:	400b      	ands	r3, r1
 8002088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	80002000 	.word	0x80002000
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d103      	bne.n	80020d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d007      	beq.n	80020f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	619a      	str	r2, [r3, #24]
  }
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002110:	e022      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d01e      	beq.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7ff f847 	bl	80011ac <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d113      	bne.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e00f      	b.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4013      	ands	r3, r2
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	429a      	cmp	r2, r3
 8002174:	d0cd      	beq.n	8002112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800218c:	e02c      	b.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f870 	bl	8002278 <I2C_IsErrorOccurred>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e02a      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d01e      	beq.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7fe ffff 	bl	80011ac <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d113      	bne.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d1cb      	bne.n	800218e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e028      	b.n	8002260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f830 	bl	8002278 <I2C_IsErrorOccurred>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e026      	b.n	8002270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7fe ffc3 	bl	80011ac <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d113      	bne.n	8002260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	d1cf      	bne.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d068      	beq.n	8002376 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2210      	movs	r2, #16
 80022aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ac:	e049      	b.n	8002342 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d045      	beq.n	8002342 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7fe ff79 	bl	80011ac <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <I2C_IsErrorOccurred+0x54>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d13a      	bne.n	8002342 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ee:	d121      	bne.n	8002334 <I2C_IsErrorOccurred+0xbc>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f6:	d01d      	beq.n	8002334 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d01a      	beq.n	8002334 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800230c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800230e:	f7fe ff4d 	bl	80011ac <HAL_GetTick>
 8002312:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002314:	e00e      	b.n	8002334 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002316:	f7fe ff49 	bl	80011ac <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b19      	cmp	r3, #25
 8002322:	d907      	bls.n	8002334 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f043 0320 	orr.w	r3, r3, #32
 800232a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002332:	e006      	b.n	8002342 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	d1e9      	bne.n	8002316 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d003      	beq.n	8002358 <I2C_IsErrorOccurred+0xe0>
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0aa      	beq.n	80022ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235c:	2b00      	cmp	r3, #0
 800235e:	d103      	bne.n	8002368 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2220      	movs	r2, #32
 8002366:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80023e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fe63 	bl	80020b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <I2C_IsErrorOccurred+0x1bc>)
 80023fe:	400b      	ands	r3, r1
 8002400:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800242a:	4618      	mov	r0, r3
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	fe00e800 	.word	0xfe00e800

08002438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	4613      	mov	r3, r2
 8002448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002450:	7a7b      	ldrb	r3, [r7, #9]
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002458:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	4313      	orrs	r3, r2
 8002462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002466:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	0d5b      	lsrs	r3, r3, #21
 8002472:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <I2C_TransferConfig+0x60>)
 8002478:	430b      	orrs	r3, r1
 800247a:	43db      	mvns	r3, r3
 800247c:	ea02 0103 	and.w	r1, r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	03ff63ff 	.word	0x03ff63ff

0800249c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d138      	bne.n	8002524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024bc:	2302      	movs	r3, #2
 80024be:	e032      	b.n	8002526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d139      	bne.n	80025bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002552:	2302      	movs	r3, #2
 8002554:	e033      	b.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2224      	movs	r2, #36	; 0x24
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025cc:	b08f      	sub	sp, #60	; 0x3c
 80025ce:	af0a      	add	r7, sp, #40	; 0x28
 80025d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e116      	b.n	800280a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe fc04 	bl	8000e04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2203      	movs	r2, #3
 8002600:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f001 ffbe 	bl	800459c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	687e      	ldr	r6, [r7, #4]
 8002628:	466d      	mov	r5, sp
 800262a:	f106 0410 	add.w	r4, r6, #16
 800262e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263a:	e885 0003 	stmia.w	r5, {r0, r1}
 800263e:	1d33      	adds	r3, r6, #4
 8002640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	f001 ff52 	bl	80044ec <USB_CoreInit>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0d7      	b.n	800280a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f001 ffac 	bl	80045be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e04a      	b.n	8002702 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	333d      	adds	r3, #61	; 0x3d
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	333c      	adds	r3, #60	; 0x3c
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	b298      	uxth	r0, r3
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3344      	adds	r3, #68	; 0x44
 80026a8:	4602      	mov	r2, r0
 80026aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3340      	adds	r3, #64	; 0x40
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3348      	adds	r3, #72	; 0x48
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	334c      	adds	r3, #76	; 0x4c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3354      	adds	r3, #84	; 0x54
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	3301      	adds	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d3af      	bcc.n	800266c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	e044      	b.n	800279c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3b5      	bcc.n	8002712 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	687e      	ldr	r6, [r7, #4]
 80027ae:	466d      	mov	r5, sp
 80027b0:	f106 0410 	add.w	r4, r6, #16
 80027b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027c4:	1d33      	adds	r3, r6, #4
 80027c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	f001 ff45 	bl	8004658 <USB_DevInit>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e014      	b.n	800280a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f80b 	bl	8002814 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f002 f903 	bl	8004a0e <USB_DevDisconnect>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002814 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_PCDEx_ActivateLPM+0x44>)
 8002844:	4313      	orrs	r3, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	10000003 	.word	0x10000003

0800285c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286a:	6013      	str	r3, [r2, #0]
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40007000 	.word	0x40007000

0800287c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_PWREx_EnableOverDrive+0x98>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_PWREx_EnableOverDrive+0x98>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_PWREx_EnableOverDrive+0x98>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028aa:	f7fe fc7f 	bl	80011ac <HAL_GetTick>
 80028ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028b0:	e009      	b.n	80028c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028b2:	f7fe fc7b 	bl	80011ac <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c0:	d901      	bls.n	80028c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e022      	b.n	800290c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d2:	d1ee      	bne.n	80028b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e0:	f7fe fc64 	bl	80011ac <HAL_GetTick>
 80028e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028e6:	e009      	b.n	80028fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028e8:	f7fe fc60 	bl	80011ac <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f6:	d901      	bls.n	80028fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e007      	b.n	800290c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002908:	d1ee      	bne.n	80028e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000

0800291c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002924:	2300      	movs	r3, #0
 8002926:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e29b      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8087 	beq.w	8002a4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002940:	4b96      	ldr	r3, [pc, #600]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b04      	cmp	r3, #4
 800294a:	d00c      	beq.n	8002966 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294c:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d112      	bne.n	800297e <HAL_RCC_OscConfig+0x62>
 8002958:	4b90      	ldr	r3, [pc, #576]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002964:	d10b      	bne.n	800297e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002966:	4b8d      	ldr	r3, [pc, #564]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d06c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x130>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d168      	bne.n	8002a4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e275      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x7a>
 8002988:	4b84      	ldr	r3, [pc, #528]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a83      	ldr	r2, [pc, #524]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e02e      	b.n	80029f4 <HAL_RCC_OscConfig+0xd8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x9c>
 800299e:	4b7f      	ldr	r3, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b7c      	ldr	r3, [pc, #496]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7b      	ldr	r2, [pc, #492]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e01d      	b.n	80029f4 <HAL_RCC_OscConfig+0xd8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0xc0>
 80029c2:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b73      	ldr	r3, [pc, #460]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a72      	ldr	r2, [pc, #456]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0xd8>
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6e      	ldr	r2, [pc, #440]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b6c      	ldr	r3, [pc, #432]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6b      	ldr	r2, [pc, #428]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d013      	beq.n	8002a24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fbd6 	bl	80011ac <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe fbd2 	bl	80011ac <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e229      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe8>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fbc2 	bl	80011ac <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fbbe 	bl	80011ac <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e215      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x110>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d069      	beq.n	8002b2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5a:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d11c      	bne.n	8002aac <HAL_RCC_OscConfig+0x190>
 8002a72:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x17a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1e9      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	493d      	ldr	r1, [pc, #244]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	e040      	b.n	8002b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fb74 	bl	80011ac <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fb70 	bl	80011ac <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1c7      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4929      	ldr	r1, [pc, #164]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
 8002afa:	e018      	b.n	8002b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fb50 	bl	80011ac <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7fe fb4c 	bl	80011ac <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1a3      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d038      	beq.n	8002bac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb2d 	bl	80011ac <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe fb29 	bl	80011ac <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e180      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x23a>
 8002b74:	e01a      	b.n	8002bac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe fb13 	bl	80011ac <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8a:	f7fe fb0f 	bl	80011ac <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d903      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e166      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
 8002b9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ee      	bne.n	8002b8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a4 	beq.w	8002d02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a88      	ldr	r2, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b86      	ldr	r3, [pc, #536]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be2:	4b83      	ldr	r3, [pc, #524]	; (8002df0 <HAL_RCC_OscConfig+0x4d4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bee:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x4d4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7f      	ldr	r2, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fad7 	bl	80011ac <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fad3 	bl	80011ac <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e12a      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c14:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x4d4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x31a>
 8002c28:	4b70      	ldr	r3, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	e02d      	b.n	8002c92 <HAL_RCC_OscConfig+0x376>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x33c>
 8002c3e:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a67      	ldr	r2, [pc, #412]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x376>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x35e>
 8002c60:	4b62      	ldr	r3, [pc, #392]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a61      	ldr	r2, [pc, #388]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a5e      	ldr	r2, [pc, #376]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x376>
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fa87 	bl	80011ac <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe fa83 	bl	80011ac <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0d8      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x386>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fa71 	bl	80011ac <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fa6d 	bl	80011ac <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0c2      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a3c      	ldr	r2, [pc, #240]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80ae 	beq.w	8002e68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0c:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d06d      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d14b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fa3e 	bl	80011ac <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fa3a 	bl	80011ac <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e091      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	071b      	lsls	r3, r3, #28
 8002d7e:	491b      	ldr	r1, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fa0c 	bl	80011ac <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fa08 	bl	80011ac <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e05f      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x47c>
 8002db6:	e057      	b.n	8002e68 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f9f2 	bl	80011ac <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe f9ee 	bl	80011ac <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e045      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4b0>
 8002dea:	e03d      	b.n	8002e68 <HAL_RCC_OscConfig+0x54c>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_RCC_OscConfig+0x558>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d030      	beq.n	8002e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d129      	bne.n	8002e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d122      	bne.n	8002e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d119      	bne.n	8002e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10f      	bne.n	8002e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0d0      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 020f 	bic.w	r2, r3, #15
 8002ea6:	4965      	ldr	r1, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d040      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e073      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4936      	ldr	r1, [pc, #216]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f91e 	bl	80011ac <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe f91a 	bl	80011ac <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e053      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d210      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1cc>)
 800301c:	5ccb      	ldrb	r3, [r1, r3]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1d0>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1d4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f87a 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00
 8003040:	40023800 	.word	0x40023800
 8003044:	08005a74 	.word	0x08005a74
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b094      	sub	sp, #80	; 0x50
 8003056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	647b      	str	r3, [r7, #68]	; 0x44
 800305c:	2300      	movs	r3, #0
 800305e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003060:	2300      	movs	r3, #0
 8003062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003068:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d00d      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x40>
 8003074:	2b08      	cmp	r3, #8
 8003076:	f200 80e1 	bhi.w	800323c <HAL_RCC_GetSysClockFreq+0x1ec>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x34>
 800307e:	2b04      	cmp	r3, #4
 8003080:	d003      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x3a>
 8003082:	e0db      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_GetSysClockFreq+0x204>)
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003088:	e0db      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800308a:	4b73      	ldr	r3, [pc, #460]	; (8003258 <HAL_RCC_GetSysClockFreq+0x208>)
 800308c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308e:	e0d8      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d063      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	2200      	movs	r2, #0
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ba:	2300      	movs	r3, #0
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
 80030be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	f04f 0000 	mov.w	r0, #0
 80030ca:	f04f 0100 	mov.w	r1, #0
 80030ce:	0159      	lsls	r1, r3, #5
 80030d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d4:	0150      	lsls	r0, r2, #5
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4621      	mov	r1, r4
 80030dc:	1a51      	subs	r1, r2, r1
 80030de:	6139      	str	r1, [r7, #16]
 80030e0:	4629      	mov	r1, r5
 80030e2:	eb63 0301 	sbc.w	r3, r3, r1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f4:	4659      	mov	r1, fp
 80030f6:	018b      	lsls	r3, r1, #6
 80030f8:	4651      	mov	r1, sl
 80030fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fe:	4651      	mov	r1, sl
 8003100:	018a      	lsls	r2, r1, #6
 8003102:	4651      	mov	r1, sl
 8003104:	ebb2 0801 	subs.w	r8, r2, r1
 8003108:	4659      	mov	r1, fp
 800310a:	eb63 0901 	sbc.w	r9, r3, r1
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003122:	4690      	mov	r8, r2
 8003124:	4699      	mov	r9, r3
 8003126:	4623      	mov	r3, r4
 8003128:	eb18 0303 	adds.w	r3, r8, r3
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	462b      	mov	r3, r5
 8003130:	eb49 0303 	adc.w	r3, r9, r3
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003142:	4629      	mov	r1, r5
 8003144:	024b      	lsls	r3, r1, #9
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800314c:	4621      	mov	r1, r4
 800314e:	024a      	lsls	r2, r1, #9
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	2200      	movs	r2, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 800315a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800315c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003160:	f7fd f8be 	bl	80002e0 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316c:	e058      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	2200      	movs	r2, #0
 8003176:	4618      	mov	r0, r3
 8003178:	4611      	mov	r1, r2
 800317a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	f04f 0000 	mov.w	r0, #0
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	0159      	lsls	r1, r3, #5
 8003196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319a:	0150      	lsls	r0, r2, #5
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4641      	mov	r1, r8
 80031a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c0:	ebb2 040a 	subs.w	r4, r2, sl
 80031c4:	eb63 050b 	sbc.w	r5, r3, fp
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	00eb      	lsls	r3, r5, #3
 80031d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d6:	00e2      	lsls	r2, r4, #3
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	18e3      	adds	r3, r4, r3
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb45 0303 	adc.w	r3, r5, r3
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f6:	4629      	mov	r1, r5
 80031f8:	028b      	lsls	r3, r1, #10
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003200:	4621      	mov	r1, r4
 8003202:	028a      	lsls	r2, r1, #10
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320a:	2200      	movs	r2, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	61fa      	str	r2, [r7, #28]
 8003210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003214:	f7fd f864 	bl	80002e0 <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4613      	mov	r3, r2
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	3301      	adds	r3, #1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetSysClockFreq+0x204>)
 800323e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003244:	4618      	mov	r0, r3
 8003246:	3750      	adds	r7, #80	; 0x50
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200

0800325c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff0 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	08005a84 	.word	0x08005a84

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a0:	f7ff ffdc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0b5b      	lsrs	r3, r3, #13
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08005a84 	.word	0x08005a84

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032ec:	4b69      	ldr	r3, [pc, #420]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a68      	ldr	r2, [pc, #416]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032f6:	6093      	str	r3, [r2, #8]
 80032f8:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	4964      	ldr	r1, [pc, #400]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d017      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	4959      	ldr	r1, [pc, #356]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333c:	d101      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800335a:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	494a      	ldr	r1, [pc, #296]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003378:	d101      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 808b 	beq.w	80034be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	4a39      	ldr	r2, [pc, #228]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6413      	str	r3, [r2, #64]	; 0x40
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033c0:	4b35      	ldr	r3, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a34      	ldr	r2, [pc, #208]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fd feee 	bl	80011ac <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fd feea 	bl	80011ac <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e38f      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d035      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d02e      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003418:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a1d      	ldr	r2, [pc, #116]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d114      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd feb2 	bl	80011ac <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fd feae 	bl	80011ac <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e351      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ee      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347a:	d111      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800348a:	400b      	ands	r3, r1
 800348c:	4901      	ldr	r1, [pc, #4]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
 8003492:	e00b      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
 800349c:	0ffffcff 	.word	0x0ffffcff
 80034a0:	4bac      	ldr	r3, [pc, #688]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4aab      	ldr	r2, [pc, #684]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	4ba9      	ldr	r3, [pc, #676]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	49a6      	ldr	r1, [pc, #664]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ca:	4ba2      	ldr	r3, [pc, #648]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d0:	4aa0      	ldr	r2, [pc, #640]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034da:	4b9e      	ldr	r3, [pc, #632]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	499b      	ldr	r1, [pc, #620]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f8:	4b96      	ldr	r3, [pc, #600]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003506:	4993      	ldr	r1, [pc, #588]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800351a:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003528:	498a      	ldr	r1, [pc, #552]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800353c:	4b85      	ldr	r3, [pc, #532]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354a:	4982      	ldr	r1, [pc, #520]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800355e:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4979      	ldr	r1, [pc, #484]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003580:	4b74      	ldr	r3, [pc, #464]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4971      	ldr	r1, [pc, #452]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a2:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	f023 020c 	bic.w	r2, r3, #12
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	4968      	ldr	r1, [pc, #416]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c4:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	4960      	ldr	r1, [pc, #384]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e6:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	4957      	ldr	r1, [pc, #348]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003608:	4b52      	ldr	r3, [pc, #328]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	494f      	ldr	r1, [pc, #316]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	4946      	ldr	r1, [pc, #280]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	493e      	ldr	r1, [pc, #248]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	4935      	ldr	r1, [pc, #212]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369e:	492d      	ldr	r1, [pc, #180]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d011      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c0:	4924      	ldr	r1, [pc, #144]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036e2:	2301      	movs	r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	4914      	ldr	r1, [pc, #80]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003724:	490b      	ldr	r1, [pc, #44]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00f      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003748:	4902      	ldr	r1, [pc, #8]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003764:	4b8a      	ldr	r3, [pc, #552]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	4986      	ldr	r1, [pc, #536]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003788:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003798:	497d      	ldr	r1, [pc, #500]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d006      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80d6 	beq.w	8003960 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037b4:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a75      	ldr	r2, [pc, #468]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd fcf4 	bl	80011ac <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037c8:	f7fd fcf0 	bl	80011ac <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e195      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037da:	4b6d      	ldr	r3, [pc, #436]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d021      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11d      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003808:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380e:	0e1b      	lsrs	r3, r3, #24
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	019a      	lsls	r2, r3, #6
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	071b      	lsls	r3, r3, #28
 800382e:	4958      	ldr	r1, [pc, #352]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02e      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003860:	d129      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003862:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003870:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	019a      	lsls	r2, r3, #6
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	493e      	ldr	r1, [pc, #248]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800389e:	4b3c      	ldr	r3, [pc, #240]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a4:	f023 021f 	bic.w	r2, r3, #31
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4938      	ldr	r1, [pc, #224]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01d      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038c2:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d6:	0f1b      	lsrs	r3, r3, #28
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	019a      	lsls	r2, r3, #6
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	4926      	ldr	r1, [pc, #152]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	019a      	lsls	r2, r3, #6
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	491a      	ldr	r1, [pc, #104]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393a:	f7fd fc37 	bl	80011ac <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003942:	f7fd fc33 	bl	80011ac <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b64      	cmp	r3, #100	; 0x64
 800394e:	d901      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0d8      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	f040 80ce 	bne.w	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a08      	ldr	r2, [pc, #32]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fd fc1a 	bl	80011ac <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800397a:	e00b      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800397c:	f7fd fc16 	bl	80011ac <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d904      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0bb      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003994:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a0:	d0ec      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d12a      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ca:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039d8:	4b4d      	ldr	r3, [pc, #308]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	0f1b      	lsrs	r3, r3, #28
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	019a      	lsls	r2, r3, #6
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	071b      	lsls	r3, r3, #28
 80039fe:	4944      	ldr	r1, [pc, #272]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	3b01      	subs	r3, #1
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	493d      	ldr	r1, [pc, #244]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d022      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a34:	d11d      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	0e1b      	lsrs	r3, r3, #24
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	0f1b      	lsrs	r3, r3, #28
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4929      	ldr	r1, [pc, #164]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d028      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a8c:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	4917      	ldr	r1, [pc, #92]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4911      	ldr	r1, [pc, #68]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003adc:	f7fd fb66 	bl	80011ac <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ae4:	f7fd fb62 	bl	80011ac <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e007      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b02:	d1ef      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800

08003b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e040      	b.n	8003ba8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f904 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8b0 	bl	8003cb8 <UART_SetConfig>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e022      	b.n	8003ba8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fb08 	bl	8004180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fb8f 	bl	80042c4 <UART_CheckIdleState>
 8003ba6:	4603      	mov	r3, r0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d171      	bne.n	8003cac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_UART_Transmit+0x24>
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e06a      	b.n	8003cae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2221      	movs	r2, #33	; 0x21
 8003be4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be6:	f7fd fae1 	bl	80011ac <HAL_GetTick>
 8003bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d108      	bne.n	8003c18 <HAL_UART_Transmit+0x68>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e003      	b.n	8003c20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c20:	e02c      	b.n	8003c7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fb96 	bl	800435e <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e038      	b.n	8003cae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	3302      	adds	r3, #2
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e007      	b.n	8003c6a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3301      	adds	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1cc      	bne.n	8003c22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2140      	movs	r1, #64	; 0x40
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fb63 	bl	800435e <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e005      	b.n	8003cae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4ba6      	ldr	r3, [pc, #664]	; (8003f7c <UART_SetConfig+0x2c4>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a94      	ldr	r2, [pc, #592]	; (8003f80 <UART_SetConfig+0x2c8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d120      	bne.n	8003d76 <UART_SetConfig+0xbe>
 8003d34:	4b93      	ldr	r3, [pc, #588]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d816      	bhi.n	8003d70 <UART_SetConfig+0xb8>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x90>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d65 	.word	0x08003d65
 8003d50:	08003d5f 	.word	0x08003d5f
 8003d54:	08003d6b 	.word	0x08003d6b
 8003d58:	2301      	movs	r3, #1
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e150      	b.n	8004000 <UART_SetConfig+0x348>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e14d      	b.n	8004000 <UART_SetConfig+0x348>
 8003d64:	2304      	movs	r3, #4
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e14a      	b.n	8004000 <UART_SetConfig+0x348>
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e147      	b.n	8004000 <UART_SetConfig+0x348>
 8003d70:	2310      	movs	r3, #16
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e144      	b.n	8004000 <UART_SetConfig+0x348>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a83      	ldr	r2, [pc, #524]	; (8003f88 <UART_SetConfig+0x2d0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d132      	bne.n	8003de6 <UART_SetConfig+0x12e>
 8003d80:	4b80      	ldr	r3, [pc, #512]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d828      	bhi.n	8003de0 <UART_SetConfig+0x128>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0xdc>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003de1 	.word	0x08003de1
 8003d9c:	08003de1 	.word	0x08003de1
 8003da0:	08003de1 	.word	0x08003de1
 8003da4:	08003dd5 	.word	0x08003dd5
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003de1 	.word	0x08003de1
 8003db4:	08003dcf 	.word	0x08003dcf
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de1 	.word	0x08003de1
 8003dc4:	08003ddb 	.word	0x08003ddb
 8003dc8:	2300      	movs	r3, #0
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e118      	b.n	8004000 <UART_SetConfig+0x348>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e115      	b.n	8004000 <UART_SetConfig+0x348>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e112      	b.n	8004000 <UART_SetConfig+0x348>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e10f      	b.n	8004000 <UART_SetConfig+0x348>
 8003de0:	2310      	movs	r3, #16
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e10c      	b.n	8004000 <UART_SetConfig+0x348>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a68      	ldr	r2, [pc, #416]	; (8003f8c <UART_SetConfig+0x2d4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d120      	bne.n	8003e32 <UART_SetConfig+0x17a>
 8003df0:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dfa:	2b30      	cmp	r3, #48	; 0x30
 8003dfc:	d013      	beq.n	8003e26 <UART_SetConfig+0x16e>
 8003dfe:	2b30      	cmp	r3, #48	; 0x30
 8003e00:	d814      	bhi.n	8003e2c <UART_SetConfig+0x174>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d009      	beq.n	8003e1a <UART_SetConfig+0x162>
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d810      	bhi.n	8003e2c <UART_SetConfig+0x174>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <UART_SetConfig+0x15c>
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d006      	beq.n	8003e20 <UART_SetConfig+0x168>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x174>
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e0f2      	b.n	8004000 <UART_SetConfig+0x348>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e0ef      	b.n	8004000 <UART_SetConfig+0x348>
 8003e20:	2304      	movs	r3, #4
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e0ec      	b.n	8004000 <UART_SetConfig+0x348>
 8003e26:	2308      	movs	r3, #8
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e0e9      	b.n	8004000 <UART_SetConfig+0x348>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e0e6      	b.n	8004000 <UART_SetConfig+0x348>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a56      	ldr	r2, [pc, #344]	; (8003f90 <UART_SetConfig+0x2d8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d120      	bne.n	8003e7e <UART_SetConfig+0x1c6>
 8003e3c:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e46:	2bc0      	cmp	r3, #192	; 0xc0
 8003e48:	d013      	beq.n	8003e72 <UART_SetConfig+0x1ba>
 8003e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e4c:	d814      	bhi.n	8003e78 <UART_SetConfig+0x1c0>
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d009      	beq.n	8003e66 <UART_SetConfig+0x1ae>
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d810      	bhi.n	8003e78 <UART_SetConfig+0x1c0>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <UART_SetConfig+0x1a8>
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d006      	beq.n	8003e6c <UART_SetConfig+0x1b4>
 8003e5e:	e00b      	b.n	8003e78 <UART_SetConfig+0x1c0>
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e0cc      	b.n	8004000 <UART_SetConfig+0x348>
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e0c9      	b.n	8004000 <UART_SetConfig+0x348>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e0c6      	b.n	8004000 <UART_SetConfig+0x348>
 8003e72:	2308      	movs	r3, #8
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e0c3      	b.n	8004000 <UART_SetConfig+0x348>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e0c0      	b.n	8004000 <UART_SetConfig+0x348>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a44      	ldr	r2, [pc, #272]	; (8003f94 <UART_SetConfig+0x2dc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d125      	bne.n	8003ed4 <UART_SetConfig+0x21c>
 8003e88:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e96:	d017      	beq.n	8003ec8 <UART_SetConfig+0x210>
 8003e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9c:	d817      	bhi.n	8003ece <UART_SetConfig+0x216>
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea2:	d00b      	beq.n	8003ebc <UART_SetConfig+0x204>
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d811      	bhi.n	8003ece <UART_SetConfig+0x216>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <UART_SetConfig+0x1fe>
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d006      	beq.n	8003ec2 <UART_SetConfig+0x20a>
 8003eb4:	e00b      	b.n	8003ece <UART_SetConfig+0x216>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e0a1      	b.n	8004000 <UART_SetConfig+0x348>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e09e      	b.n	8004000 <UART_SetConfig+0x348>
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e09b      	b.n	8004000 <UART_SetConfig+0x348>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e098      	b.n	8004000 <UART_SetConfig+0x348>
 8003ece:	2310      	movs	r3, #16
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e095      	b.n	8004000 <UART_SetConfig+0x348>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <UART_SetConfig+0x2e0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d125      	bne.n	8003f2a <UART_SetConfig+0x272>
 8003ede:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eec:	d017      	beq.n	8003f1e <UART_SetConfig+0x266>
 8003eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef2:	d817      	bhi.n	8003f24 <UART_SetConfig+0x26c>
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef8:	d00b      	beq.n	8003f12 <UART_SetConfig+0x25a>
 8003efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efe:	d811      	bhi.n	8003f24 <UART_SetConfig+0x26c>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <UART_SetConfig+0x254>
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f08:	d006      	beq.n	8003f18 <UART_SetConfig+0x260>
 8003f0a:	e00b      	b.n	8003f24 <UART_SetConfig+0x26c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e076      	b.n	8004000 <UART_SetConfig+0x348>
 8003f12:	2302      	movs	r3, #2
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e073      	b.n	8004000 <UART_SetConfig+0x348>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e070      	b.n	8004000 <UART_SetConfig+0x348>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e06d      	b.n	8004000 <UART_SetConfig+0x348>
 8003f24:	2310      	movs	r3, #16
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e06a      	b.n	8004000 <UART_SetConfig+0x348>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <UART_SetConfig+0x2e4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d138      	bne.n	8003fa6 <UART_SetConfig+0x2ee>
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <UART_SetConfig+0x2cc>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f42:	d017      	beq.n	8003f74 <UART_SetConfig+0x2bc>
 8003f44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f48:	d82a      	bhi.n	8003fa0 <UART_SetConfig+0x2e8>
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4e:	d00b      	beq.n	8003f68 <UART_SetConfig+0x2b0>
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d824      	bhi.n	8003fa0 <UART_SetConfig+0x2e8>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <UART_SetConfig+0x2aa>
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	d006      	beq.n	8003f6e <UART_SetConfig+0x2b6>
 8003f60:	e01e      	b.n	8003fa0 <UART_SetConfig+0x2e8>
 8003f62:	2300      	movs	r3, #0
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e04b      	b.n	8004000 <UART_SetConfig+0x348>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e048      	b.n	8004000 <UART_SetConfig+0x348>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e045      	b.n	8004000 <UART_SetConfig+0x348>
 8003f74:	2308      	movs	r3, #8
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e042      	b.n	8004000 <UART_SetConfig+0x348>
 8003f7a:	bf00      	nop
 8003f7c:	efff69f3 	.word	0xefff69f3
 8003f80:	40011000 	.word	0x40011000
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40004400 	.word	0x40004400
 8003f8c:	40004800 	.word	0x40004800
 8003f90:	40004c00 	.word	0x40004c00
 8003f94:	40005000 	.word	0x40005000
 8003f98:	40011400 	.word	0x40011400
 8003f9c:	40007800 	.word	0x40007800
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e02c      	b.n	8004000 <UART_SetConfig+0x348>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a72      	ldr	r2, [pc, #456]	; (8004174 <UART_SetConfig+0x4bc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d125      	bne.n	8003ffc <UART_SetConfig+0x344>
 8003fb0:	4b71      	ldr	r3, [pc, #452]	; (8004178 <UART_SetConfig+0x4c0>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fbe:	d017      	beq.n	8003ff0 <UART_SetConfig+0x338>
 8003fc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fc4:	d817      	bhi.n	8003ff6 <UART_SetConfig+0x33e>
 8003fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fca:	d00b      	beq.n	8003fe4 <UART_SetConfig+0x32c>
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	d811      	bhi.n	8003ff6 <UART_SetConfig+0x33e>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <UART_SetConfig+0x326>
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fda:	d006      	beq.n	8003fea <UART_SetConfig+0x332>
 8003fdc:	e00b      	b.n	8003ff6 <UART_SetConfig+0x33e>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e00d      	b.n	8004000 <UART_SetConfig+0x348>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e00a      	b.n	8004000 <UART_SetConfig+0x348>
 8003fea:	2304      	movs	r3, #4
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e007      	b.n	8004000 <UART_SetConfig+0x348>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e004      	b.n	8004000 <UART_SetConfig+0x348>
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e001      	b.n	8004000 <UART_SetConfig+0x348>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004008:	d15b      	bne.n	80040c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800400a:	7ffb      	ldrb	r3, [r7, #31]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d828      	bhi.n	8004062 <UART_SetConfig+0x3aa>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x360>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800403d 	.word	0x0800403d
 800401c:	08004045 	.word	0x08004045
 8004020:	0800404d 	.word	0x0800404d
 8004024:	08004063 	.word	0x08004063
 8004028:	08004053 	.word	0x08004053
 800402c:	08004063 	.word	0x08004063
 8004030:	08004063 	.word	0x08004063
 8004034:	08004063 	.word	0x08004063
 8004038:	0800405b 	.word	0x0800405b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7ff f91a 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8004040:	61b8      	str	r0, [r7, #24]
        break;
 8004042:	e013      	b.n	800406c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004044:	f7ff f92a 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8004048:	61b8      	str	r0, [r7, #24]
        break;
 800404a:	e00f      	b.n	800406c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <UART_SetConfig+0x4c4>)
 800404e:	61bb      	str	r3, [r7, #24]
        break;
 8004050:	e00c      	b.n	800406c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004052:	f7fe fffd 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8004056:	61b8      	str	r0, [r7, #24]
        break;
 8004058:	e008      	b.n	800406c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405e:	61bb      	str	r3, [r7, #24]
        break;
 8004060:	e004      	b.n	800406c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	77bb      	strb	r3, [r7, #30]
        break;
 800406a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d074      	beq.n	800415c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	005a      	lsls	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	441a      	add	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b0f      	cmp	r3, #15
 800408c:	d916      	bls.n	80040bc <UART_SetConfig+0x404>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d212      	bcs.n	80040bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f023 030f 	bic.w	r3, r3, #15
 800409e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	89fb      	ldrh	r3, [r7, #14]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	89fa      	ldrh	r2, [r7, #14]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e04f      	b.n	800415c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	77bb      	strb	r3, [r7, #30]
 80040c0:	e04c      	b.n	800415c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d828      	bhi.n	800411a <UART_SetConfig+0x462>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0x418>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	0800411b 	.word	0x0800411b
 80040e0:	0800410b 	.word	0x0800410b
 80040e4:	0800411b 	.word	0x0800411b
 80040e8:	0800411b 	.word	0x0800411b
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	08004113 	.word	0x08004113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7ff f8be 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 80040f8:	61b8      	str	r0, [r7, #24]
        break;
 80040fa:	e013      	b.n	8004124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040fc:	f7ff f8ce 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8004100:	61b8      	str	r0, [r7, #24]
        break;
 8004102:	e00f      	b.n	8004124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <UART_SetConfig+0x4c4>)
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e00c      	b.n	8004124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410a:	f7fe ffa1 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800410e:	61b8      	str	r0, [r7, #24]
        break;
 8004110:	e008      	b.n	8004124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	61bb      	str	r3, [r7, #24]
        break;
 8004118:	e004      	b.n	8004124 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	77bb      	strb	r3, [r7, #30]
        break;
 8004122:	bf00      	nop
    }

    if (pclk != 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085a      	lsrs	r2, r3, #1
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d909      	bls.n	8004158 <UART_SetConfig+0x4a0>
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414a:	d205      	bcs.n	8004158 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	e001      	b.n	800415c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004168:	7fbb      	ldrb	r3, [r7, #30]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40007c00 	.word	0x40007c00
 8004178:	40023800 	.word	0x40023800
 800417c:	00f42400 	.word	0x00f42400

08004180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01a      	beq.n	8004296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427e:	d10a      	bne.n	8004296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d4:	f7fc ff6a 	bl	80011ac <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d10e      	bne.n	8004306 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f831 	bl	800435e <UART_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e027      	b.n	8004356 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d10e      	bne.n	8004332 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f81b 	bl	800435e <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e011      	b.n	8004356 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b09c      	sub	sp, #112	; 0x70
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436e:	e0a7      	b.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	f000 80a3 	beq.w	80044c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7fc ff17 	bl	80011ac <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <UART_WaitOnFlagUntilTimeout+0x32>
 800438a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438c:	2b00      	cmp	r3, #0
 800438e:	d13f      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a4:	667b      	str	r3, [r7, #100]	; 0x64
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e6      	bne.n	8004390 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	663b      	str	r3, [r7, #96]	; 0x60
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e5      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e068      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d050      	beq.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442c:	d148      	bne.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004436:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800444c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
 8004458:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800445c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	613b      	str	r3, [r7, #16]
   return(result);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	66bb      	str	r3, [r7, #104]	; 0x68
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3308      	adds	r3, #8
 8004488:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800448a:	623a      	str	r2, [r7, #32]
 800448c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	69f9      	ldr	r1, [r7, #28]
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	61bb      	str	r3, [r7, #24]
   return(result);
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e010      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	429a      	cmp	r2, r3
 80044dc:	f43f af48 	beq.w	8004370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3770      	adds	r7, #112	; 0x70
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ec:	b084      	sub	sp, #16
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	f107 001c 	add.w	r0, r7, #28
 80044fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2b01      	cmp	r3, #1
 8004502:	d120      	bne.n	8004546 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <USB_CoreInit+0xac>)
 8004516:	4013      	ands	r3, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa96 	bl	8004a6c <USB_CoreReset>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	e010      	b.n	8004568 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa8a 	bl	8004a6c <USB_CoreReset>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10b      	bne.n	8004586 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f043 0206 	orr.w	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	ffbdffbf 	.word	0xffbdffbf

0800459c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f023 0201 	bic.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d115      	bne.n	800460c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fc fde9 	bl	80011c4 <HAL_Delay>
      ms++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa29 	bl	8004a50 <USB_GetMode>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d01e      	beq.n	8004642 <USB_SetCurrentMode+0x84>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b31      	cmp	r3, #49	; 0x31
 8004608:	d9f0      	bls.n	80045ec <USB_SetCurrentMode+0x2e>
 800460a:	e01a      	b.n	8004642 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d115      	bne.n	800463e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800461e:	2001      	movs	r0, #1
 8004620:	f7fc fdd0 	bl	80011c4 <HAL_Delay>
      ms++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa10 	bl	8004a50 <USB_GetMode>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <USB_SetCurrentMode+0x84>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b31      	cmp	r3, #49	; 0x31
 800463a:	d9f0      	bls.n	800461e <USB_SetCurrentMode+0x60>
 800463c:	e001      	b.n	8004642 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e005      	b.n	800464e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b32      	cmp	r3, #50	; 0x32
 8004646:	d101      	bne.n	800464c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004658:	b084      	sub	sp, #16
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e009      	b.n	800468c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3340      	adds	r3, #64	; 0x40
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	2200      	movs	r2, #0
 8004684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b0e      	cmp	r3, #14
 8004690:	d9f2      	bls.n	8004678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11c      	bne.n	80046d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a6:	f043 0302 	orr.w	r3, r3, #2
 80046aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e005      	b.n	80046de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046e4:	461a      	mov	r2, r3
 80046e6:	2300      	movs	r3, #0
 80046e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f0:	4619      	mov	r1, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	461a      	mov	r2, r3
 80046fa:	680b      	ldr	r3, [r1, #0]
 80046fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10c      	bne.n	800471e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800470a:	2100      	movs	r1, #0
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f965 	bl	80049dc <USB_SetDevSpeed>
 8004712:	e008      	b.n	8004726 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004714:	2101      	movs	r1, #1
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f960 	bl	80049dc <USB_SetDevSpeed>
 800471c:	e003      	b.n	8004726 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800471e:	2103      	movs	r1, #3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f95b 	bl	80049dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004726:	2110      	movs	r1, #16
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8f3 	bl	8004914 <USB_FlushTxFifo>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f91f 	bl	800497c <USB_FlushRxFifo>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	461a      	mov	r2, r3
 8004750:	2300      	movs	r3, #0
 8004752:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	e043      	b.n	80047fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004788:	d118      	bne.n	80047bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	461a      	mov	r2, r3
 800479e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e013      	b.n	80047ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e008      	b.n	80047ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	461a      	mov	r2, r3
 80047dc:	2300      	movs	r3, #0
 80047de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	461a      	mov	r2, r3
 80047ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3301      	adds	r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3b7      	bcc.n	8004772 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e043      	b.n	8004890 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481e:	d118      	bne.n	8004852 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e013      	b.n	8004864 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e008      	b.n	8004864 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	461a      	mov	r2, r3
 8004884:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3301      	adds	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d3b7      	bcc.n	8004808 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f043 0210 	orr.w	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <USB_DevInit+0x2b4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f043 0208 	orr.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <USB_DevInit+0x2b8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004908:	b004      	add	sp, #16
 800490a:	4770      	bx	lr
 800490c:	803c3800 	.word	0x803c3800
 8004910:	40000004 	.word	0x40000004

08004914 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3301      	adds	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <USB_FlushTxFifo+0x64>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e01b      	b.n	800496c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	daf2      	bge.n	8004922 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	019b      	lsls	r3, r3, #6
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <USB_FlushTxFifo+0x64>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e006      	b.n	800496c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d0f0      	beq.n	800494c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <USB_FlushRxFifo+0x5c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e018      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	daf2      	bge.n	8004988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2210      	movs	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <USB_FlushRxFifo+0x5c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e006      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d0f0      	beq.n	80049ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	00030d40 	.word	0x00030d40

080049dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <USB_CoreReset+0x64>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e01b      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	daf2      	bge.n	8004a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <USB_CoreReset+0x64>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0f0      	beq.n	8004aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	00030d40 	.word	0x00030d40

08004ad4 <std>:
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	4604      	mov	r4, r0
 8004ada:	e9c0 3300 	strd	r3, r3, [r0]
 8004ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ae2:	6083      	str	r3, [r0, #8]
 8004ae4:	8181      	strh	r1, [r0, #12]
 8004ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ae8:	81c2      	strh	r2, [r0, #14]
 8004aea:	6183      	str	r3, [r0, #24]
 8004aec:	4619      	mov	r1, r3
 8004aee:	2208      	movs	r2, #8
 8004af0:	305c      	adds	r0, #92	; 0x5c
 8004af2:	f000 f9f7 	bl	8004ee4 <memset>
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <std+0x58>)
 8004af8:	6263      	str	r3, [r4, #36]	; 0x24
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <std+0x5c>)
 8004afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <std+0x60>)
 8004b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <std+0x64>)
 8004b04:	6323      	str	r3, [r4, #48]	; 0x30
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <std+0x68>)
 8004b08:	6224      	str	r4, [r4, #32]
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d006      	beq.n	8004b1c <std+0x48>
 8004b0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b12:	4294      	cmp	r4, r2
 8004b14:	d002      	beq.n	8004b1c <std+0x48>
 8004b16:	33d0      	adds	r3, #208	; 0xd0
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	d105      	bne.n	8004b28 <std+0x54>
 8004b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f000 ba56 	b.w	8004fd4 <__retarget_lock_init_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08004d35 	.word	0x08004d35
 8004b30:	08004d57 	.word	0x08004d57
 8004b34:	08004d8f 	.word	0x08004d8f
 8004b38:	08004db3 	.word	0x08004db3
 8004b3c:	200008a0 	.word	0x200008a0

08004b40 <stdio_exit_handler>:
 8004b40:	4a02      	ldr	r2, [pc, #8]	; (8004b4c <stdio_exit_handler+0xc>)
 8004b42:	4903      	ldr	r1, [pc, #12]	; (8004b50 <stdio_exit_handler+0x10>)
 8004b44:	4803      	ldr	r0, [pc, #12]	; (8004b54 <stdio_exit_handler+0x14>)
 8004b46:	f000 b869 	b.w	8004c1c <_fwalk_sglue>
 8004b4a:	bf00      	nop
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	08005881 	.word	0x08005881
 8004b54:	20000018 	.word	0x20000018

08004b58 <cleanup_stdio>:
 8004b58:	6841      	ldr	r1, [r0, #4]
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <cleanup_stdio+0x34>)
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	b510      	push	{r4, lr}
 8004b60:	4604      	mov	r4, r0
 8004b62:	d001      	beq.n	8004b68 <cleanup_stdio+0x10>
 8004b64:	f000 fe8c 	bl	8005880 <_fflush_r>
 8004b68:	68a1      	ldr	r1, [r4, #8]
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <cleanup_stdio+0x38>)
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <cleanup_stdio+0x1e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fe85 	bl	8005880 <_fflush_r>
 8004b76:	68e1      	ldr	r1, [r4, #12]
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <cleanup_stdio+0x3c>)
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d004      	beq.n	8004b88 <cleanup_stdio+0x30>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	f000 be7c 	b.w	8005880 <_fflush_r>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200008a0 	.word	0x200008a0
 8004b90:	20000908 	.word	0x20000908
 8004b94:	20000970 	.word	0x20000970

08004b98 <global_stdio_init.part.0>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <global_stdio_init.part.0+0x30>)
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	; (8004bcc <global_stdio_init.part.0+0x34>)
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <global_stdio_init.part.0+0x38>)
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	f7ff ff94 	bl	8004ad4 <std>
 8004bac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2109      	movs	r1, #9
 8004bb4:	f7ff ff8e 	bl	8004ad4 <std>
 8004bb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc2:	2112      	movs	r1, #18
 8004bc4:	f7ff bf86 	b.w	8004ad4 <std>
 8004bc8:	200009d8 	.word	0x200009d8
 8004bcc:	200008a0 	.word	0x200008a0
 8004bd0:	08004b41 	.word	0x08004b41

08004bd4 <__sfp_lock_acquire>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__sfp_lock_acquire+0x8>)
 8004bd6:	f000 b9fe 	b.w	8004fd6 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	200009e1 	.word	0x200009e1

08004be0 <__sfp_lock_release>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__sfp_lock_release+0x8>)
 8004be2:	f000 b9f9 	b.w	8004fd8 <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	200009e1 	.word	0x200009e1

08004bec <__sinit>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	f7ff fff0 	bl	8004bd4 <__sfp_lock_acquire>
 8004bf4:	6a23      	ldr	r3, [r4, #32]
 8004bf6:	b11b      	cbz	r3, 8004c00 <__sinit+0x14>
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfc:	f7ff bff0 	b.w	8004be0 <__sfp_lock_release>
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__sinit+0x28>)
 8004c02:	6223      	str	r3, [r4, #32]
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <__sinit+0x2c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f5      	bne.n	8004bf8 <__sinit+0xc>
 8004c0c:	f7ff ffc4 	bl	8004b98 <global_stdio_init.part.0>
 8004c10:	e7f2      	b.n	8004bf8 <__sinit+0xc>
 8004c12:	bf00      	nop
 8004c14:	08004b59 	.word	0x08004b59
 8004c18:	200009d8 	.word	0x200009d8

08004c1c <_fwalk_sglue>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	4607      	mov	r7, r0
 8004c22:	4688      	mov	r8, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	2600      	movs	r6, #0
 8004c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c30:	d505      	bpl.n	8004c3e <_fwalk_sglue+0x22>
 8004c32:	6824      	ldr	r4, [r4, #0]
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	d1f7      	bne.n	8004c28 <_fwalk_sglue+0xc>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d907      	bls.n	8004c54 <_fwalk_sglue+0x38>
 8004c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	d003      	beq.n	8004c54 <_fwalk_sglue+0x38>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4638      	mov	r0, r7
 8004c50:	47c0      	blx	r8
 8004c52:	4306      	orrs	r6, r0
 8004c54:	3568      	adds	r5, #104	; 0x68
 8004c56:	e7e9      	b.n	8004c2c <_fwalk_sglue+0x10>

08004c58 <iprintf>:
 8004c58:	b40f      	push	{r0, r1, r2, r3}
 8004c5a:	b507      	push	{r0, r1, r2, lr}
 8004c5c:	4906      	ldr	r1, [pc, #24]	; (8004c78 <iprintf+0x20>)
 8004c5e:	ab04      	add	r3, sp, #16
 8004c60:	6808      	ldr	r0, [r1, #0]
 8004c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c66:	6881      	ldr	r1, [r0, #8]
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	f000 fad9 	bl	8005220 <_vfiprintf_r>
 8004c6e:	b003      	add	sp, #12
 8004c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c74:	b004      	add	sp, #16
 8004c76:	4770      	bx	lr
 8004c78:	20000064 	.word	0x20000064

08004c7c <_puts_r>:
 8004c7c:	6a03      	ldr	r3, [r0, #32]
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	6884      	ldr	r4, [r0, #8]
 8004c82:	4605      	mov	r5, r0
 8004c84:	460e      	mov	r6, r1
 8004c86:	b90b      	cbnz	r3, 8004c8c <_puts_r+0x10>
 8004c88:	f7ff ffb0 	bl	8004bec <__sinit>
 8004c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c8e:	07db      	lsls	r3, r3, #31
 8004c90:	d405      	bmi.n	8004c9e <_puts_r+0x22>
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	0598      	lsls	r0, r3, #22
 8004c96:	d402      	bmi.n	8004c9e <_puts_r+0x22>
 8004c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c9a:	f000 f99c 	bl	8004fd6 <__retarget_lock_acquire_recursive>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	0719      	lsls	r1, r3, #28
 8004ca2:	d513      	bpl.n	8004ccc <_puts_r+0x50>
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	b18b      	cbz	r3, 8004ccc <_puts_r+0x50>
 8004ca8:	3e01      	subs	r6, #1
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	b9e9      	cbnz	r1, 8004cf2 <_puts_r+0x76>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da2e      	bge.n	8004d18 <_puts_r+0x9c>
 8004cba:	4622      	mov	r2, r4
 8004cbc:	210a      	movs	r1, #10
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 f87b 	bl	8004dba <__swbuf_r>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d007      	beq.n	8004cd8 <_puts_r+0x5c>
 8004cc8:	250a      	movs	r5, #10
 8004cca:	e007      	b.n	8004cdc <_puts_r+0x60>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 f8b0 	bl	8004e34 <__swsetup_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d0e7      	beq.n	8004ca8 <_puts_r+0x2c>
 8004cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8004cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cde:	07da      	lsls	r2, r3, #31
 8004ce0:	d405      	bmi.n	8004cee <_puts_r+0x72>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	059b      	lsls	r3, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_puts_r+0x72>
 8004ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cea:	f000 f975 	bl	8004fd8 <__retarget_lock_release_recursive>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da04      	bge.n	8004d00 <_puts_r+0x84>
 8004cf6:	69a2      	ldr	r2, [r4, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	dc06      	bgt.n	8004d0a <_puts_r+0x8e>
 8004cfc:	290a      	cmp	r1, #10
 8004cfe:	d004      	beq.n	8004d0a <_puts_r+0x8e>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	6022      	str	r2, [r4, #0]
 8004d06:	7019      	strb	r1, [r3, #0]
 8004d08:	e7cf      	b.n	8004caa <_puts_r+0x2e>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f854 	bl	8004dba <__swbuf_r>
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1c9      	bne.n	8004caa <_puts_r+0x2e>
 8004d16:	e7df      	b.n	8004cd8 <_puts_r+0x5c>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	250a      	movs	r5, #10
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	701d      	strb	r5, [r3, #0]
 8004d22:	e7db      	b.n	8004cdc <_puts_r+0x60>

08004d24 <puts>:
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <puts+0xc>)
 8004d26:	4601      	mov	r1, r0
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f7ff bfa7 	b.w	8004c7c <_puts_r>
 8004d2e:	bf00      	nop
 8004d30:	20000064 	.word	0x20000064

08004d34 <__sread>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	460c      	mov	r4, r1
 8004d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3c:	f000 f8fc 	bl	8004f38 <_read_r>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	bfab      	itete	ge
 8004d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d46:	89a3      	ldrhlt	r3, [r4, #12]
 8004d48:	181b      	addge	r3, r3, r0
 8004d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d4e:	bfac      	ite	ge
 8004d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d52:	81a3      	strhlt	r3, [r4, #12]
 8004d54:	bd10      	pop	{r4, pc}

08004d56 <__swrite>:
 8004d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	05db      	lsls	r3, r3, #23
 8004d60:	4605      	mov	r5, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	4616      	mov	r6, r2
 8004d66:	d505      	bpl.n	8004d74 <__swrite+0x1e>
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f000 f8d0 	bl	8004f14 <_lseek_r>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	4632      	mov	r2, r6
 8004d82:	463b      	mov	r3, r7
 8004d84:	4628      	mov	r0, r5
 8004d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	f000 b8e7 	b.w	8004f5c <_write_r>

08004d8e <__sseek>:
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	460c      	mov	r4, r1
 8004d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d96:	f000 f8bd 	bl	8004f14 <_lseek_r>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	bf15      	itete	ne
 8004da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004daa:	81a3      	strheq	r3, [r4, #12]
 8004dac:	bf18      	it	ne
 8004dae:	81a3      	strhne	r3, [r4, #12]
 8004db0:	bd10      	pop	{r4, pc}

08004db2 <__sclose>:
 8004db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db6:	f000 b89d 	b.w	8004ef4 <_close_r>

08004dba <__swbuf_r>:
 8004dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	b118      	cbz	r0, 8004dcc <__swbuf_r+0x12>
 8004dc4:	6a03      	ldr	r3, [r0, #32]
 8004dc6:	b90b      	cbnz	r3, 8004dcc <__swbuf_r+0x12>
 8004dc8:	f7ff ff10 	bl	8004bec <__sinit>
 8004dcc:	69a3      	ldr	r3, [r4, #24]
 8004dce:	60a3      	str	r3, [r4, #8]
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	071a      	lsls	r2, r3, #28
 8004dd4:	d525      	bpl.n	8004e22 <__swbuf_r+0x68>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	b31b      	cbz	r3, 8004e22 <__swbuf_r+0x68>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	6922      	ldr	r2, [r4, #16]
 8004dde:	1a98      	subs	r0, r3, r2
 8004de0:	6963      	ldr	r3, [r4, #20]
 8004de2:	b2f6      	uxtb	r6, r6
 8004de4:	4283      	cmp	r3, r0
 8004de6:	4637      	mov	r7, r6
 8004de8:	dc04      	bgt.n	8004df4 <__swbuf_r+0x3a>
 8004dea:	4621      	mov	r1, r4
 8004dec:	4628      	mov	r0, r5
 8004dee:	f000 fd47 	bl	8005880 <_fflush_r>
 8004df2:	b9e0      	cbnz	r0, 8004e2e <__swbuf_r+0x74>
 8004df4:	68a3      	ldr	r3, [r4, #8]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	6022      	str	r2, [r4, #0]
 8004e00:	701e      	strb	r6, [r3, #0]
 8004e02:	6962      	ldr	r2, [r4, #20]
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d004      	beq.n	8004e14 <__swbuf_r+0x5a>
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	07db      	lsls	r3, r3, #31
 8004e0e:	d506      	bpl.n	8004e1e <__swbuf_r+0x64>
 8004e10:	2e0a      	cmp	r6, #10
 8004e12:	d104      	bne.n	8004e1e <__swbuf_r+0x64>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fd32 	bl	8005880 <_fflush_r>
 8004e1c:	b938      	cbnz	r0, 8004e2e <__swbuf_r+0x74>
 8004e1e:	4638      	mov	r0, r7
 8004e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e22:	4621      	mov	r1, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 f805 	bl	8004e34 <__swsetup_r>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0d5      	beq.n	8004dda <__swbuf_r+0x20>
 8004e2e:	f04f 37ff 	mov.w	r7, #4294967295
 8004e32:	e7f4      	b.n	8004e1e <__swbuf_r+0x64>

08004e34 <__swsetup_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <__swsetup_r+0xac>)
 8004e38:	4605      	mov	r5, r0
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	b118      	cbz	r0, 8004e48 <__swsetup_r+0x14>
 8004e40:	6a03      	ldr	r3, [r0, #32]
 8004e42:	b90b      	cbnz	r3, 8004e48 <__swsetup_r+0x14>
 8004e44:	f7ff fed2 	bl	8004bec <__sinit>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e4e:	0718      	lsls	r0, r3, #28
 8004e50:	d422      	bmi.n	8004e98 <__swsetup_r+0x64>
 8004e52:	06d9      	lsls	r1, r3, #27
 8004e54:	d407      	bmi.n	8004e66 <__swsetup_r+0x32>
 8004e56:	2309      	movs	r3, #9
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	e034      	b.n	8004ed0 <__swsetup_r+0x9c>
 8004e66:	0758      	lsls	r0, r3, #29
 8004e68:	d512      	bpl.n	8004e90 <__swsetup_r+0x5c>
 8004e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6c:	b141      	cbz	r1, 8004e80 <__swsetup_r+0x4c>
 8004e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e72:	4299      	cmp	r1, r3
 8004e74:	d002      	beq.n	8004e7c <__swsetup_r+0x48>
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 f8b0 	bl	8004fdc <_free_r>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	f043 0308 	orr.w	r3, r3, #8
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	b94b      	cbnz	r3, 8004eb0 <__swsetup_r+0x7c>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea6:	d003      	beq.n	8004eb0 <__swsetup_r+0x7c>
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 fd36 	bl	800591c <__smakebuf_r>
 8004eb0:	89a0      	ldrh	r0, [r4, #12]
 8004eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eb6:	f010 0301 	ands.w	r3, r0, #1
 8004eba:	d00a      	beq.n	8004ed2 <__swsetup_r+0x9e>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60a3      	str	r3, [r4, #8]
 8004ec0:	6963      	ldr	r3, [r4, #20]
 8004ec2:	425b      	negs	r3, r3
 8004ec4:	61a3      	str	r3, [r4, #24]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	b943      	cbnz	r3, 8004edc <__swsetup_r+0xa8>
 8004eca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ece:	d1c4      	bne.n	8004e5a <__swsetup_r+0x26>
 8004ed0:	bd38      	pop	{r3, r4, r5, pc}
 8004ed2:	0781      	lsls	r1, r0, #30
 8004ed4:	bf58      	it	pl
 8004ed6:	6963      	ldrpl	r3, [r4, #20]
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	e7f4      	b.n	8004ec6 <__swsetup_r+0x92>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e7f7      	b.n	8004ed0 <__swsetup_r+0x9c>
 8004ee0:	20000064 	.word	0x20000064

08004ee4 <memset>:
 8004ee4:	4402      	add	r2, r0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d100      	bne.n	8004eee <memset+0xa>
 8004eec:	4770      	bx	lr
 8004eee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef2:	e7f9      	b.n	8004ee8 <memset+0x4>

08004ef4 <_close_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_close_r+0x1c>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	f7fc f85d 	bl	8000fbe <_close>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_close_r+0x1a>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_close_r+0x1a>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	200009dc 	.word	0x200009dc

08004f14 <_lseek_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d07      	ldr	r5, [pc, #28]	; (8004f34 <_lseek_r+0x20>)
 8004f18:	4604      	mov	r4, r0
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fc f872 	bl	800100c <_lseek>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_lseek_r+0x1e>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_lseek_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200009dc 	.word	0x200009dc

08004f38 <_read_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d07      	ldr	r5, [pc, #28]	; (8004f58 <_read_r+0x20>)
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	4608      	mov	r0, r1
 8004f40:	4611      	mov	r1, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	602a      	str	r2, [r5, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7fc f800 	bl	8000f4c <_read>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_read_r+0x1e>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_read_r+0x1e>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	200009dc 	.word	0x200009dc

08004f5c <_write_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d07      	ldr	r5, [pc, #28]	; (8004f7c <_write_r+0x20>)
 8004f60:	4604      	mov	r4, r0
 8004f62:	4608      	mov	r0, r1
 8004f64:	4611      	mov	r1, r2
 8004f66:	2200      	movs	r2, #0
 8004f68:	602a      	str	r2, [r5, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f7fc f80b 	bl	8000f86 <_write>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_write_r+0x1e>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_write_r+0x1e>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	200009dc 	.word	0x200009dc

08004f80 <__errno>:
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <__errno+0x8>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000064 	.word	0x20000064

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4d0d      	ldr	r5, [pc, #52]	; (8004fc4 <__libc_init_array+0x38>)
 8004f90:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f92:	1b64      	subs	r4, r4, r5
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	2600      	movs	r6, #0
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	4d0b      	ldr	r5, [pc, #44]	; (8004fcc <__libc_init_array+0x40>)
 8004f9e:	4c0c      	ldr	r4, [pc, #48]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa0:	f000 fd2a 	bl	80059f8 <_init>
 8004fa4:	1b64      	subs	r4, r4, r5
 8004fa6:	10a4      	asrs	r4, r4, #2
 8004fa8:	2600      	movs	r6, #0
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	08005ac8 	.word	0x08005ac8
 8004fc8:	08005ac8 	.word	0x08005ac8
 8004fcc:	08005ac8 	.word	0x08005ac8
 8004fd0:	08005acc 	.word	0x08005acc

08004fd4 <__retarget_lock_init_recursive>:
 8004fd4:	4770      	bx	lr

08004fd6 <__retarget_lock_acquire_recursive>:
 8004fd6:	4770      	bx	lr

08004fd8 <__retarget_lock_release_recursive>:
 8004fd8:	4770      	bx	lr
	...

08004fdc <_free_r>:
 8004fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d044      	beq.n	800506c <_free_r+0x90>
 8004fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe6:	9001      	str	r0, [sp, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f1a1 0404 	sub.w	r4, r1, #4
 8004fee:	bfb8      	it	lt
 8004ff0:	18e4      	addlt	r4, r4, r3
 8004ff2:	f000 f8df 	bl	80051b4 <__malloc_lock>
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <_free_r+0x94>)
 8004ff8:	9801      	ldr	r0, [sp, #4]
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	b933      	cbnz	r3, 800500c <_free_r+0x30>
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	6014      	str	r4, [r2, #0]
 8005002:	b003      	add	sp, #12
 8005004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005008:	f000 b8da 	b.w	80051c0 <__malloc_unlock>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d908      	bls.n	8005022 <_free_r+0x46>
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1961      	adds	r1, r4, r5
 8005014:	428b      	cmp	r3, r1
 8005016:	bf01      	itttt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	1949      	addeq	r1, r1, r5
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	e7ed      	b.n	8004ffe <_free_r+0x22>
 8005022:	461a      	mov	r2, r3
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b10b      	cbz	r3, 800502c <_free_r+0x50>
 8005028:	42a3      	cmp	r3, r4
 800502a:	d9fa      	bls.n	8005022 <_free_r+0x46>
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	1855      	adds	r5, r2, r1
 8005030:	42a5      	cmp	r5, r4
 8005032:	d10b      	bne.n	800504c <_free_r+0x70>
 8005034:	6824      	ldr	r4, [r4, #0]
 8005036:	4421      	add	r1, r4
 8005038:	1854      	adds	r4, r2, r1
 800503a:	42a3      	cmp	r3, r4
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	d1e0      	bne.n	8005002 <_free_r+0x26>
 8005040:	681c      	ldr	r4, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	6053      	str	r3, [r2, #4]
 8005046:	440c      	add	r4, r1
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	e7da      	b.n	8005002 <_free_r+0x26>
 800504c:	d902      	bls.n	8005054 <_free_r+0x78>
 800504e:	230c      	movs	r3, #12
 8005050:	6003      	str	r3, [r0, #0]
 8005052:	e7d6      	b.n	8005002 <_free_r+0x26>
 8005054:	6825      	ldr	r5, [r4, #0]
 8005056:	1961      	adds	r1, r4, r5
 8005058:	428b      	cmp	r3, r1
 800505a:	bf04      	itt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	6063      	str	r3, [r4, #4]
 8005062:	bf04      	itt	eq
 8005064:	1949      	addeq	r1, r1, r5
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	6054      	str	r4, [r2, #4]
 800506a:	e7ca      	b.n	8005002 <_free_r+0x26>
 800506c:	b003      	add	sp, #12
 800506e:	bd30      	pop	{r4, r5, pc}
 8005070:	200009e4 	.word	0x200009e4

08005074 <sbrk_aligned>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4e0e      	ldr	r6, [pc, #56]	; (80050b0 <sbrk_aligned+0x3c>)
 8005078:	460c      	mov	r4, r1
 800507a:	6831      	ldr	r1, [r6, #0]
 800507c:	4605      	mov	r5, r0
 800507e:	b911      	cbnz	r1, 8005086 <sbrk_aligned+0x12>
 8005080:	f000 fcaa 	bl	80059d8 <_sbrk_r>
 8005084:	6030      	str	r0, [r6, #0]
 8005086:	4621      	mov	r1, r4
 8005088:	4628      	mov	r0, r5
 800508a:	f000 fca5 	bl	80059d8 <_sbrk_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	d00a      	beq.n	80050a8 <sbrk_aligned+0x34>
 8005092:	1cc4      	adds	r4, r0, #3
 8005094:	f024 0403 	bic.w	r4, r4, #3
 8005098:	42a0      	cmp	r0, r4
 800509a:	d007      	beq.n	80050ac <sbrk_aligned+0x38>
 800509c:	1a21      	subs	r1, r4, r0
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 fc9a 	bl	80059d8 <_sbrk_r>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d101      	bne.n	80050ac <sbrk_aligned+0x38>
 80050a8:	f04f 34ff 	mov.w	r4, #4294967295
 80050ac:	4620      	mov	r0, r4
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	200009e8 	.word	0x200009e8

080050b4 <_malloc_r>:
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	1ccd      	adds	r5, r1, #3
 80050ba:	f025 0503 	bic.w	r5, r5, #3
 80050be:	3508      	adds	r5, #8
 80050c0:	2d0c      	cmp	r5, #12
 80050c2:	bf38      	it	cc
 80050c4:	250c      	movcc	r5, #12
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	4607      	mov	r7, r0
 80050ca:	db01      	blt.n	80050d0 <_malloc_r+0x1c>
 80050cc:	42a9      	cmp	r1, r5
 80050ce:	d905      	bls.n	80050dc <_malloc_r+0x28>
 80050d0:	230c      	movs	r3, #12
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	2600      	movs	r6, #0
 80050d6:	4630      	mov	r0, r6
 80050d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051b0 <_malloc_r+0xfc>
 80050e0:	f000 f868 	bl	80051b4 <__malloc_lock>
 80050e4:	f8d8 3000 	ldr.w	r3, [r8]
 80050e8:	461c      	mov	r4, r3
 80050ea:	bb5c      	cbnz	r4, 8005144 <_malloc_r+0x90>
 80050ec:	4629      	mov	r1, r5
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ffc0 	bl	8005074 <sbrk_aligned>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	4604      	mov	r4, r0
 80050f8:	d155      	bne.n	80051a6 <_malloc_r+0xf2>
 80050fa:	f8d8 4000 	ldr.w	r4, [r8]
 80050fe:	4626      	mov	r6, r4
 8005100:	2e00      	cmp	r6, #0
 8005102:	d145      	bne.n	8005190 <_malloc_r+0xdc>
 8005104:	2c00      	cmp	r4, #0
 8005106:	d048      	beq.n	800519a <_malloc_r+0xe6>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	4631      	mov	r1, r6
 800510c:	4638      	mov	r0, r7
 800510e:	eb04 0903 	add.w	r9, r4, r3
 8005112:	f000 fc61 	bl	80059d8 <_sbrk_r>
 8005116:	4581      	cmp	r9, r0
 8005118:	d13f      	bne.n	800519a <_malloc_r+0xe6>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	1a6d      	subs	r5, r5, r1
 800511e:	4629      	mov	r1, r5
 8005120:	4638      	mov	r0, r7
 8005122:	f7ff ffa7 	bl	8005074 <sbrk_aligned>
 8005126:	3001      	adds	r0, #1
 8005128:	d037      	beq.n	800519a <_malloc_r+0xe6>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	442b      	add	r3, r5
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	f8d8 3000 	ldr.w	r3, [r8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d038      	beq.n	80051aa <_malloc_r+0xf6>
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	42a2      	cmp	r2, r4
 800513c:	d12b      	bne.n	8005196 <_malloc_r+0xe2>
 800513e:	2200      	movs	r2, #0
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	e00f      	b.n	8005164 <_malloc_r+0xb0>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	1b52      	subs	r2, r2, r5
 8005148:	d41f      	bmi.n	800518a <_malloc_r+0xd6>
 800514a:	2a0b      	cmp	r2, #11
 800514c:	d917      	bls.n	800517e <_malloc_r+0xca>
 800514e:	1961      	adds	r1, r4, r5
 8005150:	42a3      	cmp	r3, r4
 8005152:	6025      	str	r5, [r4, #0]
 8005154:	bf18      	it	ne
 8005156:	6059      	strne	r1, [r3, #4]
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	bf08      	it	eq
 800515c:	f8c8 1000 	streq.w	r1, [r8]
 8005160:	5162      	str	r2, [r4, r5]
 8005162:	604b      	str	r3, [r1, #4]
 8005164:	4638      	mov	r0, r7
 8005166:	f104 060b 	add.w	r6, r4, #11
 800516a:	f000 f829 	bl	80051c0 <__malloc_unlock>
 800516e:	f026 0607 	bic.w	r6, r6, #7
 8005172:	1d23      	adds	r3, r4, #4
 8005174:	1af2      	subs	r2, r6, r3
 8005176:	d0ae      	beq.n	80050d6 <_malloc_r+0x22>
 8005178:	1b9b      	subs	r3, r3, r6
 800517a:	50a3      	str	r3, [r4, r2]
 800517c:	e7ab      	b.n	80050d6 <_malloc_r+0x22>
 800517e:	42a3      	cmp	r3, r4
 8005180:	6862      	ldr	r2, [r4, #4]
 8005182:	d1dd      	bne.n	8005140 <_malloc_r+0x8c>
 8005184:	f8c8 2000 	str.w	r2, [r8]
 8005188:	e7ec      	b.n	8005164 <_malloc_r+0xb0>
 800518a:	4623      	mov	r3, r4
 800518c:	6864      	ldr	r4, [r4, #4]
 800518e:	e7ac      	b.n	80050ea <_malloc_r+0x36>
 8005190:	4634      	mov	r4, r6
 8005192:	6876      	ldr	r6, [r6, #4]
 8005194:	e7b4      	b.n	8005100 <_malloc_r+0x4c>
 8005196:	4613      	mov	r3, r2
 8005198:	e7cc      	b.n	8005134 <_malloc_r+0x80>
 800519a:	230c      	movs	r3, #12
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4638      	mov	r0, r7
 80051a0:	f000 f80e 	bl	80051c0 <__malloc_unlock>
 80051a4:	e797      	b.n	80050d6 <_malloc_r+0x22>
 80051a6:	6025      	str	r5, [r4, #0]
 80051a8:	e7dc      	b.n	8005164 <_malloc_r+0xb0>
 80051aa:	605b      	str	r3, [r3, #4]
 80051ac:	deff      	udf	#255	; 0xff
 80051ae:	bf00      	nop
 80051b0:	200009e4 	.word	0x200009e4

080051b4 <__malloc_lock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__malloc_lock+0x8>)
 80051b6:	f7ff bf0e 	b.w	8004fd6 <__retarget_lock_acquire_recursive>
 80051ba:	bf00      	nop
 80051bc:	200009e0 	.word	0x200009e0

080051c0 <__malloc_unlock>:
 80051c0:	4801      	ldr	r0, [pc, #4]	; (80051c8 <__malloc_unlock+0x8>)
 80051c2:	f7ff bf09 	b.w	8004fd8 <__retarget_lock_release_recursive>
 80051c6:	bf00      	nop
 80051c8:	200009e0 	.word	0x200009e0

080051cc <__sfputc_r>:
 80051cc:	6893      	ldr	r3, [r2, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	b410      	push	{r4}
 80051d4:	6093      	str	r3, [r2, #8]
 80051d6:	da08      	bge.n	80051ea <__sfputc_r+0x1e>
 80051d8:	6994      	ldr	r4, [r2, #24]
 80051da:	42a3      	cmp	r3, r4
 80051dc:	db01      	blt.n	80051e2 <__sfputc_r+0x16>
 80051de:	290a      	cmp	r1, #10
 80051e0:	d103      	bne.n	80051ea <__sfputc_r+0x1e>
 80051e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e6:	f7ff bde8 	b.w	8004dba <__swbuf_r>
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	1c58      	adds	r0, r3, #1
 80051ee:	6010      	str	r0, [r2, #0]
 80051f0:	7019      	strb	r1, [r3, #0]
 80051f2:	4608      	mov	r0, r1
 80051f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <__sfputs_r>:
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	4614      	mov	r4, r2
 8005202:	18d5      	adds	r5, r2, r3
 8005204:	42ac      	cmp	r4, r5
 8005206:	d101      	bne.n	800520c <__sfputs_r+0x12>
 8005208:	2000      	movs	r0, #0
 800520a:	e007      	b.n	800521c <__sfputs_r+0x22>
 800520c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005210:	463a      	mov	r2, r7
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffda 	bl	80051cc <__sfputc_r>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d1f3      	bne.n	8005204 <__sfputs_r+0xa>
 800521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005220 <_vfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	460d      	mov	r5, r1
 8005226:	b09d      	sub	sp, #116	; 0x74
 8005228:	4614      	mov	r4, r2
 800522a:	4698      	mov	r8, r3
 800522c:	4606      	mov	r6, r0
 800522e:	b118      	cbz	r0, 8005238 <_vfiprintf_r+0x18>
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	b90b      	cbnz	r3, 8005238 <_vfiprintf_r+0x18>
 8005234:	f7ff fcda 	bl	8004bec <__sinit>
 8005238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800523a:	07d9      	lsls	r1, r3, #31
 800523c:	d405      	bmi.n	800524a <_vfiprintf_r+0x2a>
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	059a      	lsls	r2, r3, #22
 8005242:	d402      	bmi.n	800524a <_vfiprintf_r+0x2a>
 8005244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005246:	f7ff fec6 	bl	8004fd6 <__retarget_lock_acquire_recursive>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	071b      	lsls	r3, r3, #28
 800524e:	d501      	bpl.n	8005254 <_vfiprintf_r+0x34>
 8005250:	692b      	ldr	r3, [r5, #16]
 8005252:	b99b      	cbnz	r3, 800527c <_vfiprintf_r+0x5c>
 8005254:	4629      	mov	r1, r5
 8005256:	4630      	mov	r0, r6
 8005258:	f7ff fdec 	bl	8004e34 <__swsetup_r>
 800525c:	b170      	cbz	r0, 800527c <_vfiprintf_r+0x5c>
 800525e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005260:	07dc      	lsls	r4, r3, #31
 8005262:	d504      	bpl.n	800526e <_vfiprintf_r+0x4e>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	b01d      	add	sp, #116	; 0x74
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	0598      	lsls	r0, r3, #22
 8005272:	d4f7      	bmi.n	8005264 <_vfiprintf_r+0x44>
 8005274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005276:	f7ff feaf 	bl	8004fd8 <__retarget_lock_release_recursive>
 800527a:	e7f3      	b.n	8005264 <_vfiprintf_r+0x44>
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	2320      	movs	r3, #32
 8005282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005286:	f8cd 800c 	str.w	r8, [sp, #12]
 800528a:	2330      	movs	r3, #48	; 0x30
 800528c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005440 <_vfiprintf_r+0x220>
 8005290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005294:	f04f 0901 	mov.w	r9, #1
 8005298:	4623      	mov	r3, r4
 800529a:	469a      	mov	sl, r3
 800529c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a0:	b10a      	cbz	r2, 80052a6 <_vfiprintf_r+0x86>
 80052a2:	2a25      	cmp	r2, #37	; 0x25
 80052a4:	d1f9      	bne.n	800529a <_vfiprintf_r+0x7a>
 80052a6:	ebba 0b04 	subs.w	fp, sl, r4
 80052aa:	d00b      	beq.n	80052c4 <_vfiprintf_r+0xa4>
 80052ac:	465b      	mov	r3, fp
 80052ae:	4622      	mov	r2, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ffa1 	bl	80051fa <__sfputs_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	f000 80a9 	beq.w	8005410 <_vfiprintf_r+0x1f0>
 80052be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052c0:	445a      	add	r2, fp
 80052c2:	9209      	str	r2, [sp, #36]	; 0x24
 80052c4:	f89a 3000 	ldrb.w	r3, [sl]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a1 	beq.w	8005410 <_vfiprintf_r+0x1f0>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d8:	f10a 0a01 	add.w	sl, sl, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052e4:	931a      	str	r3, [sp, #104]	; 0x68
 80052e6:	4654      	mov	r4, sl
 80052e8:	2205      	movs	r2, #5
 80052ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ee:	4854      	ldr	r0, [pc, #336]	; (8005440 <_vfiprintf_r+0x220>)
 80052f0:	f7fa ffa6 	bl	8000240 <memchr>
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	b9d8      	cbnz	r0, 8005330 <_vfiprintf_r+0x110>
 80052f8:	06d1      	lsls	r1, r2, #27
 80052fa:	bf44      	itt	mi
 80052fc:	2320      	movmi	r3, #32
 80052fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005302:	0713      	lsls	r3, r2, #28
 8005304:	bf44      	itt	mi
 8005306:	232b      	movmi	r3, #43	; 0x2b
 8005308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800530c:	f89a 3000 	ldrb.w	r3, [sl]
 8005310:	2b2a      	cmp	r3, #42	; 0x2a
 8005312:	d015      	beq.n	8005340 <_vfiprintf_r+0x120>
 8005314:	9a07      	ldr	r2, [sp, #28]
 8005316:	4654      	mov	r4, sl
 8005318:	2000      	movs	r0, #0
 800531a:	f04f 0c0a 	mov.w	ip, #10
 800531e:	4621      	mov	r1, r4
 8005320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005324:	3b30      	subs	r3, #48	; 0x30
 8005326:	2b09      	cmp	r3, #9
 8005328:	d94d      	bls.n	80053c6 <_vfiprintf_r+0x1a6>
 800532a:	b1b0      	cbz	r0, 800535a <_vfiprintf_r+0x13a>
 800532c:	9207      	str	r2, [sp, #28]
 800532e:	e014      	b.n	800535a <_vfiprintf_r+0x13a>
 8005330:	eba0 0308 	sub.w	r3, r0, r8
 8005334:	fa09 f303 	lsl.w	r3, r9, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	46a2      	mov	sl, r4
 800533e:	e7d2      	b.n	80052e6 <_vfiprintf_r+0xc6>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9103      	str	r1, [sp, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbb      	ittet	lt
 800534c:	425b      	neglt	r3, r3
 800534e:	f042 0202 	orrlt.w	r2, r2, #2
 8005352:	9307      	strge	r3, [sp, #28]
 8005354:	9307      	strlt	r3, [sp, #28]
 8005356:	bfb8      	it	lt
 8005358:	9204      	strlt	r2, [sp, #16]
 800535a:	7823      	ldrb	r3, [r4, #0]
 800535c:	2b2e      	cmp	r3, #46	; 0x2e
 800535e:	d10c      	bne.n	800537a <_vfiprintf_r+0x15a>
 8005360:	7863      	ldrb	r3, [r4, #1]
 8005362:	2b2a      	cmp	r3, #42	; 0x2a
 8005364:	d134      	bne.n	80053d0 <_vfiprintf_r+0x1b0>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9203      	str	r2, [sp, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	f04f 33ff 	movlt.w	r3, #4294967295
 8005376:	3402      	adds	r4, #2
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005450 <_vfiprintf_r+0x230>
 800537e:	7821      	ldrb	r1, [r4, #0]
 8005380:	2203      	movs	r2, #3
 8005382:	4650      	mov	r0, sl
 8005384:	f7fa ff5c 	bl	8000240 <memchr>
 8005388:	b138      	cbz	r0, 800539a <_vfiprintf_r+0x17a>
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	eba0 000a 	sub.w	r0, r0, sl
 8005390:	2240      	movs	r2, #64	; 0x40
 8005392:	4082      	lsls	r2, r0
 8005394:	4313      	orrs	r3, r2
 8005396:	3401      	adds	r4, #1
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539e:	4829      	ldr	r0, [pc, #164]	; (8005444 <_vfiprintf_r+0x224>)
 80053a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a4:	2206      	movs	r2, #6
 80053a6:	f7fa ff4b 	bl	8000240 <memchr>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d03f      	beq.n	800542e <_vfiprintf_r+0x20e>
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <_vfiprintf_r+0x228>)
 80053b0:	bb1b      	cbnz	r3, 80053fa <_vfiprintf_r+0x1da>
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	3307      	adds	r3, #7
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	3308      	adds	r3, #8
 80053bc:	9303      	str	r3, [sp, #12]
 80053be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c0:	443b      	add	r3, r7
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	e768      	b.n	8005298 <_vfiprintf_r+0x78>
 80053c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ca:	460c      	mov	r4, r1
 80053cc:	2001      	movs	r0, #1
 80053ce:	e7a6      	b.n	800531e <_vfiprintf_r+0xfe>
 80053d0:	2300      	movs	r3, #0
 80053d2:	3401      	adds	r4, #1
 80053d4:	9305      	str	r3, [sp, #20]
 80053d6:	4619      	mov	r1, r3
 80053d8:	f04f 0c0a 	mov.w	ip, #10
 80053dc:	4620      	mov	r0, r4
 80053de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e2:	3a30      	subs	r2, #48	; 0x30
 80053e4:	2a09      	cmp	r2, #9
 80053e6:	d903      	bls.n	80053f0 <_vfiprintf_r+0x1d0>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0c6      	beq.n	800537a <_vfiprintf_r+0x15a>
 80053ec:	9105      	str	r1, [sp, #20]
 80053ee:	e7c4      	b.n	800537a <_vfiprintf_r+0x15a>
 80053f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f4:	4604      	mov	r4, r0
 80053f6:	2301      	movs	r3, #1
 80053f8:	e7f0      	b.n	80053dc <_vfiprintf_r+0x1bc>
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	462a      	mov	r2, r5
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <_vfiprintf_r+0x22c>)
 8005402:	a904      	add	r1, sp, #16
 8005404:	4630      	mov	r0, r6
 8005406:	f3af 8000 	nop.w
 800540a:	4607      	mov	r7, r0
 800540c:	1c78      	adds	r0, r7, #1
 800540e:	d1d6      	bne.n	80053be <_vfiprintf_r+0x19e>
 8005410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	d405      	bmi.n	8005422 <_vfiprintf_r+0x202>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	059a      	lsls	r2, r3, #22
 800541a:	d402      	bmi.n	8005422 <_vfiprintf_r+0x202>
 800541c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541e:	f7ff fddb 	bl	8004fd8 <__retarget_lock_release_recursive>
 8005422:	89ab      	ldrh	r3, [r5, #12]
 8005424:	065b      	lsls	r3, r3, #25
 8005426:	f53f af1d 	bmi.w	8005264 <_vfiprintf_r+0x44>
 800542a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800542c:	e71c      	b.n	8005268 <_vfiprintf_r+0x48>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <_vfiprintf_r+0x22c>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4630      	mov	r0, r6
 800543a:	f000 f879 	bl	8005530 <_printf_i>
 800543e:	e7e4      	b.n	800540a <_vfiprintf_r+0x1ea>
 8005440:	08005a8c 	.word	0x08005a8c
 8005444:	08005a96 	.word	0x08005a96
 8005448:	00000000 	.word	0x00000000
 800544c:	080051fb 	.word	0x080051fb
 8005450:	08005a92 	.word	0x08005a92

08005454 <_printf_common>:
 8005454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	4616      	mov	r6, r2
 800545a:	4699      	mov	r9, r3
 800545c:	688a      	ldr	r2, [r1, #8]
 800545e:	690b      	ldr	r3, [r1, #16]
 8005460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005464:	4293      	cmp	r3, r2
 8005466:	bfb8      	it	lt
 8005468:	4613      	movlt	r3, r2
 800546a:	6033      	str	r3, [r6, #0]
 800546c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005470:	4607      	mov	r7, r0
 8005472:	460c      	mov	r4, r1
 8005474:	b10a      	cbz	r2, 800547a <_printf_common+0x26>
 8005476:	3301      	adds	r3, #1
 8005478:	6033      	str	r3, [r6, #0]
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	0699      	lsls	r1, r3, #26
 800547e:	bf42      	ittt	mi
 8005480:	6833      	ldrmi	r3, [r6, #0]
 8005482:	3302      	addmi	r3, #2
 8005484:	6033      	strmi	r3, [r6, #0]
 8005486:	6825      	ldr	r5, [r4, #0]
 8005488:	f015 0506 	ands.w	r5, r5, #6
 800548c:	d106      	bne.n	800549c <_printf_common+0x48>
 800548e:	f104 0a19 	add.w	sl, r4, #25
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	6832      	ldr	r2, [r6, #0]
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	42ab      	cmp	r3, r5
 800549a:	dc26      	bgt.n	80054ea <_printf_common+0x96>
 800549c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054a0:	1e13      	subs	r3, r2, #0
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	bf18      	it	ne
 80054a6:	2301      	movne	r3, #1
 80054a8:	0692      	lsls	r2, r2, #26
 80054aa:	d42b      	bmi.n	8005504 <_printf_common+0xb0>
 80054ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b0:	4649      	mov	r1, r9
 80054b2:	4638      	mov	r0, r7
 80054b4:	47c0      	blx	r8
 80054b6:	3001      	adds	r0, #1
 80054b8:	d01e      	beq.n	80054f8 <_printf_common+0xa4>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	6922      	ldr	r2, [r4, #16]
 80054be:	f003 0306 	and.w	r3, r3, #6
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	bf02      	ittt	eq
 80054c6:	68e5      	ldreq	r5, [r4, #12]
 80054c8:	6833      	ldreq	r3, [r6, #0]
 80054ca:	1aed      	subeq	r5, r5, r3
 80054cc:	68a3      	ldr	r3, [r4, #8]
 80054ce:	bf0c      	ite	eq
 80054d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d4:	2500      	movne	r5, #0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bfc4      	itt	gt
 80054da:	1a9b      	subgt	r3, r3, r2
 80054dc:	18ed      	addgt	r5, r5, r3
 80054de:	2600      	movs	r6, #0
 80054e0:	341a      	adds	r4, #26
 80054e2:	42b5      	cmp	r5, r6
 80054e4:	d11a      	bne.n	800551c <_printf_common+0xc8>
 80054e6:	2000      	movs	r0, #0
 80054e8:	e008      	b.n	80054fc <_printf_common+0xa8>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4652      	mov	r2, sl
 80054ee:	4649      	mov	r1, r9
 80054f0:	4638      	mov	r0, r7
 80054f2:	47c0      	blx	r8
 80054f4:	3001      	adds	r0, #1
 80054f6:	d103      	bne.n	8005500 <_printf_common+0xac>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	3501      	adds	r5, #1
 8005502:	e7c6      	b.n	8005492 <_printf_common+0x3e>
 8005504:	18e1      	adds	r1, r4, r3
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	2030      	movs	r0, #48	; 0x30
 800550a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800550e:	4422      	add	r2, r4
 8005510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005518:	3302      	adds	r3, #2
 800551a:	e7c7      	b.n	80054ac <_printf_common+0x58>
 800551c:	2301      	movs	r3, #1
 800551e:	4622      	mov	r2, r4
 8005520:	4649      	mov	r1, r9
 8005522:	4638      	mov	r0, r7
 8005524:	47c0      	blx	r8
 8005526:	3001      	adds	r0, #1
 8005528:	d0e6      	beq.n	80054f8 <_printf_common+0xa4>
 800552a:	3601      	adds	r6, #1
 800552c:	e7d9      	b.n	80054e2 <_printf_common+0x8e>
	...

08005530 <_printf_i>:
 8005530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	7e0f      	ldrb	r7, [r1, #24]
 8005536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005538:	2f78      	cmp	r7, #120	; 0x78
 800553a:	4691      	mov	r9, r2
 800553c:	4680      	mov	r8, r0
 800553e:	460c      	mov	r4, r1
 8005540:	469a      	mov	sl, r3
 8005542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005546:	d807      	bhi.n	8005558 <_printf_i+0x28>
 8005548:	2f62      	cmp	r7, #98	; 0x62
 800554a:	d80a      	bhi.n	8005562 <_printf_i+0x32>
 800554c:	2f00      	cmp	r7, #0
 800554e:	f000 80d4 	beq.w	80056fa <_printf_i+0x1ca>
 8005552:	2f58      	cmp	r7, #88	; 0x58
 8005554:	f000 80c0 	beq.w	80056d8 <_printf_i+0x1a8>
 8005558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005560:	e03a      	b.n	80055d8 <_printf_i+0xa8>
 8005562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005566:	2b15      	cmp	r3, #21
 8005568:	d8f6      	bhi.n	8005558 <_printf_i+0x28>
 800556a:	a101      	add	r1, pc, #4	; (adr r1, 8005570 <_printf_i+0x40>)
 800556c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055dd 	.word	0x080055dd
 8005578:	08005559 	.word	0x08005559
 800557c:	08005559 	.word	0x08005559
 8005580:	08005559 	.word	0x08005559
 8005584:	08005559 	.word	0x08005559
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005559 	.word	0x08005559
 8005590:	08005559 	.word	0x08005559
 8005594:	08005559 	.word	0x08005559
 8005598:	08005559 	.word	0x08005559
 800559c:	080056e1 	.word	0x080056e1
 80055a0:	08005609 	.word	0x08005609
 80055a4:	0800569b 	.word	0x0800569b
 80055a8:	08005559 	.word	0x08005559
 80055ac:	08005559 	.word	0x08005559
 80055b0:	08005703 	.word	0x08005703
 80055b4:	08005559 	.word	0x08005559
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005559 	.word	0x08005559
 80055c0:	08005559 	.word	0x08005559
 80055c4:	080056a3 	.word	0x080056a3
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	1d1a      	adds	r2, r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	602a      	str	r2, [r5, #0]
 80055d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d8:	2301      	movs	r3, #1
 80055da:	e09f      	b.n	800571c <_printf_i+0x1ec>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	0607      	lsls	r7, r0, #24
 80055e2:	f103 0104 	add.w	r1, r3, #4
 80055e6:	6029      	str	r1, [r5, #0]
 80055e8:	d501      	bpl.n	80055ee <_printf_i+0xbe>
 80055ea:	681e      	ldr	r6, [r3, #0]
 80055ec:	e003      	b.n	80055f6 <_printf_i+0xc6>
 80055ee:	0646      	lsls	r6, r0, #25
 80055f0:	d5fb      	bpl.n	80055ea <_printf_i+0xba>
 80055f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	da03      	bge.n	8005602 <_printf_i+0xd2>
 80055fa:	232d      	movs	r3, #45	; 0x2d
 80055fc:	4276      	negs	r6, r6
 80055fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005602:	485a      	ldr	r0, [pc, #360]	; (800576c <_printf_i+0x23c>)
 8005604:	230a      	movs	r3, #10
 8005606:	e012      	b.n	800562e <_printf_i+0xfe>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	1d19      	adds	r1, r3, #4
 800560e:	6029      	str	r1, [r5, #0]
 8005610:	0605      	lsls	r5, r0, #24
 8005612:	d501      	bpl.n	8005618 <_printf_i+0xe8>
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	e002      	b.n	800561e <_printf_i+0xee>
 8005618:	0641      	lsls	r1, r0, #25
 800561a:	d5fb      	bpl.n	8005614 <_printf_i+0xe4>
 800561c:	881e      	ldrh	r6, [r3, #0]
 800561e:	4853      	ldr	r0, [pc, #332]	; (800576c <_printf_i+0x23c>)
 8005620:	2f6f      	cmp	r7, #111	; 0x6f
 8005622:	bf0c      	ite	eq
 8005624:	2308      	moveq	r3, #8
 8005626:	230a      	movne	r3, #10
 8005628:	2100      	movs	r1, #0
 800562a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800562e:	6865      	ldr	r5, [r4, #4]
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	2d00      	cmp	r5, #0
 8005634:	bfa2      	ittt	ge
 8005636:	6821      	ldrge	r1, [r4, #0]
 8005638:	f021 0104 	bicge.w	r1, r1, #4
 800563c:	6021      	strge	r1, [r4, #0]
 800563e:	b90e      	cbnz	r6, 8005644 <_printf_i+0x114>
 8005640:	2d00      	cmp	r5, #0
 8005642:	d04b      	beq.n	80056dc <_printf_i+0x1ac>
 8005644:	4615      	mov	r5, r2
 8005646:	fbb6 f1f3 	udiv	r1, r6, r3
 800564a:	fb03 6711 	mls	r7, r3, r1, r6
 800564e:	5dc7      	ldrb	r7, [r0, r7]
 8005650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005654:	4637      	mov	r7, r6
 8005656:	42bb      	cmp	r3, r7
 8005658:	460e      	mov	r6, r1
 800565a:	d9f4      	bls.n	8005646 <_printf_i+0x116>
 800565c:	2b08      	cmp	r3, #8
 800565e:	d10b      	bne.n	8005678 <_printf_i+0x148>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	07de      	lsls	r6, r3, #31
 8005664:	d508      	bpl.n	8005678 <_printf_i+0x148>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	6861      	ldr	r1, [r4, #4]
 800566a:	4299      	cmp	r1, r3
 800566c:	bfde      	ittt	le
 800566e:	2330      	movle	r3, #48	; 0x30
 8005670:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005674:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005678:	1b52      	subs	r2, r2, r5
 800567a:	6122      	str	r2, [r4, #16]
 800567c:	f8cd a000 	str.w	sl, [sp]
 8005680:	464b      	mov	r3, r9
 8005682:	aa03      	add	r2, sp, #12
 8005684:	4621      	mov	r1, r4
 8005686:	4640      	mov	r0, r8
 8005688:	f7ff fee4 	bl	8005454 <_printf_common>
 800568c:	3001      	adds	r0, #1
 800568e:	d14a      	bne.n	8005726 <_printf_i+0x1f6>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	b004      	add	sp, #16
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	4833      	ldr	r0, [pc, #204]	; (8005770 <_printf_i+0x240>)
 80056a4:	2778      	movs	r7, #120	; 0x78
 80056a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	6829      	ldr	r1, [r5, #0]
 80056ae:	061f      	lsls	r7, r3, #24
 80056b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80056b4:	d402      	bmi.n	80056bc <_printf_i+0x18c>
 80056b6:	065f      	lsls	r7, r3, #25
 80056b8:	bf48      	it	mi
 80056ba:	b2b6      	uxthmi	r6, r6
 80056bc:	07df      	lsls	r7, r3, #31
 80056be:	bf48      	it	mi
 80056c0:	f043 0320 	orrmi.w	r3, r3, #32
 80056c4:	6029      	str	r1, [r5, #0]
 80056c6:	bf48      	it	mi
 80056c8:	6023      	strmi	r3, [r4, #0]
 80056ca:	b91e      	cbnz	r6, 80056d4 <_printf_i+0x1a4>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	f023 0320 	bic.w	r3, r3, #32
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	2310      	movs	r3, #16
 80056d6:	e7a7      	b.n	8005628 <_printf_i+0xf8>
 80056d8:	4824      	ldr	r0, [pc, #144]	; (800576c <_printf_i+0x23c>)
 80056da:	e7e4      	b.n	80056a6 <_printf_i+0x176>
 80056dc:	4615      	mov	r5, r2
 80056de:	e7bd      	b.n	800565c <_printf_i+0x12c>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	6826      	ldr	r6, [r4, #0]
 80056e4:	6961      	ldr	r1, [r4, #20]
 80056e6:	1d18      	adds	r0, r3, #4
 80056e8:	6028      	str	r0, [r5, #0]
 80056ea:	0635      	lsls	r5, r6, #24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	d501      	bpl.n	80056f4 <_printf_i+0x1c4>
 80056f0:	6019      	str	r1, [r3, #0]
 80056f2:	e002      	b.n	80056fa <_printf_i+0x1ca>
 80056f4:	0670      	lsls	r0, r6, #25
 80056f6:	d5fb      	bpl.n	80056f0 <_printf_i+0x1c0>
 80056f8:	8019      	strh	r1, [r3, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	4615      	mov	r5, r2
 8005700:	e7bc      	b.n	800567c <_printf_i+0x14c>
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	1d1a      	adds	r2, r3, #4
 8005706:	602a      	str	r2, [r5, #0]
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	6862      	ldr	r2, [r4, #4]
 800570c:	2100      	movs	r1, #0
 800570e:	4628      	mov	r0, r5
 8005710:	f7fa fd96 	bl	8000240 <memchr>
 8005714:	b108      	cbz	r0, 800571a <_printf_i+0x1ea>
 8005716:	1b40      	subs	r0, r0, r5
 8005718:	6060      	str	r0, [r4, #4]
 800571a:	6863      	ldr	r3, [r4, #4]
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	2300      	movs	r3, #0
 8005720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005724:	e7aa      	b.n	800567c <_printf_i+0x14c>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	462a      	mov	r2, r5
 800572a:	4649      	mov	r1, r9
 800572c:	4640      	mov	r0, r8
 800572e:	47d0      	blx	sl
 8005730:	3001      	adds	r0, #1
 8005732:	d0ad      	beq.n	8005690 <_printf_i+0x160>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	079b      	lsls	r3, r3, #30
 8005738:	d413      	bmi.n	8005762 <_printf_i+0x232>
 800573a:	68e0      	ldr	r0, [r4, #12]
 800573c:	9b03      	ldr	r3, [sp, #12]
 800573e:	4298      	cmp	r0, r3
 8005740:	bfb8      	it	lt
 8005742:	4618      	movlt	r0, r3
 8005744:	e7a6      	b.n	8005694 <_printf_i+0x164>
 8005746:	2301      	movs	r3, #1
 8005748:	4632      	mov	r2, r6
 800574a:	4649      	mov	r1, r9
 800574c:	4640      	mov	r0, r8
 800574e:	47d0      	blx	sl
 8005750:	3001      	adds	r0, #1
 8005752:	d09d      	beq.n	8005690 <_printf_i+0x160>
 8005754:	3501      	adds	r5, #1
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	9903      	ldr	r1, [sp, #12]
 800575a:	1a5b      	subs	r3, r3, r1
 800575c:	42ab      	cmp	r3, r5
 800575e:	dcf2      	bgt.n	8005746 <_printf_i+0x216>
 8005760:	e7eb      	b.n	800573a <_printf_i+0x20a>
 8005762:	2500      	movs	r5, #0
 8005764:	f104 0619 	add.w	r6, r4, #25
 8005768:	e7f5      	b.n	8005756 <_printf_i+0x226>
 800576a:	bf00      	nop
 800576c:	08005a9d 	.word	0x08005a9d
 8005770:	08005aae 	.word	0x08005aae

08005774 <__sflush_r>:
 8005774:	898a      	ldrh	r2, [r1, #12]
 8005776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	0710      	lsls	r0, r2, #28
 800577e:	460c      	mov	r4, r1
 8005780:	d458      	bmi.n	8005834 <__sflush_r+0xc0>
 8005782:	684b      	ldr	r3, [r1, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dc05      	bgt.n	8005794 <__sflush_r+0x20>
 8005788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	dc02      	bgt.n	8005794 <__sflush_r+0x20>
 800578e:	2000      	movs	r0, #0
 8005790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005796:	2e00      	cmp	r6, #0
 8005798:	d0f9      	beq.n	800578e <__sflush_r+0x1a>
 800579a:	2300      	movs	r3, #0
 800579c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057a0:	682f      	ldr	r7, [r5, #0]
 80057a2:	6a21      	ldr	r1, [r4, #32]
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	d032      	beq.n	800580e <__sflush_r+0x9a>
 80057a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	075a      	lsls	r2, r3, #29
 80057ae:	d505      	bpl.n	80057bc <__sflush_r+0x48>
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	1ac0      	subs	r0, r0, r3
 80057b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057b6:	b10b      	cbz	r3, 80057bc <__sflush_r+0x48>
 80057b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ba:	1ac0      	subs	r0, r0, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	4602      	mov	r2, r0
 80057c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c2:	6a21      	ldr	r1, [r4, #32]
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b0      	blx	r6
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	d106      	bne.n	80057dc <__sflush_r+0x68>
 80057ce:	6829      	ldr	r1, [r5, #0]
 80057d0:	291d      	cmp	r1, #29
 80057d2:	d82b      	bhi.n	800582c <__sflush_r+0xb8>
 80057d4:	4a29      	ldr	r2, [pc, #164]	; (800587c <__sflush_r+0x108>)
 80057d6:	410a      	asrs	r2, r1
 80057d8:	07d6      	lsls	r6, r2, #31
 80057da:	d427      	bmi.n	800582c <__sflush_r+0xb8>
 80057dc:	2200      	movs	r2, #0
 80057de:	6062      	str	r2, [r4, #4]
 80057e0:	04d9      	lsls	r1, r3, #19
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	d504      	bpl.n	80057f2 <__sflush_r+0x7e>
 80057e8:	1c42      	adds	r2, r0, #1
 80057ea:	d101      	bne.n	80057f0 <__sflush_r+0x7c>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b903      	cbnz	r3, 80057f2 <__sflush_r+0x7e>
 80057f0:	6560      	str	r0, [r4, #84]	; 0x54
 80057f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057f4:	602f      	str	r7, [r5, #0]
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d0c9      	beq.n	800578e <__sflush_r+0x1a>
 80057fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057fe:	4299      	cmp	r1, r3
 8005800:	d002      	beq.n	8005808 <__sflush_r+0x94>
 8005802:	4628      	mov	r0, r5
 8005804:	f7ff fbea 	bl	8004fdc <_free_r>
 8005808:	2000      	movs	r0, #0
 800580a:	6360      	str	r0, [r4, #52]	; 0x34
 800580c:	e7c0      	b.n	8005790 <__sflush_r+0x1c>
 800580e:	2301      	movs	r3, #1
 8005810:	4628      	mov	r0, r5
 8005812:	47b0      	blx	r6
 8005814:	1c41      	adds	r1, r0, #1
 8005816:	d1c8      	bne.n	80057aa <__sflush_r+0x36>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0c5      	beq.n	80057aa <__sflush_r+0x36>
 800581e:	2b1d      	cmp	r3, #29
 8005820:	d001      	beq.n	8005826 <__sflush_r+0xb2>
 8005822:	2b16      	cmp	r3, #22
 8005824:	d101      	bne.n	800582a <__sflush_r+0xb6>
 8005826:	602f      	str	r7, [r5, #0]
 8005828:	e7b1      	b.n	800578e <__sflush_r+0x1a>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	e7ad      	b.n	8005790 <__sflush_r+0x1c>
 8005834:	690f      	ldr	r7, [r1, #16]
 8005836:	2f00      	cmp	r7, #0
 8005838:	d0a9      	beq.n	800578e <__sflush_r+0x1a>
 800583a:	0793      	lsls	r3, r2, #30
 800583c:	680e      	ldr	r6, [r1, #0]
 800583e:	bf08      	it	eq
 8005840:	694b      	ldreq	r3, [r1, #20]
 8005842:	600f      	str	r7, [r1, #0]
 8005844:	bf18      	it	ne
 8005846:	2300      	movne	r3, #0
 8005848:	eba6 0807 	sub.w	r8, r6, r7
 800584c:	608b      	str	r3, [r1, #8]
 800584e:	f1b8 0f00 	cmp.w	r8, #0
 8005852:	dd9c      	ble.n	800578e <__sflush_r+0x1a>
 8005854:	6a21      	ldr	r1, [r4, #32]
 8005856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005858:	4643      	mov	r3, r8
 800585a:	463a      	mov	r2, r7
 800585c:	4628      	mov	r0, r5
 800585e:	47b0      	blx	r6
 8005860:	2800      	cmp	r0, #0
 8005862:	dc06      	bgt.n	8005872 <__sflush_r+0xfe>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e78e      	b.n	8005790 <__sflush_r+0x1c>
 8005872:	4407      	add	r7, r0
 8005874:	eba8 0800 	sub.w	r8, r8, r0
 8005878:	e7e9      	b.n	800584e <__sflush_r+0xda>
 800587a:	bf00      	nop
 800587c:	dfbffffe 	.word	0xdfbffffe

08005880 <_fflush_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	4605      	mov	r5, r0
 8005886:	460c      	mov	r4, r1
 8005888:	b913      	cbnz	r3, 8005890 <_fflush_r+0x10>
 800588a:	2500      	movs	r5, #0
 800588c:	4628      	mov	r0, r5
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	b118      	cbz	r0, 800589a <_fflush_r+0x1a>
 8005892:	6a03      	ldr	r3, [r0, #32]
 8005894:	b90b      	cbnz	r3, 800589a <_fflush_r+0x1a>
 8005896:	f7ff f9a9 	bl	8004bec <__sinit>
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f3      	beq.n	800588a <_fflush_r+0xa>
 80058a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058a4:	07d0      	lsls	r0, r2, #31
 80058a6:	d404      	bmi.n	80058b2 <_fflush_r+0x32>
 80058a8:	0599      	lsls	r1, r3, #22
 80058aa:	d402      	bmi.n	80058b2 <_fflush_r+0x32>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f7ff fb92 	bl	8004fd6 <__retarget_lock_acquire_recursive>
 80058b2:	4628      	mov	r0, r5
 80058b4:	4621      	mov	r1, r4
 80058b6:	f7ff ff5d 	bl	8005774 <__sflush_r>
 80058ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058bc:	07da      	lsls	r2, r3, #31
 80058be:	4605      	mov	r5, r0
 80058c0:	d4e4      	bmi.n	800588c <_fflush_r+0xc>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	059b      	lsls	r3, r3, #22
 80058c6:	d4e1      	bmi.n	800588c <_fflush_r+0xc>
 80058c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ca:	f7ff fb85 	bl	8004fd8 <__retarget_lock_release_recursive>
 80058ce:	e7dd      	b.n	800588c <_fflush_r+0xc>

080058d0 <__swhatbuf_r>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	460c      	mov	r4, r1
 80058d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d8:	2900      	cmp	r1, #0
 80058da:	b096      	sub	sp, #88	; 0x58
 80058dc:	4615      	mov	r5, r2
 80058de:	461e      	mov	r6, r3
 80058e0:	da0d      	bge.n	80058fe <__swhatbuf_r+0x2e>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	bf0c      	ite	eq
 80058ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058f2:	2340      	movne	r3, #64	; 0x40
 80058f4:	2000      	movs	r0, #0
 80058f6:	6031      	str	r1, [r6, #0]
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	b016      	add	sp, #88	; 0x58
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	466a      	mov	r2, sp
 8005900:	f000 f848 	bl	8005994 <_fstat_r>
 8005904:	2800      	cmp	r0, #0
 8005906:	dbec      	blt.n	80058e2 <__swhatbuf_r+0x12>
 8005908:	9901      	ldr	r1, [sp, #4]
 800590a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800590e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005912:	4259      	negs	r1, r3
 8005914:	4159      	adcs	r1, r3
 8005916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800591a:	e7eb      	b.n	80058f4 <__swhatbuf_r+0x24>

0800591c <__smakebuf_r>:
 800591c:	898b      	ldrh	r3, [r1, #12]
 800591e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005920:	079d      	lsls	r5, r3, #30
 8005922:	4606      	mov	r6, r0
 8005924:	460c      	mov	r4, r1
 8005926:	d507      	bpl.n	8005938 <__smakebuf_r+0x1c>
 8005928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	6123      	str	r3, [r4, #16]
 8005930:	2301      	movs	r3, #1
 8005932:	6163      	str	r3, [r4, #20]
 8005934:	b002      	add	sp, #8
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	ab01      	add	r3, sp, #4
 800593a:	466a      	mov	r2, sp
 800593c:	f7ff ffc8 	bl	80058d0 <__swhatbuf_r>
 8005940:	9900      	ldr	r1, [sp, #0]
 8005942:	4605      	mov	r5, r0
 8005944:	4630      	mov	r0, r6
 8005946:	f7ff fbb5 	bl	80050b4 <_malloc_r>
 800594a:	b948      	cbnz	r0, 8005960 <__smakebuf_r+0x44>
 800594c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005950:	059a      	lsls	r2, r3, #22
 8005952:	d4ef      	bmi.n	8005934 <__smakebuf_r+0x18>
 8005954:	f023 0303 	bic.w	r3, r3, #3
 8005958:	f043 0302 	orr.w	r3, r3, #2
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	e7e3      	b.n	8005928 <__smakebuf_r+0xc>
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	6020      	str	r0, [r4, #0]
 8005964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	9b00      	ldr	r3, [sp, #0]
 800596c:	6163      	str	r3, [r4, #20]
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	6120      	str	r0, [r4, #16]
 8005972:	b15b      	cbz	r3, 800598c <__smakebuf_r+0x70>
 8005974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f81d 	bl	80059b8 <_isatty_r>
 800597e:	b128      	cbz	r0, 800598c <__smakebuf_r+0x70>
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	81a3      	strh	r3, [r4, #12]
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	431d      	orrs	r5, r3
 8005990:	81a5      	strh	r5, [r4, #12]
 8005992:	e7cf      	b.n	8005934 <__smakebuf_r+0x18>

08005994 <_fstat_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d07      	ldr	r5, [pc, #28]	; (80059b4 <_fstat_r+0x20>)
 8005998:	2300      	movs	r3, #0
 800599a:	4604      	mov	r4, r0
 800599c:	4608      	mov	r0, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	f7fb fb18 	bl	8000fd6 <_fstat>
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d102      	bne.n	80059b0 <_fstat_r+0x1c>
 80059aa:	682b      	ldr	r3, [r5, #0]
 80059ac:	b103      	cbz	r3, 80059b0 <_fstat_r+0x1c>
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	bd38      	pop	{r3, r4, r5, pc}
 80059b2:	bf00      	nop
 80059b4:	200009dc 	.word	0x200009dc

080059b8 <_isatty_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_isatty_r+0x1c>)
 80059bc:	2300      	movs	r3, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	f7fb fb17 	bl	8000ff6 <_isatty>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_isatty_r+0x1a>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_isatty_r+0x1a>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	200009dc 	.word	0x200009dc

080059d8 <_sbrk_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	; (80059f4 <_sbrk_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb fb20 	bl	8001028 <_sbrk>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_sbrk_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_sbrk_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	200009dc 	.word	0x200009dc

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
