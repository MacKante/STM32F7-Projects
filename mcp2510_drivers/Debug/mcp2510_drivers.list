
mcp2510_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080092a8  080092a8  0000a2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009434  08009434  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009434  08009434  0000a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800943c  0800943c  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800943c  0800943c  0000a43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009444  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051a0  20000060  080094a4  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005200  080094a4  0000b200  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021709  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004649  00000000  00000000  0002c797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001483  00000000  00000000  00032840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bb6b  00000000  00000000  00033cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224f0  00000000  00000000  0005f82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a40b  00000000  00000000  00081d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007208  00000000  00000000  0018c16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00193374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800928c 	.word	0x0800928c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800928c 	.word	0x0800928c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CAN_IC_READ_REGISTER>:
 * @param address: hex address of the register
 * 		  bufffer: to store value read
 * @retval None
 */
void CAN_IC_READ_REGISTER(uint8_t address, uint8_t* buffer)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
	// Packet includes 3 bytes
	// 1st byte: 0x03 (specifies as read instruction)
	// 2nd byte: address of register to read
	// 3rd byte: dont care byte
	uint8_t packet[3] = {0x03, address, 0x00};
 800053c:	2303      	movs	r3, #3
 800053e:	733b      	strb	r3, [r7, #12]
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	737b      	strb	r3, [r7, #13]
 8000544:	2300      	movs	r3, #0
 8000546:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET); // Initialize instruction by setting CS pin low
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <CAN_IC_READ_REGISTER+0x50>)
 800054e:	f001 fba7 	bl	8001ca0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, packet, 2, 100U); //transmit
 8000552:	f107 010c 	add.w	r1, r7, #12
 8000556:	2364      	movs	r3, #100	@ 0x64
 8000558:	2202      	movs	r2, #2
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <CAN_IC_READ_REGISTER+0x54>)
 800055c:	f002 ff43 	bl	80033e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, 1, 100U); //receive register contents
 8000560:	2364      	movs	r3, #100	@ 0x64
 8000562:	2201      	movs	r2, #1
 8000564:	6839      	ldr	r1, [r7, #0]
 8000566:	4807      	ldr	r0, [pc, #28]	@ (8000584 <CAN_IC_READ_REGISTER+0x54>)
 8000568:	f003 f8ab 	bl	80036c2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET); // Terminate instruction by setting CS pin high
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <CAN_IC_READ_REGISTER+0x50>)
 8000572:	f001 fb95 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020000 	.word	0x40020000
 8000584:	2000007c 	.word	0x2000007c

08000588 <CAN_IC_WRITE_REGISTER>:
 * @param address: hex address of the register
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER(uint8_t address, uint8_t value)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
	// Packet includes 3 bytes
	// 1st byte: 0x02 (specifies as write instruction)
	// 2nd byte: address of register to write to
	// 3rd byte: value to write
	uint8_t packet[3] = {0x02, address, value};
 8000598:	2302      	movs	r3, #2
 800059a:	733b      	strb	r3, [r7, #12]
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	737b      	strb	r3, [r7, #13]
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET); //set CS pin low
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	4809      	ldr	r0, [pc, #36]	@ (80005d0 <CAN_IC_WRITE_REGISTER+0x48>)
 80005aa:	f001 fb79 	bl	8001ca0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, packet, 3, 100U);	//transmit
 80005ae:	f107 010c 	add.w	r1, r7, #12
 80005b2:	2364      	movs	r3, #100	@ 0x64
 80005b4:	2203      	movs	r2, #3
 80005b6:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <CAN_IC_WRITE_REGISTER+0x4c>)
 80005b8:	f002 ff15 	bl	80033e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET); //set CS pin high
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <CAN_IC_WRITE_REGISTER+0x48>)
 80005c2:	f001 fb6d 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <CAN_IC_WRITE_REGISTER_BITWISE>:
 * 		  mask: bit mask
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER_BITWISE(uint8_t address, uint8_t mask, uint8_t value)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	460b      	mov	r3, r1
 80005e4:	71bb      	strb	r3, [r7, #6]
 80005e6:	4613      	mov	r3, r2
 80005e8:	717b      	strb	r3, [r7, #5]
	// 0x05 specifies bit-write instruction
	// mask specifies which bits can be modified (1 means bit can be modified)
	uint8_t packet[4] = {0x05, address, mask, value};
 80005ea:	2305      	movs	r3, #5
 80005ec:	733b      	strb	r3, [r7, #12]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	737b      	strb	r3, [r7, #13]
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	73bb      	strb	r3, [r7, #14]
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET); //set CS pin low
 80005fa:	2200      	movs	r2, #0
 80005fc:	2110      	movs	r1, #16
 80005fe:	4809      	ldr	r0, [pc, #36]	@ (8000624 <CAN_IC_WRITE_REGISTER_BITWISE+0x4c>)
 8000600:	f001 fb4e 	bl	8001ca0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, packet, 4, 100U); //transmit
 8000604:	f107 010c 	add.w	r1, r7, #12
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	2204      	movs	r2, #4
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <CAN_IC_WRITE_REGISTER_BITWISE+0x50>)
 800060e:	f002 feea 	bl	80033e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET); //set CS pin high
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <CAN_IC_WRITE_REGISTER_BITWISE+0x4c>)
 8000618:	f001 fb42 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020000 	.word	0x40020000
 8000628:	2000007c 	.word	0x2000007c

0800062c <ConfigureCANSPI>:
  * @retval None
  * Configuration is as close to Elysia's CAN configuration whenever possible
  * TODO: add configuration verification and return value accordingly
  */
void ConfigureCANSPI(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	uint8_t resetCommand = 0xa0; //instruction to reset IC to default
 8000632:	23a0      	movs	r3, #160	@ 0xa0
 8000634:	713b      	strb	r3, [r7, #4]
	uint8_t CONFIG_CNF1 = 0x00; //BRP = 0 to make tq = 250ns and a SJW of 1Tq
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t CONFIG_CNF2 = 0xd8; //PRSEG = 0, PHSEG1 = 3, SAM = 0, BTLMODE = 1
 800063a:	23d8      	movs	r3, #216	@ 0xd8
 800063c:	71bb      	strb	r3, [r7, #6]
	uint8_t CONFIG_CNF3 = 0x01; //WAFKIL disabled, PHSEG2 = 2 (BTL enabled) but PHSEG = 1 makes it backwards compatible???? wat
 800063e:	2301      	movs	r3, #1
 8000640:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2110      	movs	r1, #16
 8000646:	4820      	ldr	r0, [pc, #128]	@ (80006c8 <ConfigureCANSPI+0x9c>)
 8000648:	f001 fb2a 	bl	8001ca0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &resetCommand, 1, 100U);  //reset IC to default
 800064c:	1d39      	adds	r1, r7, #4
 800064e:	2364      	movs	r3, #100	@ 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	481e      	ldr	r0, [pc, #120]	@ (80006cc <ConfigureCANSPI+0xa0>)
 8000654:	f002 fec7 	bl	80033e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	481a      	ldr	r0, [pc, #104]	@ (80006c8 <ConfigureCANSPI+0x9c>)
 800065e:	f001 fb1f 	bl	8001ca0 <HAL_GPIO_WritePin>

	CAN_IC_WRITE_REGISTER(0x0f, 0x80); //Ensure IC is in configuration mode
 8000662:	2180      	movs	r1, #128	@ 0x80
 8000664:	200f      	movs	r0, #15
 8000666:	f7ff ff8f 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	CAN_IC_WRITE_REGISTER(CNF1, CONFIG_CNF1); //configure CNF1
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4619      	mov	r1, r3
 800066e:	202a      	movs	r0, #42	@ 0x2a
 8000670:	f7ff ff8a 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF2, CONFIG_CNF2); //configure CNF2
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	4619      	mov	r1, r3
 8000678:	2029      	movs	r0, #41	@ 0x29
 800067a:	f7ff ff85 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF3, CONFIG_CNF3); //configure CNF3
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	4619      	mov	r1, r3
 8000682:	2028      	movs	r0, #40	@ 0x28
 8000684:	f7ff ff80 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	CAN_IC_WRITE_REGISTER(CANINTE, 0xff); 	//configure interrupts, currently enable error and and wakeup INT
 8000688:	21ff      	movs	r1, #255	@ 0xff
 800068a:	202b      	movs	r0, #43	@ 0x2b
 800068c:	f7ff ff7c 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CANINTF, 0x00); 	//clear INTE flags
 8000690:	2100      	movs	r1, #0
 8000692:	202c      	movs	r0, #44	@ 0x2c
 8000694:	f7ff ff78 	bl	8000588 <CAN_IC_WRITE_REGISTER>
									   		//this should be a bit-wise clear in any other case to avoid unintentionally clearing flags

	CAN_IC_WRITE_REGISTER(0x0c, 0x0f); //set up RX0BF and RX1BF as interrupt pins
 8000698:	210f      	movs	r1, #15
 800069a:	200c      	movs	r0, #12
 800069c:	f7ff ff74 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	CAN_IC_WRITE_REGISTER(RXB0CTRL, 0x60); //accept any message on buffer 0
 80006a0:	2160      	movs	r1, #96	@ 0x60
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff70 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(RXB1CTRL, 0x60); //accept any message on buffer 1
 80006a8:	2160      	movs	r1, #96	@ 0x60
 80006aa:	2070      	movs	r0, #112	@ 0x70
 80006ac:	f7ff ff6c 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	CAN_IC_WRITE_REGISTER(0x0f, 0x04); //Put IC in normal operation mode with CLKOUT pin enable and 1:1 prescaler
 80006b0:	2104      	movs	r1, #4
 80006b2:	200f      	movs	r0, #15
 80006b4:	f7ff ff68 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	#if CAN_TEST_SETUP
	CAN_IC_WRITE_REGISTER(0x0F, 0x44);	// Put IC in loop-back mode for testing as well as enable CLKOUT pin with 1:1 prescaler
 80006b8:	2144      	movs	r1, #68	@ 0x44
 80006ba:	200f      	movs	r0, #15
 80006bc:	f7ff ff64 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	#endif
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020000 	.word	0x40020000
 80006cc:	2000007c 	.word	0x2000007c

080006d0 <checkAvailableTXChannel>:

/*-------------------------------------------------------------------------------------------*/

uint8_t checkAvailableTXChannel()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    uint32_t prevWakeTime = xTaskGetTickCount(); 	//Delay is fine if we have a CanTxGatekeeperTask
 80006d6:	f007 f811 	bl	80076fc <xTaskGetTickCount>
 80006da:	6078      	str	r0, [r7, #4]
    {
        uint8_t TXB0Status;
        uint8_t TXB1Status;
        uint8_t TXB2Status;

        CAN_IC_READ_REGISTER(TXB0CTRL, &TXB0Status);
 80006dc:	1cfb      	adds	r3, r7, #3
 80006de:	4619      	mov	r1, r3
 80006e0:	2030      	movs	r0, #48	@ 0x30
 80006e2:	f7ff ff25 	bl	8000530 <CAN_IC_READ_REGISTER>
        TXB0Status = TXB0Status >> 3; //Not masking out bits
 80006e6:	78fb      	ldrb	r3, [r7, #3]
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	70fb      	strb	r3, [r7, #3]

        if (!TXB0Status) {
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <checkAvailableTXChannel+0x28>
            return 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e022      	b.n	800073e <checkAvailableTXChannel+0x6e>
        }

        CAN_IC_READ_REGISTER(TXB1CTRL, &TXB1Status);
 80006f8:	1cbb      	adds	r3, r7, #2
 80006fa:	4619      	mov	r1, r3
 80006fc:	2040      	movs	r0, #64	@ 0x40
 80006fe:	f7ff ff17 	bl	8000530 <CAN_IC_READ_REGISTER>
        TXB1Status = TXB1Status >> 3; //Not masking out bits
 8000702:	78bb      	ldrb	r3, [r7, #2]
 8000704:	08db      	lsrs	r3, r3, #3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	70bb      	strb	r3, [r7, #2]

        if (!TXB1Status) {
 800070a:	78bb      	ldrb	r3, [r7, #2]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <checkAvailableTXChannel+0x44>
            return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e014      	b.n	800073e <checkAvailableTXChannel+0x6e>
        }

        CAN_IC_READ_REGISTER(TXB2CTRL, &TXB2Status);
 8000714:	1c7b      	adds	r3, r7, #1
 8000716:	4619      	mov	r1, r3
 8000718:	2050      	movs	r0, #80	@ 0x50
 800071a:	f7ff ff09 	bl	8000530 <CAN_IC_READ_REGISTER>
        TXB2Status = TXB2Status >> 3; //Not masking out bits
 800071e:	787b      	ldrb	r3, [r7, #1]
 8000720:	08db      	lsrs	r3, r3, #3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	707b      	strb	r3, [r7, #1]

        if (!TXB2Status) {
 8000726:	787b      	ldrb	r3, [r7, #1]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <checkAvailableTXChannel+0x60>
            return 2;
 800072c:	2302      	movs	r3, #2
 800072e:	e006      	b.n	800073e <checkAvailableTXChannel+0x6e>
        }

        prevWakeTime += TX_CHANNEL_CHECK_DELAY;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
        osDelayUntil(prevWakeTime);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f005 f88c 	bl	8005854 <osDelayUntil>
    {
 800073c:	e7ce      	b.n	80006dc <checkAvailableTXChannel+0xc>

    }
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <sendCANMessage>:
  * @brief send CAN message
  * @param None
  * @retval None
  */
void sendCANMessage(CANMsg *msg)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint8_t channel = checkAvailableTXChannel();
 8000750:	f7ff ffbe 	bl	80006d0 <checkAvailableTXChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	74fb      	strb	r3, [r7, #19]
    uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	3303      	adds	r3, #3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	74bb      	strb	r3, [r7, #18]

	// yikes
    // osMessageQueueGet(CANTxMessageQueue, msg, NULL, osWaitForever);

	uint8_t sendCommand = 0x80 + (0x01 < channel); 	   //instruction to send CAN message on buffer 1
 8000762:	7cfb      	ldrb	r3, [r7, #19]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d901      	bls.n	800076c <sendCANMessage+0x24>
 8000768:	2381      	movs	r3, #129	@ 0x81
 800076a:	e000      	b.n	800076e <sendCANMessage+0x26>
 800076c:	2380      	movs	r3, #128	@ 0x80
 800076e:	737b      	strb	r3, [r7, #13]

	uint8_t TXBNSIDH = (msg->ID & 0b11111111000) >> 3; // mask upper ID register (SD 10-3)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	885b      	ldrh	r3, [r3, #2]
 8000774:	10db      	asrs	r3, r3, #3
 8000776:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (msg->ID & 0b111) << 5; 	   	   // mask lower ID register (SD 2-0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	885b      	ldrh	r3, [r3, #2]
 800077c:	015b      	lsls	r3, r3, #5
 800077e:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNDLC = msg->DLC & 0x0F;				   // mask DLC
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	f003 030f 	and.w	r3, r3, #15
 8000788:	73fb      	strb	r3, [r7, #15]

	// Set Standard Identifier and DLC
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH); // SD 10-3
 800078a:	7cbb      	ldrb	r3, [r7, #18]
 800078c:	3301      	adds	r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	7c7a      	ldrb	r2, [r7, #17]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fef7 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL); // SD 2-0
 800079a:	7cbb      	ldrb	r3, [r7, #18]
 800079c:	3302      	adds	r3, #2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff feef 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC);  // DLC
 80007aa:	7cbb      	ldrb	r3, [r7, #18]
 80007ac:	3305      	adds	r3, #5
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fee7 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	// Set data to registers
	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 80007ba:	7cbb      	ldrb	r3, [r7, #18]
 80007bc:	3306      	adds	r3, #6
 80007be:	73bb      	strb	r3, [r7, #14]
	for(int i = 0; i < msg->DLC; i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e00f      	b.n	80007e6 <sendCANMessage+0x9e>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i]); //write to relevant data registers
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	4413      	add	r3, r2
 80007ce:	b2d8      	uxtb	r0, r3
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	3310      	adds	r3, #16
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	f7ff fed4 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	dbe9      	blt.n	80007c6 <sendCANMessage+0x7e>
	}

	// set transmit buffer priority to 3 (max)
	// write to TXBNCTRL<1:0>
	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03);
 80007f2:	7cbb      	ldrb	r3, [r7, #18]
 80007f4:	2203      	movs	r2, #3
 80007f6:	2103      	movs	r1, #3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff feed 	bl	80005d8 <CAN_IC_WRITE_REGISTER_BITWISE>

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <sendCANMessage+0xe0>)
 8000804:	f001 fa4c 	bl	8001ca0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &sendCommand, 1, 100U);  // Send command to transmit
 8000808:	f107 010d 	add.w	r1, r7, #13
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	2201      	movs	r2, #1
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <sendCANMessage+0xe4>)
 8000812:	f002 fde8 	bl	80033e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2110      	movs	r1, #16
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <sendCANMessage+0xe0>)
 800081c:	f001 fa40 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40020000 	.word	0x40020000
 800082c:	2000007c 	.word	0x2000007c

08000830 <sendExtendedCANMessage>:
  * @brief send CAN message with extended identifier
  * @param None
  * @retval None
  */
void sendExtendedCANMessage(CANMsg *msg)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	// uint8_t initialBufferAddress = TXB0CTRL + 16*(channel); //TXB0CTRL for channel 1, TXB1CTRL for channel 2, TXB2CTRL for channel 3
    uint8_t channel = checkAvailableTXChannel();
 8000838:	f7ff ff4a 	bl	80006d0 <checkAvailableTXChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	74fb      	strb	r3, [r7, #19]
	uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 8000840:	7cfb      	ldrb	r3, [r7, #19]
 8000842:	3303      	adds	r3, #3
 8000844:	b2db      	uxtb	r3, r3
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	74bb      	strb	r3, [r7, #18]

	// delete this later
    //osMessageQueueGet(CANTxMessageQueue, msg, NULL, osWaitForever);
    //todo: FIX THIS CHANNEL!

	uint8_t sendCommand = 0x80 +  (1 << channel); //instruction to send CAN message on channel
 800084a:	7cfb      	ldrb	r3, [r7, #19]
 800084c:	2201      	movs	r2, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	3b80      	subs	r3, #128	@ 0x80
 8000856:	b2db      	uxtb	r3, r3
 8000858:	72fb      	strb	r3, [r7, #11]

	uint8_t TXBNSIDH = (msg->extendedID >> 21) & 0xFF;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000860:	f04f 0200 	mov.w	r2, #0
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	0d42      	lsrs	r2, r0, #21
 800086a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800086e:	0d4b      	lsrs	r3, r1, #21
 8000870:	4613      	mov	r3, r2
 8000872:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (((msg->extendedID >> 18) & 0x07) << 5) | 0x08 | ((msg->ID >> 16) & 0x03);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	0c82      	lsrs	r2, r0, #18
 8000884:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000888:	0c8b      	lsrs	r3, r1, #18
 800088a:	b2d3      	uxtb	r3, r2
 800088c:	015b      	lsls	r3, r3, #5
 800088e:	b2da      	uxtb	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	141b      	asrs	r3, r3, #16
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNEID8 = (msg->extendedID >> 8) & 0xFF;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	0a02      	lsrs	r2, r0, #8
 80008b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008bc:	0a0b      	lsrs	r3, r1, #8
 80008be:	4613      	mov	r3, r2
 80008c0:	73fb      	strb	r3, [r7, #15]
	uint8_t TXBNEID0 = msg->extendedID & 0xFF;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008c8:	4613      	mov	r3, r2
 80008ca:	73bb      	strb	r3, [r7, #14]
	uint8_t TXBNDLC = msg->DLC & 0x0F;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	737b      	strb	r3, [r7, #13]

	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH); // SD 10-3
 80008d6:	7cbb      	ldrb	r3, [r7, #18]
 80008d8:	3301      	adds	r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	7c7a      	ldrb	r2, [r7, #17]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe51 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL); // SD 2-0, ED 17-16
 80008e6:	7cbb      	ldrb	r3, [r7, #18]
 80008e8:	3302      	adds	r3, #2
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	7c3a      	ldrb	r2, [r7, #16]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe49 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 3, TXBNEID8); // ED 15-8
 80008f6:	7cbb      	ldrb	r3, [r7, #18]
 80008f8:	3303      	adds	r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	7bfa      	ldrb	r2, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe41 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 4, TXBNEID0); // ED 7-0
 8000906:	7cbb      	ldrb	r3, [r7, #18]
 8000908:	3304      	adds	r3, #4
 800090a:	b2db      	uxtb	r3, r3
 800090c:	7bba      	ldrb	r2, [r7, #14]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe39 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC);  // DLC
 8000916:	7cbb      	ldrb	r3, [r7, #18]
 8000918:	3305      	adds	r3, #5
 800091a:	b2db      	uxtb	r3, r3
 800091c:	7b7a      	ldrb	r2, [r7, #13]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe31 	bl	8000588 <CAN_IC_WRITE_REGISTER>

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 8000926:	7cbb      	ldrb	r3, [r7, #18]
 8000928:	3306      	adds	r3, #6
 800092a:	733b      	strb	r3, [r7, #12]
	for(int i = 0; i < msg->DLC; i++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00f      	b.n	8000952 <sendExtendedCANMessage+0x122>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i]); //write to relevant data registers
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	7b3b      	ldrb	r3, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	b2d8      	uxtb	r0, r3
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	4413      	add	r3, r2
 8000942:	3310      	adds	r3, #16
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	f7ff fe1e 	bl	8000588 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	3301      	adds	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	4293      	cmp	r3, r2
 800095c:	dbe9      	blt.n	8000932 <sendExtendedCANMessage+0x102>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03); //set transmit buffer priority to 3 (max)
 800095e:	7cbb      	ldrb	r3, [r7, #18]
 8000960:	2203      	movs	r2, #3
 8000962:	2103      	movs	r1, #3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe37 	bl	80005d8 <CAN_IC_WRITE_REGISTER_BITWISE>

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <sendExtendedCANMessage+0x164>)
 8000970:	f001 f996 	bl	8001ca0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &sendCommand, 1, 100U);  //Send command to transmit
 8000974:	f107 010b 	add.w	r1, r7, #11
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	2201      	movs	r2, #1
 800097c:	4806      	ldr	r0, [pc, #24]	@ (8000998 <sendExtendedCANMessage+0x168>)
 800097e:	f002 fd32 	bl	80033e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2110      	movs	r1, #16
 8000986:	4803      	ldr	r0, [pc, #12]	@ (8000994 <sendExtendedCANMessage+0x164>)
 8000988:	f001 f98a 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000
 8000998:	2000007c 	.word	0x2000007c

0800099c <receiveCANMessage>:
  * @brief Receive CAN message
  * @param None
  * @retval None
  */
void receiveCANMessage(uint8_t channel, uint32_t* ID, uint8_t* DLC, uint8_t* data)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4603      	mov	r3, r0
 80009aa:	73fb      	strb	r3, [r7, #15]
	uint8_t initialBufferAddress = RXB0CTRL + 16*(channel); //RXB0CTRL for channel 1, RXB1CTRL for channel 2
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	3306      	adds	r3, #6
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	76fb      	strb	r3, [r7, #27]

	uint8_t RXBNSIDH = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	767b      	strb	r3, [r7, #25]
	uint8_t RXBNSIDL = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	763b      	strb	r3, [r7, #24]
	uint8_t RXBDLC = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	75fb      	strb	r3, [r7, #23]

	CAN_IC_READ_REGISTER(initialBufferAddress + 1, &RXBNSIDH); // SD 10-3
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f107 0219 	add.w	r2, r7, #25
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fdae 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 2, &RXBNSIDL); //SD 2-0, IDE, ED 17-16
 80009d4:	7efb      	ldrb	r3, [r7, #27]
 80009d6:	3302      	adds	r3, #2
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f107 0218 	add.w	r2, r7, #24
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fda5 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 5, &RXBDLC);   //DLC
 80009e6:	7efb      	ldrb	r3, [r7, #27]
 80009e8:	3305      	adds	r3, #5
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f107 0217 	add.w	r2, r7, #23
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd9c 	bl	8000530 <CAN_IC_READ_REGISTER>

	if(RXBNSIDL & 0x08)	// Check RXBmSIDL.IDE to verify if CAN message has extended identifier
 80009f8:	7e3b      	ldrb	r3, [r7, #24]
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d02c      	beq.n	8000a5c <receiveCANMessage+0xc0>
	{
		uint8_t RXBNEID8 = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	75bb      	strb	r3, [r7, #22]
		uint8_t RXBNEID0 = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	757b      	strb	r3, [r7, #21]

		CAN_IC_READ_REGISTER(initialBufferAddress + 3, &RXBNEID8); //ED 15-8
 8000a0a:	7efb      	ldrb	r3, [r7, #27]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f107 0216 	add.w	r2, r7, #22
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fd8a 	bl	8000530 <CAN_IC_READ_REGISTER>
		CAN_IC_READ_REGISTER(initialBufferAddress + 4, &RXBNEID0); //ED 7-0
 8000a1c:	7efb      	ldrb	r3, [r7, #27]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f107 0215 	add.w	r2, r7, #21
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fd81 	bl	8000530 <CAN_IC_READ_REGISTER>

		*ID = (RXBNSIDH << 21) | (((RXBNSIDL >> 5) & 0x07) << 18) | ((RXBNSIDL & 0x03) << 16) | (RXBNEID8 << 8) | (RXBNEID0);
 8000a2e:	7e7b      	ldrb	r3, [r7, #25]
 8000a30:	055a      	lsls	r2, r3, #21
 8000a32:	7e3b      	ldrb	r3, [r7, #24]
 8000a34:	095b      	lsrs	r3, r3, #5
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	049b      	lsls	r3, r3, #18
 8000a3a:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	7e3b      	ldrb	r3, [r7, #24]
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	7dbb      	ldrb	r3, [r7, #22]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	7d7a      	ldrb	r2, [r7, #21]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	e008      	b.n	8000a6e <receiveCANMessage+0xd2>
	} else // CAN message is standard
	{
		*ID = (RXBNSIDH << 3) | (RXBNSIDL >> 5);
 8000a5c:	7e7b      	ldrb	r3, [r7, #25]
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	7e3a      	ldrb	r2, [r7, #24]
 8000a62:	0952      	lsrs	r2, r2, #5
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	4313      	orrs	r3, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	601a      	str	r2, [r3, #0]
	}

	// Check data length of CAN message
	*DLC = RXBDLC & 0x0F; 
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	701a      	strb	r2, [r3, #0]
	if(*DLC > 8){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d902      	bls.n	8000a88 <receiveCANMessage+0xec>
		*DLC = 0;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	}

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 8000a88:	7efb      	ldrb	r3, [r7, #27]
 8000a8a:	3306      	adds	r3, #6
 8000a8c:	76bb      	strb	r3, [r7, #26]
	for(int i = 0; i < *DLC; i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	e00d      	b.n	8000ab0 <receiveCANMessage+0x114>
	{
		CAN_IC_READ_REGISTER(initialDataBufferAddress + i, (data++)); //read from relevant data registers
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	7ebb      	ldrb	r3, [r7, #26]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	603a      	str	r2, [r7, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f7ff fd43 	bl	8000530 <CAN_IC_READ_REGISTER>
	for(int i = 0; i < *DLC; i++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	dbeb      	blt.n	8000a94 <receiveCANMessage+0xf8>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, channel + 1, channel + 1); //clear interrupts
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2d9      	uxtb	r1, r3
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f7ff fd84 	bl	80005d8 <CAN_IC_WRITE_REGISTER_BITWISE>
	return;
 8000ad0:	bf00      	nop
}
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <CANRxInterruptTask>:
#include "CANRxInterruptTask.h"
#include "CAN.h"


void CANRxInterruptTask(void* arg)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	for(;;) {
		CANRxInterrupt();
 8000ae0:	f000 f806 	bl	8000af0 <CANRxInterrupt>
		osDelay(100);
 8000ae4:	2064      	movs	r0, #100	@ 0x64
 8000ae6:	f004 fe87 	bl	80057f8 <osDelay>
		CANRxInterrupt();
 8000aea:	bf00      	nop
 8000aec:	e7f8      	b.n	8000ae0 <CANRxInterruptTask+0x8>
	...

08000af0 <CANRxInterrupt>:
	}
}

void CANRxInterrupt()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pin = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	82fb      	strh	r3, [r7, #22]
	osMessageQueueGet(CANInterruptQueue, &GPIO_Pin, 0, osWaitForever);
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <CANRxInterrupt+0x84>)
 8000afc:	6818      	ldr	r0, [r3, #0]
 8000afe:	f107 0116 	add.w	r1, r7, #22
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	2200      	movs	r2, #0
 8000b08:	f005 f926 	bl	8005d58 <osMessageQueueGet>

	uint32_t ID = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
	uint8_t DLC = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
	uint8_t data[8] = {0};
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]

	if (osMutexWait(SPIMutexHandle, 0) == osOK)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <CANRxInterrupt+0x88>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 ff70 	bl	8005a08 <osMutexAcquire>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d11d      	bne.n	8000b6a <CANRxInterrupt+0x7a>
	{
		if(GPIO_Pin == CAN_RX0BF_Pin)
 8000b2e:	8afb      	ldrh	r3, [r7, #22]
 8000b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b34:	d108      	bne.n	8000b48 <CANRxInterrupt+0x58>
		{
			receiveCANMessage(0, &ID, &DLC, data);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	f107 020f 	add.w	r2, r7, #15
 8000b3c:	f107 0110 	add.w	r1, r7, #16
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff2b 	bl	800099c <receiveCANMessage>
 8000b46:	e00b      	b.n	8000b60 <CANRxInterrupt+0x70>
		}
		else if (GPIO_Pin == CAN_RX1BF_Pin)
 8000b48:	8afb      	ldrh	r3, [r7, #22]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b4e:	d107      	bne.n	8000b60 <CANRxInterrupt+0x70>
		{
			receiveCANMessage(1, &ID, &DLC, data);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	f107 020f 	add.w	r2, r7, #15
 8000b56:	f107 0110 	add.w	r1, r7, #16
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff ff1e 	bl	800099c <receiveCANMessage>
		}

		osMutexRelease(SPIMutexHandle);
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <CANRxInterrupt+0x88>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 ffad 	bl	8005ac4 <osMutexRelease>
	}

	osDelay(250);
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	#endif
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000688 	.word	0x20000688
 8000b78:	20000684 	.word	0x20000684

08000b7c <CANTxGatekeeperTask>:
 *      Author: MacKante
 */

#include "CANTxGatekeeperTask.h"

void CANTxGatekeeperTask(void* arg) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

    CANMsg newMsg;

    for (;;) {
//    	osMessageQueuePut(CANTxMessageQueue, &msg1, 0, osWaitForever);
        CANTxGatekeeper(&newMsg);
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f805 	bl	8000b98 <CANTxGatekeeper>
        osDelay(100);
 8000b8e:	2064      	movs	r0, #100	@ 0x64
 8000b90:	f004 fe32 	bl	80057f8 <osDelay>
        CANTxGatekeeper(&newMsg);
 8000b94:	bf00      	nop
 8000b96:	e7f5      	b.n	8000b84 <CANTxGatekeeperTask+0x8>

08000b98 <CANTxGatekeeper>:
    }
}

void CANTxGatekeeper(CANMsg *msg) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	// Acquire message to send from queue
	osMessageQueueGet(CANTxMessageQueue, msg, NULL, osWaitForever);
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <CANTxGatekeeper+0x5c>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f005 f8d4 	bl	8005d58 <osMessageQueueGet>

	// Wait for mutex
	if ( osMutexWait(SPIMutexHandle, 0) == osOK )
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <CANTxGatekeeper+0x60>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 ff26 	bl	8005a08 <osMutexAcquire>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d114      	bne.n	8000bec <CANTxGatekeeper+0x54>
	{
		// check if CAN message is standard/extended
		// if extendedID == 0, then message is standard
		if ((msg->extendedID == 0) && (msg->ID != 0))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	d107      	bne.n	8000bdc <CANTxGatekeeper+0x44>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <CANTxGatekeeper+0x44>
		{
			sendCANMessage(msg);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fdb7 	bl	8000748 <sendCANMessage>
 8000bda:	e002      	b.n	8000be2 <CANTxGatekeeper+0x4a>
		}
		else
		{
			sendExtendedCANMessage(msg);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fe27 	bl	8000830 <sendExtendedCANMessage>
		}

		osMutexRelease(SPIMutexHandle);
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <CANTxGatekeeper+0x60>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 ff6c 	bl	8005ac4 <osMutexRelease>
	}

}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000068c 	.word	0x2000068c
 8000bf8:	20000684 	.word	0x20000684

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fd6f 	bl	80016e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f874 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 f97e 	bl	8000f08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c0c:	f000 f91e 	bl	8000e4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c10:	f000 f94c 	bl	8000eac <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000c14:	f000 f8dc 	bl	8000dd0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ConfigureCANSPI();
 8000c18:	f7ff fd08 	bl	800062c <ConfigureCANSPI>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c1c:	f004 fcdc 	bl	80055d8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* Definitions for SPIMutex */
  SPIMutexHandle = osMutexNew(&SPIMutex_attributes); //unused
 8000c20:	4820      	ldr	r0, [pc, #128]	@ (8000ca4 <main+0xa8>)
 8000c22:	f004 fe57 	bl	80058d4 <osMutexNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca8 <main+0xac>)
 8000c2a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  CANInterruptQueue = osMessageQueueNew(CAN_INTERRUPT_QUEUE_COUNT, sizeof(uint16_t), NULL);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	2005      	movs	r0, #5
 8000c32:	f004 ff97 	bl	8005b64 <osMessageQueueNew>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <main+0xb0>)
 8000c3a:	6013      	str	r3, [r2, #0]
  CANTxMessageQueue = osMessageQueueNew(5, sizeof(CANMsg), NULL);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2118      	movs	r1, #24
 8000c40:	2005      	movs	r0, #5
 8000c42:	f004 ff8f 	bl	8005b64 <osMessageQueueNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <main+0xb4>)
 8000c4a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <main+0xb8>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4819      	ldr	r0, [pc, #100]	@ (8000cb8 <main+0xbc>)
 8000c52:	f004 fd2b 	bl	80056ac <osThreadNew>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a18      	ldr	r2, [pc, #96]	@ (8000cbc <main+0xc0>)
 8000c5a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* creation of CANRXInterruptTask*/
  CANRXInterruptTaskHandle = osThreadNew(CANRxInterruptTask, NULL, &CANRXInterruptTask_attributes);
 8000c5c:	4a18      	ldr	r2, [pc, #96]	@ (8000cc0 <main+0xc4>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4818      	ldr	r0, [pc, #96]	@ (8000cc4 <main+0xc8>)
 8000c62:	f004 fd23 	bl	80056ac <osThreadNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <main+0xcc>)
 8000c6a:	6013      	str	r3, [r2, #0]

  /* creation of CANTxGatekeeperTask*/
  CANTxGateKeeperTaskHandle = osThreadNew(CANTxGatekeeperTask, NULL, &CANTxGateKeeperTask_attributes);
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <main+0xd0>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4817      	ldr	r0, [pc, #92]	@ (8000cd0 <main+0xd4>)
 8000c72:	f004 fd1b 	bl	80056ac <osThreadNew>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a16      	ldr	r2, [pc, #88]	@ (8000cd4 <main+0xd8>)
 8000c7a:	6013      	str	r3, [r2, #0]

  /* creation of queue CAN message tasks */
  queueMessageTask1Handle = osThreadNew(queueMessageTask1, NULL, &queueMessageTask1_attributes);
 8000c7c:	4a16      	ldr	r2, [pc, #88]	@ (8000cd8 <main+0xdc>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4816      	ldr	r0, [pc, #88]	@ (8000cdc <main+0xe0>)
 8000c82:	f004 fd13 	bl	80056ac <osThreadNew>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <main+0xe4>)
 8000c8a:	6013      	str	r3, [r2, #0]
  queueMessageTask2Handle = osThreadNew(queueMessageTask2, NULL, &queueMessageTask2_attributes);
 8000c8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ce4 <main+0xe8>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4815      	ldr	r0, [pc, #84]	@ (8000ce8 <main+0xec>)
 8000c92:	f004 fd0b 	bl	80056ac <osThreadNew>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <main+0xf0>)
 8000c9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c9c:	f004 fcd0 	bl	8005640 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <main+0xa4>
 8000ca4:	0800940c 	.word	0x0800940c
 8000ca8:	20000684 	.word	0x20000684
 8000cac:	20000688 	.word	0x20000688
 8000cb0:	2000068c 	.word	0x2000068c
 8000cb4:	08009358 	.word	0x08009358
 8000cb8:	080011b1 	.word	0x080011b1
 8000cbc:	20000670 	.word	0x20000670
 8000cc0:	080093a0 	.word	0x080093a0
 8000cc4:	08000ad9 	.word	0x08000ad9
 8000cc8:	20000678 	.word	0x20000678
 8000ccc:	0800937c 	.word	0x0800937c
 8000cd0:	08000b7d 	.word	0x08000b7d
 8000cd4:	20000674 	.word	0x20000674
 8000cd8:	080093c4 	.word	0x080093c4
 8000cdc:	080011f1 	.word	0x080011f1
 8000ce0:	2000067c 	.word	0x2000067c
 8000ce4:	080093e8 	.word	0x080093e8
 8000ce8:	08001235 	.word	0x08001235
 8000cec:	20000680 	.word	0x20000680

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	@ 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2234      	movs	r2, #52	@ 0x34
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f008 f9dc 	bl	80090bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc8 <SystemClock_Config+0xd8>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc8 <SystemClock_Config+0xd8>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d20:	4b29      	ldr	r3, [pc, #164]	@ (8000dc8 <SystemClock_Config+0xd8>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <SystemClock_Config+0xdc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d34:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <SystemClock_Config+0xdc>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <SystemClock_Config+0xdc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d60:	2360      	movs	r3, #96	@ 0x60
 8000d62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 f95d 	bl	8002034 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d80:	f000 fa30 	bl	80011e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d84:	f001 f906 	bl	8001f94 <HAL_PWREx_EnableOverDrive>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d8e:	f000 fa29 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2103      	movs	r1, #3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fbee 	bl	8002590 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000dba:	f000 fa13 	bl	80011e4 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3750      	adds	r7, #80	@ 0x50
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <MX_SPI1_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000ddc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de2:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de8:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000dea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e06:	2220      	movs	r2, #32
 8000e08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e1e:	2207      	movs	r2, #7
 8000e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_SPI1_Init+0x74>)
 8000e30:	f002 fa2e 	bl	8003290 <HAL_SPI_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 f9d3 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000007c 	.word	0x2000007c
 8000e48:	40013000 	.word	0x40013000

08000e4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e52:	4a15      	ldr	r2, [pc, #84]	@ (8000ea8 <MX_USART3_UART_Init+0x5c>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_USART3_UART_Init+0x58>)
 8000e90:	f003 fc3e 	bl	8004710 <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 f9a3 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000e0 	.word	0x200000e0
 8000ea8:	40004800 	.word	0x40004800

08000eac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000eb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eba:	2206      	movs	r2, #6
 8000ebc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	f000 ff08 	bl	8001d04 <HAL_PCD_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f973 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000168 	.word	0x20000168

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b90      	ldr	r3, [pc, #576]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a8f      	ldr	r2, [pc, #572]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b8a      	ldr	r3, [pc, #552]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a89      	ldr	r2, [pc, #548]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b87      	ldr	r3, [pc, #540]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b84      	ldr	r3, [pc, #528]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a83      	ldr	r2, [pc, #524]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b81      	ldr	r3, [pc, #516]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b7e      	ldr	r3, [pc, #504]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a7d      	ldr	r2, [pc, #500]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b7b      	ldr	r3, [pc, #492]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b78      	ldr	r3, [pc, #480]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a77      	ldr	r2, [pc, #476]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b75      	ldr	r3, [pc, #468]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b72      	ldr	r3, [pc, #456]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a71      	ldr	r2, [pc, #452]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b6c      	ldr	r3, [pc, #432]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b69      	ldr	r3, [pc, #420]	@ (8001160 <MX_GPIO_Init+0x258>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	4866      	ldr	r0, [pc, #408]	@ (8001164 <MX_GPIO_Init+0x25c>)
 8000fcc:	f000 fe68 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000fd6:	4864      	ldr	r0, [pc, #400]	@ (8001168 <MX_GPIO_Init+0x260>)
 8000fd8:	f000 fe62 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2140      	movs	r1, #64	@ 0x40
 8000fe0:	4862      	ldr	r0, [pc, #392]	@ (800116c <MX_GPIO_Init+0x264>)
 8000fe2:	f000 fe5d 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	485c      	ldr	r0, [pc, #368]	@ (8001170 <MX_GPIO_Init+0x268>)
 8000ffe:	f000 fca3 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001002:	2332      	movs	r3, #50	@ 0x32
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001012:	230b      	movs	r3, #11
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4854      	ldr	r0, [pc, #336]	@ (8001170 <MX_GPIO_Init+0x268>)
 800101e:	f000 fc93 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001022:	2386      	movs	r3, #134	@ 0x86
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4849      	ldr	r0, [pc, #292]	@ (8001164 <MX_GPIO_Init+0x25c>)
 800103e:	f000 fc83 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001042:	2310      	movs	r3, #16
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4842      	ldr	r0, [pc, #264]	@ (8001164 <MX_GPIO_Init+0x25c>)
 800105a:	f000 fc75 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800105e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	483c      	ldr	r0, [pc, #240]	@ (8001168 <MX_GPIO_Init+0x260>)
 8001078:	f000 fc66 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RX1BF_Pin */
  GPIO_InitStruct.Pin = CAN_RX1BF_Pin;
 800107c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001082:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAN_RX1BF_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <MX_GPIO_Init+0x26c>)
 8001094:	f000 fc58 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	230b      	movs	r3, #11
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	482c      	ldr	r0, [pc, #176]	@ (8001168 <MX_GPIO_Init+0x260>)
 80010b6:	f000 fc47 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80010ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4829      	ldr	r0, [pc, #164]	@ (8001178 <MX_GPIO_Init+0x270>)
 80010d2:	f000 fc39 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RX0BF_Pin */
  GPIO_InitStruct.Pin = CAN_RX0BF_Pin;
 80010d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CAN_RX0BF_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4822      	ldr	r0, [pc, #136]	@ (8001178 <MX_GPIO_Init+0x270>)
 80010ee:	f000 fc2b 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010f2:	2340      	movs	r3, #64	@ 0x40
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4818      	ldr	r0, [pc, #96]	@ (800116c <MX_GPIO_Init+0x264>)
 800110a:	f000 fc1d 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4812      	ldr	r0, [pc, #72]	@ (800116c <MX_GPIO_Init+0x264>)
 8001122:	f000 fc11 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001126:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001138:	230b      	movs	r3, #11
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	480a      	ldr	r0, [pc, #40]	@ (800116c <MX_GPIO_Init+0x264>)
 8001144:	f000 fc00 	bl	8001948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2105      	movs	r1, #5
 800114c:	2028      	movs	r0, #40	@ 0x28
 800114e:	f000 fbd1 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001152:	2028      	movs	r0, #40	@ 0x28
 8001154:	f000 fbea 	bl	800192c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	@ 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40021800 	.word	0x40021800
 8001170:	40020800 	.word	0x40020800
 8001174:	40021400 	.word	0x40021400
 8001178:	40020c00 	.word	0x40020c00

0800117c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == CAN_RX0BF_Pin) || (GPIO_Pin == CAN_RX1BF_Pin)) {
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_EXTI_Callback+0x1a>
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001194:	d106      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x28>
		osMessageQueuePut(CANInterruptQueue, &GPIO_Pin, 0, 0);
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x30>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	1db9      	adds	r1, r7, #6
 800119c:	2300      	movs	r3, #0
 800119e:	2200      	movs	r2, #0
 80011a0:	f004 fd66 	bl	8005c70 <osMessageQueuePut>
		//canReceive = 1;
	}
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000688 	.word	0x20000688

080011b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f004 fb1d 	bl	80057f8 <osDelay>
 80011be:	e7fb      	b.n	80011b8 <StartDefaultTask+0x8>

080011c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d2:	f000 fa93 	bl	80016fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40001000 	.word	0x40001000

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <Error_Handler+0x8>

080011f0 <queueMessageTask1>:
#include "queueMessageTask.h"

void queueMessageTask1(void* arg) {
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	CANMsg msg1 = {
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <queueMessageTask1+0x3c>)
 80011fa:	f107 0408 	add.w	r4, r7, #8
 80011fe:	461d      	mov	r5, r3
 8001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001208:	e884 0003 	stmia.w	r4, {r0, r1}
			.extendedID = 0xCFCFCFC,
			.data = {0xCC}
	};

	for(;;) {
		osMessageQueuePut(CANTxMessageQueue, &msg1, 0, osWaitForever);
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <queueMessageTask1+0x40>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	f107 0108 	add.w	r1, r7, #8
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	2200      	movs	r2, #0
 800121a:	f004 fd29 	bl	8005c70 <osMessageQueuePut>
		osDelay(2000);
 800121e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001222:	f004 fae9 	bl	80057f8 <osDelay>
		osMessageQueuePut(CANTxMessageQueue, &msg1, 0, osWaitForever);
 8001226:	bf00      	nop
 8001228:	e7f0      	b.n	800120c <queueMessageTask1+0x1c>
 800122a:	bf00      	nop
 800122c:	08009310 	.word	0x08009310
 8001230:	2000068c 	.word	0x2000068c

08001234 <queueMessageTask2>:
#include "queueMessageTask.h"

void queueMessageTask2(void* arg) {
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	CANMsg msg2 = {
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <queueMessageTask2+0x3c>)
 800123e:	f107 0408 	add.w	r4, r7, #8
 8001242:	461d      	mov	r5, r3
 8001244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 0003 	ldmia.w	r5, {r0, r1}
 800124c:	e884 0003 	stmia.w	r4, {r0, r1}
			.extendedID = 0xAFAFAFA,
			.data = {0xAA}
	};

	for(;;) {
		osMessageQueuePut(CANTxMessageQueue, &msg2, 0, osWaitForever);
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <queueMessageTask2+0x40>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f107 0108 	add.w	r1, r7, #8
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	2200      	movs	r2, #0
 800125e:	f004 fd07 	bl	8005c70 <osMessageQueuePut>
		osDelay(3500);
 8001262:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001266:	f004 fac7 	bl	80057f8 <osDelay>
		osMessageQueuePut(CANTxMessageQueue, &msg2, 0, osWaitForever);
 800126a:	bf00      	nop
 800126c:	e7f0      	b.n	8001250 <queueMessageTask2+0x1c>
 800126e:	bf00      	nop
 8001270:	08009328 	.word	0x08009328
 8001274:	2000068c 	.word	0x2000068c

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_MspInit+0x4c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210f      	movs	r1, #15
 80012b2:	f06f 0001 	mvn.w	r0, #1
 80012b6:	f000 fb1d 	bl	80018f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_SPI_MspInit+0x7c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d127      	bne.n	800133a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <HAL_SPI_MspInit+0x80>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <HAL_SPI_MspInit+0x80>)
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_SPI_MspInit+0x80>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_SPI_MspInit+0x80>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	@ (8001348 <HAL_SPI_MspInit+0x80>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <HAL_SPI_MspInit+0x80>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800131a:	2338      	movs	r3, #56	@ 0x38
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132a:	2305      	movs	r3, #5
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <HAL_SPI_MspInit+0x84>)
 8001336:	f000 fb07 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40013000 	.word	0x40013000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0ae      	sub	sp, #184	@ 0xb8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2290      	movs	r2, #144	@ 0x90
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 fea3 	bl	80090bc <memset>
  if(huart->Instance==USART3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <HAL_UART_MspInit+0xb4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d13c      	bne.n	80013fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001384:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001386:	2300      	movs	r3, #0
 8001388:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fb56 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff ff23 	bl	80011e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a19      	ldr	r2, [pc, #100]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a13      	ldr	r2, [pc, #76]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013f6:	f000 faa7 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	37b8      	adds	r7, #184	@ 0xb8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004800 	.word	0x40004800
 8001408:	40023800 	.word	0x40023800
 800140c:	40020c00 	.word	0x40020c00

08001410 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0ae      	sub	sp, #184	@ 0xb8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2290      	movs	r2, #144	@ 0x90
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 fe43 	bl	80090bc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800143e:	d159      	bne.n	80014f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001440:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001444:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4618      	mov	r0, r3
 8001452:	f001 faf5 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800145c:	f7ff fec2 	bl	80011e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4a25      	ldr	r2, [pc, #148]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6313      	str	r3, [r2, #48]	@ 0x30
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001478:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800147c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001492:	230a      	movs	r3, #10
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800149c:	4619      	mov	r1, r3
 800149e:	4818      	ldr	r0, [pc, #96]	@ (8001500 <HAL_PCD_MspInit+0xf0>)
 80014a0:	f000 fa52 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014bc:	4619      	mov	r1, r3
 80014be:	4810      	ldr	r0, [pc, #64]	@ (8001500 <HAL_PCD_MspInit+0xf0>)
 80014c0:	f000 fa42 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 80014ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 80014d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e0:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <HAL_PCD_MspInit+0xec>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	37b8      	adds	r7, #184	@ 0xb8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	@ 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001514:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <HAL_InitTick+0xe0>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <HAL_InitTick+0xe0>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_InitTick+0xe0>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fa50 	bl	80029dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001546:	f001 fa21 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 800154a:	6378      	str	r0, [r7, #52]	@ 0x34
 800154c:	e004      	b.n	8001558 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800154e:	f001 fa1d 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8001552:	4603      	mov	r3, r0
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155a:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <HAL_InitTick+0xe4>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	0c9b      	lsrs	r3, r3, #18
 8001562:	3b01      	subs	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_InitTick+0xe8>)
 8001568:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <HAL_InitTick+0xec>)
 800156a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_InitTick+0xe8>)
 800156e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001572:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001574:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <HAL_InitTick+0xe8>)
 8001576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001578:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_InitTick+0xe8>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_InitTick+0xe8>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_InitTick+0xe8>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800158c:	4817      	ldr	r0, [pc, #92]	@ (80015ec <HAL_InitTick+0xe8>)
 800158e:	f002 fddf 	bl	8004150 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001598:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800159c:	2b00      	cmp	r3, #0
 800159e:	d11b      	bne.n	80015d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015a0:	4812      	ldr	r0, [pc, #72]	@ (80015ec <HAL_InitTick+0xe8>)
 80015a2:	f002 fe37 	bl	8004214 <HAL_TIM_Base_Start_IT>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d111      	bne.n	80015d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b4:	2036      	movs	r0, #54	@ 0x36
 80015b6:	f000 f9b9 	bl	800192c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d808      	bhi.n	80015d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2036      	movs	r0, #54	@ 0x36
 80015c6:	f000 f995 	bl	80018f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_InitTick+0xf0>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e002      	b.n	80015d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3738      	adds	r7, #56	@ 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	20000690 	.word	0x20000690
 80015f0:	40001000 	.word	0x40001000
 80015f4:	20000004 	.word	0x20000004

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_RX1BF_Pin);
 8001632:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001636:	f000 fb4d 	bl	8001cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800163a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800163e:	f000 fb49 	bl	8001cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8001642:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001646:	f000 fb45 	bl	8001cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_RX0BF_Pin);
 800164a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800164e:	f000 fb41 	bl	8001cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <TIM6_DAC_IRQHandler+0x10>)
 800165e:	f002 fe51 	bl	8004304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000690 	.word	0x20000690

0800166c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	@ (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	@ (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	@ (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ffd7 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f007 fd5b 	bl	8009178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fa9b 	bl	8000bfc <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016d4:	08009444 	.word	0x08009444
  ldr r2, =_sbss
 80016d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016dc:	20005200 	.word	0x20005200

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>

080016e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f000 f8f9 	bl	80018de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ec:	200f      	movs	r0, #15
 80016ee:	f7ff ff09 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f2:	f7ff fdc1 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	200006dc 	.word	0x200006dc

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200006dc 	.word	0x200006dc

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x40>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00
 80017c8:	05fa0000 	.word	0x05fa0000

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	@ (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	@ (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	@ (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	@ 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff4c 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001906:	f7ff ff61 	bl	80017cc <__NVIC_GetPriorityGrouping>
 800190a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	6978      	ldr	r0, [r7, #20]
 8001912:	f7ff ffb1 	bl	8001878 <NVIC_EncodePriority>
 8001916:	4602      	mov	r2, r0
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff80 	bl	8001824 <__NVIC_SetPriority>
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff54 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e175      	b.n	8001c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8164 	bne.w	8001c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_GPIO_Init+0x56>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d017      	beq.n	8001a3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d123      	bne.n	8001a90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80be 	beq.w	8001c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <HAL_GPIO_Init+0x324>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a65      	ldr	r2, [pc, #404]	@ (8001c6c <HAL_GPIO_Init+0x324>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <HAL_GPIO_Init+0x324>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aea:	4a61      	ldr	r2, [pc, #388]	@ (8001c70 <HAL_GPIO_Init+0x328>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a58      	ldr	r2, [pc, #352]	@ (8001c74 <HAL_GPIO_Init+0x32c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d037      	beq.n	8001b86 <HAL_GPIO_Init+0x23e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a57      	ldr	r2, [pc, #348]	@ (8001c78 <HAL_GPIO_Init+0x330>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_GPIO_Init+0x23a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a56      	ldr	r2, [pc, #344]	@ (8001c7c <HAL_GPIO_Init+0x334>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x236>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a55      	ldr	r2, [pc, #340]	@ (8001c80 <HAL_GPIO_Init+0x338>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d025      	beq.n	8001b7a <HAL_GPIO_Init+0x232>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a54      	ldr	r2, [pc, #336]	@ (8001c84 <HAL_GPIO_Init+0x33c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01f      	beq.n	8001b76 <HAL_GPIO_Init+0x22e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a53      	ldr	r2, [pc, #332]	@ (8001c88 <HAL_GPIO_Init+0x340>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x22a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <HAL_GPIO_Init+0x344>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a51      	ldr	r2, [pc, #324]	@ (8001c90 <HAL_GPIO_Init+0x348>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x222>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a50      	ldr	r2, [pc, #320]	@ (8001c94 <HAL_GPIO_Init+0x34c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x21e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	@ (8001c98 <HAL_GPIO_Init+0x350>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b5e:	2309      	movs	r3, #9
 8001b60:	e012      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b62:	230a      	movs	r3, #10
 8001b64:	e010      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b66:	2308      	movs	r3, #8
 8001b68:	e00e      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00c      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b6e:	2306      	movs	r3, #6
 8001b70:	e00a      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b72:	2305      	movs	r3, #5
 8001b74:	e008      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b86:	2300      	movs	r3, #0
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f002 0203 	and.w	r2, r2, #3
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b98:	4935      	ldr	r1, [pc, #212]	@ (8001c70 <HAL_GPIO_Init+0x328>)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bca:	4a34      	ldr	r2, [pc, #208]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf4:	4a29      	ldr	r2, [pc, #164]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c48:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <HAL_GPIO_Init+0x354>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	f67f ae86 	bls.w	8001968 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40021400 	.word	0x40021400
 8001c8c:	40021800 	.word	0x40021800
 8001c90:	40021c00 	.word	0x40021c00
 8001c94:	40022000 	.word	0x40022000
 8001c98:	40022400 	.word	0x40022400
 8001c9c:	40013c00 	.word	0x40013c00

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa42 	bl	800117c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b08f      	sub	sp, #60	@ 0x3c
 8001d08:	af0a      	add	r7, sp, #40	@ 0x28
 8001d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e116      	b.n	8001f44 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fb6d 	bl	8001410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 f99b 	bl	8005090 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	687e      	ldr	r6, [r7, #4]
 8001d62:	466d      	mov	r5, sp
 8001d64:	f106 0410 	add.w	r4, r6, #16
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d78:	1d33      	adds	r3, r6, #4
 8001d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f003 f92f 	bl	8004fe0 <USB_CoreInit>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d7      	b.n	8001f44 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 f989 	bl	80050b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e04a      	b.n	8001e3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	333d      	adds	r3, #61	@ 0x3d
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	333c      	adds	r3, #60	@ 0x3c
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	b298      	uxth	r0, r3
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3344      	adds	r3, #68	@ 0x44
 8001de2:	4602      	mov	r2, r0
 8001de4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3340      	adds	r3, #64	@ 0x40
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3348      	adds	r3, #72	@ 0x48
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	334c      	adds	r3, #76	@ 0x4c
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3354      	adds	r3, #84	@ 0x54
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3af      	bcc.n	8001da6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e044      	b.n	8001ed6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3b5      	bcc.n	8001e4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	687e      	ldr	r6, [r7, #4]
 8001ee8:	466d      	mov	r5, sp
 8001eea:	f106 0410 	add.w	r4, r6, #16
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efe:	1d33      	adds	r3, r6, #4
 8001f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f003 f922 	bl	800514c <USB_DevInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e014      	b.n	8001f44 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f80a 	bl	8001f4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fae0 	bl	8005502 <USB_DevDisconnect>

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f7a:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	10000003 	.word	0x10000003

08001f94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_PWREx_EnableOverDrive+0x98>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	4a22      	ldr	r2, [pc, #136]	@ (800202c <HAL_PWREx_EnableOverDrive+0x98>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_PWREx_EnableOverDrive+0x98>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc2:	f7ff fbaf 	bl	8001724 <HAL_GetTick>
 8001fc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc8:	e009      	b.n	8001fde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fca:	f7ff fbab 	bl	8001724 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fd8:	d901      	bls.n	8001fde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e022      	b.n	8002024 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fea:	d1ee      	bne.n	8001fca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff8:	f7ff fb94 	bl	8001724 <HAL_GetTick>
 8001ffc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ffe:	e009      	b.n	8002014 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002000:	f7ff fb90 	bl	8001724 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800200e:	d901      	bls.n	8002014 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e007      	b.n	8002024 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002020:	d1ee      	bne.n	8002000 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	40007000 	.word	0x40007000

08002034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e29b      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8087 	beq.w	8002166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002058:	4b96      	ldr	r3, [pc, #600]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00c      	beq.n	800207e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002064:	4b93      	ldr	r3, [pc, #588]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d112      	bne.n	8002096 <HAL_RCC_OscConfig+0x62>
 8002070:	4b90      	ldr	r3, [pc, #576]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207c:	d10b      	bne.n	8002096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	4b8d      	ldr	r3, [pc, #564]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06c      	beq.n	8002164 <HAL_RCC_OscConfig+0x130>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d168      	bne.n	8002164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e275      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x7a>
 80020a0:	4b84      	ldr	r3, [pc, #528]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a83      	ldr	r2, [pc, #524]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e02e      	b.n	800210c <HAL_RCC_OscConfig+0xd8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x9c>
 80020b6:	4b7f      	ldr	r3, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a7e      	ldr	r2, [pc, #504]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b7c      	ldr	r3, [pc, #496]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7b      	ldr	r2, [pc, #492]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e01d      	b.n	800210c <HAL_RCC_OscConfig+0xd8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0xc0>
 80020da:	4b76      	ldr	r3, [pc, #472]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a75      	ldr	r2, [pc, #468]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b73      	ldr	r3, [pc, #460]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a72      	ldr	r2, [pc, #456]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xd8>
 80020f4:	4b6f      	ldr	r3, [pc, #444]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6e      	ldr	r2, [pc, #440]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b6c      	ldr	r3, [pc, #432]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6b      	ldr	r2, [pc, #428]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fb06 	bl	8001724 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fb02 	bl	8001724 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	@ 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e229      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b61      	ldr	r3, [pc, #388]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0xe8>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff faf2 	bl	8001724 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff faee 	bl	8001724 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	@ 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e215      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	4b57      	ldr	r3, [pc, #348]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x110>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d069      	beq.n	8002246 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002172:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b4d      	ldr	r3, [pc, #308]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b08      	cmp	r3, #8
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x190>
 800218a:	4b4a      	ldr	r3, [pc, #296]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	4b47      	ldr	r3, [pc, #284]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x17a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e1e9      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b41      	ldr	r3, [pc, #260]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	493d      	ldr	r1, [pc, #244]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	e040      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d023      	beq.n	8002214 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	4b39      	ldr	r3, [pc, #228]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a38      	ldr	r2, [pc, #224]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff faa4 	bl	8001724 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e0:	f7ff faa0 	bl	8001724 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1c7      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4929      	ldr	r1, [pc, #164]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	e018      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002214:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a26      	ldr	r2, [pc, #152]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff fa80 	bl	8001724 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002228:	f7ff fa7c 	bl	8001724 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1a3      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d038      	beq.n	80022c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d019      	beq.n	800228e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 800225c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225e:	4a15      	ldr	r2, [pc, #84]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7ff fa5d 	bl	8001724 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226e:	f7ff fa59 	bl	8001724 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e180      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x23a>
 800228c:	e01a      	b.n	80022c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7ff fa43 	bl	8001724 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a2:	f7ff fa3f 	bl	8001724 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d903      	bls.n	80022b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e166      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
 80022b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b92      	ldr	r3, [pc, #584]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a4 	beq.w	800241a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b89      	ldr	r3, [pc, #548]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a88      	ldr	r2, [pc, #544]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b86      	ldr	r3, [pc, #536]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fa:	4b83      	ldr	r3, [pc, #524]	@ (8002508 <HAL_RCC_OscConfig+0x4d4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002306:	4b80      	ldr	r3, [pc, #512]	@ (8002508 <HAL_RCC_OscConfig+0x4d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7f      	ldr	r2, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x4d4>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff fa07 	bl	8001724 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff fa03 	bl	8001724 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	@ 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e12a      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232c:	4b76      	ldr	r3, [pc, #472]	@ (8002508 <HAL_RCC_OscConfig+0x4d4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x31a>
 8002340:	4b70      	ldr	r3, [pc, #448]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	4a6f      	ldr	r2, [pc, #444]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	@ 0x70
 800234c:	e02d      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x33c>
 8002356:	4b6b      	ldr	r3, [pc, #428]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235a:	4a6a      	ldr	r2, [pc, #424]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	@ 0x70
 8002362:	4b68      	ldr	r3, [pc, #416]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	4a67      	ldr	r2, [pc, #412]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	@ 0x70
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x35e>
 8002378:	4b62      	ldr	r3, [pc, #392]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	4a61      	ldr	r2, [pc, #388]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6713      	str	r3, [r2, #112]	@ 0x70
 8002384:	4b5f      	ldr	r3, [pc, #380]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	4a5e      	ldr	r2, [pc, #376]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
 8002392:	4b5c      	ldr	r3, [pc, #368]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002396:	4a5b      	ldr	r2, [pc, #364]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6713      	str	r3, [r2, #112]	@ 0x70
 800239e:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7ff f9b7 	bl	8001724 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff f9b3 	bl	8001724 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0d8      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x386>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7ff f9a1 	bl	8001724 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff f99d 	bl	8001724 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0c2      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a3c      	ldr	r2, [pc, #240]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80ae 	beq.w	8002580 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d06d      	beq.n	800250c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d14b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b32      	ldr	r3, [pc, #200]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a31      	ldr	r2, [pc, #196]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f96e 	bl	8001724 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff f96a 	bl	8001724 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e091      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	071b      	lsls	r3, r3, #28
 8002496:	491b      	ldr	r1, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f93c 	bl	8001724 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7ff f938 	bl	8001724 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e05f      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x47c>
 80024ce:	e057      	b.n	8002580 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff f922 	bl	8001724 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7ff f91e 	bl	8001724 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e045      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4b0>
 8002502:	e03d      	b.n	8002580 <HAL_RCC_OscConfig+0x54c>
 8002504:	40023800 	.word	0x40023800
 8002508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_RCC_OscConfig+0x558>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d030      	beq.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d129      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d122      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002542:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002544:	4293      	cmp	r3, r2
 8002546:	d119      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d10f      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	4965      	ldr	r1, [pc, #404]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7ff f84e 	bl	8001724 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7ff f84a 	bl	8001724 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 020f 	bic.w	r2, r3, #15
 80026ca:	4922      	ldr	r1, [pc, #136]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	@ (800275c <HAL_RCC_ClockConfig+0x1cc>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_RCC_ClockConfig+0x1d0>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fede 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	0800941c 	.word	0x0800941c
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b094      	sub	sp, #80	@ 0x50
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	647b      	str	r3, [r7, #68]	@ 0x44
 8002774:	2300      	movs	r3, #0
 8002776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002778:	2300      	movs	r3, #0
 800277a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002780:	4b79      	ldr	r3, [pc, #484]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 800278c:	2b08      	cmp	r3, #8
 800278e:	f200 80e1 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x34>
 8002796:	2b04      	cmp	r3, #4
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800279a:	e0db      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b73      	ldr	r3, [pc, #460]	@ (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027a0:	e0db      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a2:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x208>)
 80027a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027a6:	e0d8      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b6a      	ldr	r3, [pc, #424]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4621      	mov	r1, r4
 80027f4:	1a51      	subs	r1, r2, r1
 80027f6:	6139      	str	r1, [r7, #16]
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800280c:	4659      	mov	r1, fp
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	4651      	mov	r1, sl
 8002812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002816:	4651      	mov	r1, sl
 8002818:	018a      	lsls	r2, r1, #6
 800281a:	4651      	mov	r1, sl
 800281c:	ebb2 0801 	subs.w	r8, r2, r1
 8002820:	4659      	mov	r1, fp
 8002822:	eb63 0901 	sbc.w	r9, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283a:	4690      	mov	r8, r2
 800283c:	4699      	mov	r9, r3
 800283e:	4623      	mov	r3, r4
 8002840:	eb18 0303 	adds.w	r3, r8, r3
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	462b      	mov	r3, r5
 8002848:	eb49 0303 	adc.w	r3, r9, r3
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800285a:	4629      	mov	r1, r5
 800285c:	024b      	lsls	r3, r1, #9
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002864:	4621      	mov	r1, r4
 8002866:	024a      	lsls	r2, r1, #9
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286e:	2200      	movs	r2, #0
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002878:	f7fd fce2 	bl	8000240 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002884:	e058      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	4618      	mov	r0, r3
 8002890:	4611      	mov	r1, r2
 8002892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
 800289c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	0159      	lsls	r1, r3, #5
 80028ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b2:	0150      	lsls	r0, r2, #5
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4641      	mov	r1, r8
 80028ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028d8:	ebb2 040a 	subs.w	r4, r2, sl
 80028dc:	eb63 050b 	sbc.w	r5, r3, fp
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	464b      	mov	r3, r9
 80028fc:	eb45 0303 	adc.w	r3, r5, r3
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800290e:	4629      	mov	r1, r5
 8002910:	028b      	lsls	r3, r1, #10
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002918:	4621      	mov	r1, r4
 800291a:	028a      	lsls	r2, r1, #10
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292c:	f7fd fc88 	bl	8000240 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800294a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800295c:	4618      	mov	r0, r3
 800295e:	3750      	adds	r7, #80	@ 0x50
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	0800942c 	.word	0x0800942c

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffdc 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	0800942c 	.word	0x0800942c

080029dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	220f      	movs	r2, #15
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_RCC_GetClockConfig+0x5c>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0203 	and.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <HAL_RCC_GetClockConfig+0x5c>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a04:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_RCC_GetClockConfig+0x5c>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_GetClockConfig+0x5c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <HAL_RCC_GetClockConfig+0x60>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	601a      	str	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40023c00 	.word	0x40023c00

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a68:	4b69      	ldr	r3, [pc, #420]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a72:	6093      	str	r3, [r2, #8]
 8002a74:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7c:	4964      	ldr	r1, [pc, #400]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d017      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	4959      	ldr	r1, [pc, #356]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002adc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	494a      	ldr	r1, [pc, #296]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 808b 	beq.w	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b3a      	ldr	r3, [pc, #232]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	4a39      	ldr	r2, [pc, #228]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b30:	4b37      	ldr	r3, [pc, #220]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b3c:	4b35      	ldr	r3, [pc, #212]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe fdec 	bl	8001724 <HAL_GetTick>
 8002b4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe fde8 	bl	8001724 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e38f      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b62:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6e:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d035      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d02e      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b8c:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bae:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bb4:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d114      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fdb0 	bl	8001724 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fdac 	bl	8001724 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e351      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c04:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c06:	400b      	ands	r3, r1
 8002c08:	4901      	ldr	r1, [pc, #4]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
 8002c18:	0ffffcff 	.word	0x0ffffcff
 8002c1c:	4bac      	ldr	r3, [pc, #688]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4aab      	ldr	r2, [pc, #684]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	4ba9      	ldr	r3, [pc, #676]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	49a6      	ldr	r1, [pc, #664]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c46:	4ba2      	ldr	r3, [pc, #648]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4c:	4aa0      	ldr	r2, [pc, #640]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c56:	4b9e      	ldr	r3, [pc, #632]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c60:	499b      	ldr	r1, [pc, #620]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c74:	4b96      	ldr	r3, [pc, #600]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c82:	4993      	ldr	r1, [pc, #588]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c96:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca4:	498a      	ldr	r1, [pc, #552]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb8:	4b85      	ldr	r3, [pc, #532]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc6:	4982      	ldr	r1, [pc, #520]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cda:	4b7d      	ldr	r3, [pc, #500]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4979      	ldr	r1, [pc, #484]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cfc:	4b74      	ldr	r3, [pc, #464]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	4971      	ldr	r1, [pc, #452]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d24:	f023 020c 	bic.w	r2, r3, #12
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	4968      	ldr	r1, [pc, #416]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d40:	4b63      	ldr	r3, [pc, #396]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	4960      	ldr	r1, [pc, #384]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d62:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d70:	4957      	ldr	r1, [pc, #348]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d84:	4b52      	ldr	r3, [pc, #328]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	494f      	ldr	r1, [pc, #316]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002da6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db4:	4946      	ldr	r1, [pc, #280]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dc8:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd6:	493e      	ldr	r1, [pc, #248]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dea:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df8:	4935      	ldr	r1, [pc, #212]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e0c:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e1a:	492d      	ldr	r1, [pc, #180]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d011      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e3c:	4924      	ldr	r1, [pc, #144]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7c:	4914      	ldr	r1, [pc, #80]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ea0:	490b      	ldr	r1, [pc, #44]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00f      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec4:	4902      	ldr	r1, [pc, #8]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	4986      	ldr	r1, [pc, #536]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f04:	4b81      	ldr	r3, [pc, #516]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f14:	497d      	ldr	r1, [pc, #500]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d006      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80d6 	beq.w	80030dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f30:	4b76      	ldr	r3, [pc, #472]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a75      	ldr	r2, [pc, #468]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fbf2 	bl	8001724 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f44:	f7fe fbee 	bl	8001724 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e195      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f56:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d021      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11d      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f76:	4b65      	ldr	r3, [pc, #404]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f84:	4b61      	ldr	r3, [pc, #388]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	019a      	lsls	r2, r3, #6
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	4958      	ldr	r1, [pc, #352]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02e      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fdc:	d129      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fde:	4b4b      	ldr	r3, [pc, #300]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fec:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ff2:	0f1b      	lsrs	r3, r3, #28
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	019a      	lsls	r2, r3, #6
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	071b      	lsls	r3, r3, #28
 8003012:	493e      	ldr	r1, [pc, #248]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800301a:	4b3c      	ldr	r3, [pc, #240]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003020:	f023 021f 	bic.w	r2, r3, #31
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	3b01      	subs	r3, #1
 800302a:	4938      	ldr	r1, [pc, #224]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01d      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800303e:	4b33      	ldr	r3, [pc, #204]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003044:	0e1b      	lsrs	r3, r3, #24
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800304c:	4b2f      	ldr	r3, [pc, #188]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003052:	0f1b      	lsrs	r3, r3, #28
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	019a      	lsls	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	071b      	lsls	r3, r3, #28
 8003072:	4926      	ldr	r1, [pc, #152]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d011      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	491a      	ldr	r1, [pc, #104]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030aa:	4b18      	ldr	r3, [pc, #96]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b6:	f7fe fb35 	bl	8001724 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030be:	f7fe fb31 	bl	8001724 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b64      	cmp	r3, #100	@ 0x64
 80030ca:	d901      	bls.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0d8      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f040 80ce 	bne.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030e4:	4b09      	ldr	r3, [pc, #36]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fe fb18 	bl	8001724 <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030f6:	e00b      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f8:	f7fe fb14 	bl	8001724 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d904      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0bb      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003110:	4b5e      	ldr	r3, [pc, #376]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800311c:	d0ec      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02e      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d12a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003146:	4b51      	ldr	r3, [pc, #324]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003154:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	0f1b      	lsrs	r3, r3, #28
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	019a      	lsls	r2, r3, #6
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	071b      	lsls	r3, r3, #28
 800317a:	4944      	ldr	r1, [pc, #272]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003182:	4b42      	ldr	r3, [pc, #264]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003188:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	493d      	ldr	r1, [pc, #244]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d022      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031b0:	d11d      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031b2:	4b36      	ldr	r3, [pc, #216]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b8:	0e1b      	lsrs	r3, r3, #24
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c0:	4b32      	ldr	r3, [pc, #200]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	0f1b      	lsrs	r3, r3, #28
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	019a      	lsls	r2, r3, #6
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	071b      	lsls	r3, r3, #28
 80031e6:	4929      	ldr	r1, [pc, #164]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d028      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	0e1b      	lsrs	r3, r3, #24
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003208:	4b20      	ldr	r3, [pc, #128]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	019a      	lsls	r2, r3, #6
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	431a      	orrs	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	071b      	lsls	r3, r3, #28
 800322e:	4917      	ldr	r1, [pc, #92]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800323c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	4911      	ldr	r1, [pc, #68]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800324c:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0e      	ldr	r2, [pc, #56]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fe fa64 	bl	8001724 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003260:	f7fe fa60 	bl	8001724 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e007      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800327a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800327e:	d1ef      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800

08003290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e09d      	b.n	80033de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032b2:	d009      	beq.n	80032c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	61da      	str	r2, [r3, #28]
 80032ba:	e005      	b.n	80032c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fff0 	bl	80012c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003308:	d902      	bls.n	8003310 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e002      	b.n	8003316 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003314:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800331e:	d007      	beq.n	8003330 <HAL_SPI_Init+0xa0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003372:	ea42 0103 	orr.w	r1, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	f003 0204 	and.w	r2, r3, #4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80033ac:	ea42 0103 	orr.w	r1, r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b088      	sub	sp, #32
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_SPI_Transmit+0x22>
 8003404:	2302      	movs	r3, #2
 8003406:	e158      	b.n	80036ba <HAL_SPI_Transmit+0x2d4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003410:	f7fe f988 	bl	8001724 <HAL_GetTick>
 8003414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d002      	beq.n	800342c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800342a:	e13d      	b.n	80036a8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_SPI_Transmit+0x52>
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800343c:	e134      	b.n	80036a8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2203      	movs	r2, #3
 8003442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	88fa      	ldrh	r2, [r7, #6]
 8003456:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003488:	d10f      	bne.n	80034aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b40      	cmp	r3, #64	@ 0x40
 80034b6:	d007      	beq.n	80034c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034d0:	d94b      	bls.n	800356a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_SPI_Transmit+0xfa>
 80034da:	8afb      	ldrh	r3, [r7, #22]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d13e      	bne.n	800355e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	1c9a      	adds	r2, r3, #2
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003504:	e02b      	b.n	800355e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d112      	bne.n	800353a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003538:	e011      	b.n	800355e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800353a:	f7fe f8f3 	bl	8001724 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d803      	bhi.n	8003552 <HAL_SPI_Transmit+0x16c>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d102      	bne.n	8003558 <HAL_SPI_Transmit+0x172>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800355c:	e0a4      	b.n	80036a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ce      	bne.n	8003506 <HAL_SPI_Transmit+0x120>
 8003568:	e07c      	b.n	8003664 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Transmit+0x192>
 8003572:	8afb      	ldrh	r3, [r7, #22]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d170      	bne.n	800365a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d912      	bls.n	80035a8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	1c9a      	adds	r2, r3, #2
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b02      	subs	r3, #2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035a6:	e058      	b.n	800365a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035ce:	e044      	b.n	800365a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d12b      	bne.n	8003636 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d912      	bls.n	800360e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b02      	subs	r3, #2
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800360c:	e025      	b.n	800365a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003634:	e011      	b.n	800365a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003636:	f7fe f875 	bl	8001724 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d803      	bhi.n	800364e <HAL_SPI_Transmit+0x268>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d102      	bne.n	8003654 <HAL_SPI_Transmit+0x26e>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003658:	e026      	b.n	80036a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1b5      	bne.n	80035d0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fd07 	bl	800407c <SPI_EndRxTxTransaction>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e000      	b.n	80036a8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b088      	sub	sp, #32
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036de:	d112      	bne.n	8003706 <HAL_SPI_Receive+0x44>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10e      	bne.n	8003706 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2204      	movs	r2, #4
 80036ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f910 	bl	8003922 <HAL_SPI_TransmitReceive>
 8003702:	4603      	mov	r3, r0
 8003704:	e109      	b.n	800391a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_SPI_Receive+0x52>
 8003710:	2302      	movs	r3, #2
 8003712:	e102      	b.n	800391a <HAL_SPI_Receive+0x258>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371c:	f7fe f802 	bl	8001724 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d002      	beq.n	8003734 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800372e:	2302      	movs	r3, #2
 8003730:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003732:	e0e9      	b.n	8003908 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Receive+0x7e>
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003744:	e0e0      	b.n	8003908 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2204      	movs	r2, #4
 800374a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003790:	d908      	bls.n	80037a4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e007      	b.n	80037b4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037bc:	d10f      	bne.n	80037de <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e8:	2b40      	cmp	r3, #64	@ 0x40
 80037ea:	d007      	beq.n	80037fc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003804:	d867      	bhi.n	80038d6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003806:	e030      	b.n	800386a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d117      	bne.n	8003846 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f103 020c 	add.w	r2, r3, #12
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	7812      	ldrb	r2, [r2, #0]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003844:	e011      	b.n	800386a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003846:	f7fd ff6d 	bl	8001724 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d803      	bhi.n	800385e <HAL_SPI_Receive+0x19c>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d102      	bne.n	8003864 <HAL_SPI_Receive+0x1a2>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003868:	e04e      	b.n	8003908 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1c8      	bne.n	8003808 <HAL_SPI_Receive+0x146>
 8003876:	e034      	b.n	80038e2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d115      	bne.n	80038b2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	b292      	uxth	r2, r2
 8003892:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80038b0:	e011      	b.n	80038d6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b2:	f7fd ff37 	bl	8001724 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d803      	bhi.n	80038ca <HAL_SPI_Receive+0x208>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Receive+0x20e>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038d4:	e018      	b.n	8003908 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1ca      	bne.n	8003878 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fb4c 	bl	8003f84 <SPI_EndRxTransaction>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
 8003904:	e000      	b.n	8003908 <HAL_SPI_Receive+0x246>
  }

error :
 8003906:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b08a      	sub	sp, #40	@ 0x28
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003930:	2301      	movs	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x26>
 8003944:	2302      	movs	r3, #2
 8003946:	e1fb      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x41e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003950:	f7fd fee8 	bl	8001724 <HAL_GetTick>
 8003954:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800395c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800396c:	7efb      	ldrb	r3, [r7, #27]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d00e      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x6e>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003978:	d106      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x66>
 8003982:	7efb      	ldrb	r3, [r7, #27]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d003      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800398e:	e1cd      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x80>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x80>
 800399c:	887b      	ldrh	r3, [r7, #2]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80039a8:	e1c0      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d003      	beq.n	80039be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2205      	movs	r2, #5
 80039ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	887a      	ldrh	r2, [r7, #2]
 80039ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	887a      	ldrh	r2, [r7, #2]
 80039ea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a00:	d802      	bhi.n	8003a08 <HAL_SPI_TransmitReceive+0xe6>
 8003a02:	8a3b      	ldrh	r3, [r7, #16]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d908      	bls.n	8003a1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	e007      	b.n	8003a2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d007      	beq.n	8003a48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a50:	d97c      	bls.n	8003b4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x13e>
 8003a5a:	8a7b      	ldrh	r3, [r7, #18]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d169      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a84:	e056      	b.n	8003b34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d11b      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x1aa>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x1aa>
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d113      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d11c      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x1f2>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	b292      	uxth	r2, r2
 8003af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b14:	f7fd fe06 	bl	8001724 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d807      	bhi.n	8003b34 <HAL_SPI_TransmitReceive+0x212>
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d003      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003b32:	e0fb      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1a3      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x164>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d19d      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x164>
 8003b4a:	e0df      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x23a>
 8003b54:	8a7b      	ldrh	r3, [r7, #18]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	f040 80cb 	bne.w	8003cf2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d912      	bls.n	8003b8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	1c9a      	adds	r2, r3, #2
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b02      	subs	r3, #2
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b8a:	e0b2      	b.n	8003cf2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb2:	e09e      	b.n	8003cf2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d134      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x30a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02f      	beq.n	8003c2c <HAL_SPI_TransmitReceive+0x30a>
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d12c      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d912      	bls.n	8003c02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	881a      	ldrh	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	1c9a      	adds	r2, r3, #2
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b02      	subs	r3, #2
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c00:	e012      	b.n	8003c28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	7812      	ldrb	r2, [r2, #0]
 8003c0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d148      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x3aa>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d042      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d923      	bls.n	8003c9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b02      	subs	r3, #2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d81f      	bhi.n	8003cc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e016      	b.n	8003cc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f103 020c 	add.w	r2, r3, #12
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ccc:	f7fd fd2a 	bl	8001724 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d803      	bhi.n	8003ce4 <HAL_SPI_TransmitReceive+0x3c2>
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d102      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x3c8>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003cf0:	e01c      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af5b 	bne.w	8003bb4 <HAL_SPI_TransmitReceive+0x292>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f af54 	bne.w	8003bb4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f9b3 	bl	800407c <SPI_EndRxTxTransaction>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d28:	e000      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d58:	f7fd fce4 	bl	8001724 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d68:	f7fd fcdc 	bl	8001724 <HAL_GetTick>
 8003d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6e:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	0d1b      	lsrs	r3, r3, #20
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	e054      	b.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d050      	beq.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d88:	f7fd fccc 	bl	8001724 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d902      	bls.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d13d      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003db6:	d111      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc0:	d004      	beq.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dca:	d107      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de4:	d10f      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e017      	b.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d19b      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000000 	.word	0x20000000

08003e58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	@ 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e6a:	f7fd fc5b 	bl	8001724 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e7a:	f7fd fc53 	bl	8001724 <HAL_GetTick>
 8003e7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	@ (8003f80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00da      	lsls	r2, r3, #3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	0d1b      	lsrs	r3, r3, #20
 8003e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ea0:	e060      	b.n	8003f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ea8:	d107      	bne.n	8003eba <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d050      	beq.n	8003f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec2:	f7fd fc2f 	bl	8001724 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d13d      	bne.n	8003f54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ee6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef0:	d111      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003efa:	d004      	beq.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f04:	d107      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1e:	d10f      	bne.n	8003f40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e010      	b.n	8003f76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d196      	bne.n	8003ea2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	@ 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000

08003f84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f98:	d111      	bne.n	8003fbe <SPI_EndRxTransaction+0x3a>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa2:	d004      	beq.n	8003fae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	d107      	bne.n	8003fbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fc6:	d112      	bne.n	8003fee <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2180      	movs	r1, #128	@ 0x80
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff feb8 	bl	8003d48 <SPI_WaitFlagStateUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d021      	beq.n	8004022 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e03d      	b.n	800406a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fee:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <SPI_EndRxTransaction+0xf0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <SPI_EndRxTransaction+0xf4>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	0d5b      	lsrs	r3, r3, #21
 8003ffa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3b01      	subs	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b80      	cmp	r3, #128	@ 0x80
 800401c:	d0f2      	beq.n	8004004 <SPI_EndRxTransaction+0x80>
 800401e:	e000      	b.n	8004022 <SPI_EndRxTransaction+0x9e>
        break;
 8004020:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402a:	d11d      	bne.n	8004068 <SPI_EndRxTransaction+0xe4>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004034:	d004      	beq.n	8004040 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403e:	d113      	bne.n	8004068 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff ff03 	bl	8003e58 <SPI_WaitFifoStateUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e000      	b.n	800406a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000000 	.word	0x20000000
 8004078:	165e9f81 	.word	0x165e9f81

0800407c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fedf 	bl	8003e58 <SPI_WaitFifoStateUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e046      	b.n	800413e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040b0:	4b25      	ldr	r3, [pc, #148]	@ (8004148 <SPI_EndRxTxTransaction+0xcc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a25      	ldr	r2, [pc, #148]	@ (800414c <SPI_EndRxTxTransaction+0xd0>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0d5b      	lsrs	r3, r3, #21
 80040bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ce:	d112      	bne.n	80040f6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	@ 0x80
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fe34 	bl	8003d48 <SPI_WaitFlagStateUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e023      	b.n	800413e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3b01      	subs	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410c:	2b80      	cmp	r3, #128	@ 0x80
 800410e:	d0f2      	beq.n	80040f6 <SPI_EndRxTxTransaction+0x7a>
 8004110:	e000      	b.n	8004114 <SPI_EndRxTxTransaction+0x98>
        break;
 8004112:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff fe99 	bl	8003e58 <SPI_WaitFifoStateUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e000      	b.n	800413e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000
 800414c:	165e9f81 	.word	0x165e9f81

08004150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e049      	b.n	80041f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f841 	bl	80041fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f000 fa00 	bl	8004594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d001      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e054      	b.n	80042d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004256:	d01d      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a22      	ldr	r2, [pc, #136]	@ (80042e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a21      	ldr	r2, [pc, #132]	@ (80042ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1f      	ldr	r2, [pc, #124]	@ (80042f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1e      	ldr	r2, [pc, #120]	@ (80042f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d115      	bne.n	80042c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <HAL_TIM_Base_Start_IT+0xec>)
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d015      	beq.n	80042d2 <HAL_TIM_Base_Start_IT+0xbe>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d011      	beq.n	80042d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042be:	e008      	b.n	80042d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e000      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40010400 	.word	0x40010400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40001800 	.word	0x40001800
 8004300:	00010007 	.word	0x00010007

08004304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f905 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8f7 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f908 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0204 	mvn.w	r2, #4
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8db 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8cd 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8de 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0208 	mvn.w	r2, #8
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8b1 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8a3 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8b4 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b10      	cmp	r3, #16
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0210 	mvn.w	r2, #16
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2208      	movs	r2, #8
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f887 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f879 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f88a 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0201 	mvn.w	r2, #1
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fe9c 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004492:	2b80      	cmp	r3, #128	@ 0x80
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f91a 	bl	80046e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ce:	2b80      	cmp	r3, #128	@ 0x80
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f90d 	bl	80046fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f838 	bl	800457e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d10e      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b20      	cmp	r3, #32
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0220 	mvn.w	r2, #32
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f8cd 	bl	80046d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a40      	ldr	r2, [pc, #256]	@ (80046a8 <TIM_Base_SetConfig+0x114>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3d      	ldr	r2, [pc, #244]	@ (80046ac <TIM_Base_SetConfig+0x118>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3c      	ldr	r2, [pc, #240]	@ (80046b0 <TIM_Base_SetConfig+0x11c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3b      	ldr	r2, [pc, #236]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3a      	ldr	r2, [pc, #232]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2f      	ldr	r2, [pc, #188]	@ (80046a8 <TIM_Base_SetConfig+0x114>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f4:	d027      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2c      	ldr	r2, [pc, #176]	@ (80046ac <TIM_Base_SetConfig+0x118>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d023      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2b      	ldr	r2, [pc, #172]	@ (80046b0 <TIM_Base_SetConfig+0x11c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2a      	ldr	r2, [pc, #168]	@ (80046b4 <TIM_Base_SetConfig+0x120>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a29      	ldr	r2, [pc, #164]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a28      	ldr	r2, [pc, #160]	@ (80046bc <TIM_Base_SetConfig+0x128>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a27      	ldr	r2, [pc, #156]	@ (80046c0 <TIM_Base_SetConfig+0x12c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a26      	ldr	r2, [pc, #152]	@ (80046c4 <TIM_Base_SetConfig+0x130>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a25      	ldr	r2, [pc, #148]	@ (80046c8 <TIM_Base_SetConfig+0x134>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a24      	ldr	r2, [pc, #144]	@ (80046cc <TIM_Base_SetConfig+0x138>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a23      	ldr	r2, [pc, #140]	@ (80046d0 <TIM_Base_SetConfig+0x13c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0a      	ldr	r2, [pc, #40]	@ (80046a8 <TIM_Base_SetConfig+0x114>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0xf8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <TIM_Base_SetConfig+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	615a      	str	r2, [r3, #20]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40010400 	.word	0x40010400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	40001800 	.word	0x40001800
 80046cc:	40001c00 	.word	0x40001c00
 80046d0:	40002000 	.word	0x40002000

080046d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e040      	b.n	80047a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc fe0c 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	@ 0x24
 800473c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f82c 	bl	80047ac <UART_SetConfig>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e022      	b.n	80047a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa84 	bl	8004c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800477a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800478a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fb0b 	bl	8004db8 <UART_CheckIdleState>
 80047a2:	4603      	mov	r3, r0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4ba6      	ldr	r3, [pc, #664]	@ (8004a70 <UART_SetConfig+0x2c4>)
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	430a      	orrs	r2, r1
 800481c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a94      	ldr	r2, [pc, #592]	@ (8004a74 <UART_SetConfig+0x2c8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d120      	bne.n	800486a <UART_SetConfig+0xbe>
 8004828:	4b93      	ldr	r3, [pc, #588]	@ (8004a78 <UART_SetConfig+0x2cc>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b03      	cmp	r3, #3
 8004834:	d816      	bhi.n	8004864 <UART_SetConfig+0xb8>
 8004836:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <UART_SetConfig+0x90>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	0800484d 	.word	0x0800484d
 8004840:	08004859 	.word	0x08004859
 8004844:	08004853 	.word	0x08004853
 8004848:	0800485f 	.word	0x0800485f
 800484c:	2301      	movs	r3, #1
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e150      	b.n	8004af4 <UART_SetConfig+0x348>
 8004852:	2302      	movs	r3, #2
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e14d      	b.n	8004af4 <UART_SetConfig+0x348>
 8004858:	2304      	movs	r3, #4
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e14a      	b.n	8004af4 <UART_SetConfig+0x348>
 800485e:	2308      	movs	r3, #8
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e147      	b.n	8004af4 <UART_SetConfig+0x348>
 8004864:	2310      	movs	r3, #16
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e144      	b.n	8004af4 <UART_SetConfig+0x348>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a83      	ldr	r2, [pc, #524]	@ (8004a7c <UART_SetConfig+0x2d0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d132      	bne.n	80048da <UART_SetConfig+0x12e>
 8004874:	4b80      	ldr	r3, [pc, #512]	@ (8004a78 <UART_SetConfig+0x2cc>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d828      	bhi.n	80048d4 <UART_SetConfig+0x128>
 8004882:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <UART_SetConfig+0xdc>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048d5 	.word	0x080048d5
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048c3 	.word	0x080048c3
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048d5 	.word	0x080048d5
 80048b8:	080048cf 	.word	0x080048cf
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e118      	b.n	8004af4 <UART_SetConfig+0x348>
 80048c2:	2302      	movs	r3, #2
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e115      	b.n	8004af4 <UART_SetConfig+0x348>
 80048c8:	2304      	movs	r3, #4
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e112      	b.n	8004af4 <UART_SetConfig+0x348>
 80048ce:	2308      	movs	r3, #8
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e10f      	b.n	8004af4 <UART_SetConfig+0x348>
 80048d4:	2310      	movs	r3, #16
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e10c      	b.n	8004af4 <UART_SetConfig+0x348>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a68      	ldr	r2, [pc, #416]	@ (8004a80 <UART_SetConfig+0x2d4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d120      	bne.n	8004926 <UART_SetConfig+0x17a>
 80048e4:	4b64      	ldr	r3, [pc, #400]	@ (8004a78 <UART_SetConfig+0x2cc>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048ee:	2b30      	cmp	r3, #48	@ 0x30
 80048f0:	d013      	beq.n	800491a <UART_SetConfig+0x16e>
 80048f2:	2b30      	cmp	r3, #48	@ 0x30
 80048f4:	d814      	bhi.n	8004920 <UART_SetConfig+0x174>
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d009      	beq.n	800490e <UART_SetConfig+0x162>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d810      	bhi.n	8004920 <UART_SetConfig+0x174>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x15c>
 8004902:	2b10      	cmp	r3, #16
 8004904:	d006      	beq.n	8004914 <UART_SetConfig+0x168>
 8004906:	e00b      	b.n	8004920 <UART_SetConfig+0x174>
 8004908:	2300      	movs	r3, #0
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e0f2      	b.n	8004af4 <UART_SetConfig+0x348>
 800490e:	2302      	movs	r3, #2
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e0ef      	b.n	8004af4 <UART_SetConfig+0x348>
 8004914:	2304      	movs	r3, #4
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0ec      	b.n	8004af4 <UART_SetConfig+0x348>
 800491a:	2308      	movs	r3, #8
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0e9      	b.n	8004af4 <UART_SetConfig+0x348>
 8004920:	2310      	movs	r3, #16
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0e6      	b.n	8004af4 <UART_SetConfig+0x348>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a56      	ldr	r2, [pc, #344]	@ (8004a84 <UART_SetConfig+0x2d8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d120      	bne.n	8004972 <UART_SetConfig+0x1c6>
 8004930:	4b51      	ldr	r3, [pc, #324]	@ (8004a78 <UART_SetConfig+0x2cc>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800493a:	2bc0      	cmp	r3, #192	@ 0xc0
 800493c:	d013      	beq.n	8004966 <UART_SetConfig+0x1ba>
 800493e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004940:	d814      	bhi.n	800496c <UART_SetConfig+0x1c0>
 8004942:	2b80      	cmp	r3, #128	@ 0x80
 8004944:	d009      	beq.n	800495a <UART_SetConfig+0x1ae>
 8004946:	2b80      	cmp	r3, #128	@ 0x80
 8004948:	d810      	bhi.n	800496c <UART_SetConfig+0x1c0>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <UART_SetConfig+0x1a8>
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d006      	beq.n	8004960 <UART_SetConfig+0x1b4>
 8004952:	e00b      	b.n	800496c <UART_SetConfig+0x1c0>
 8004954:	2300      	movs	r3, #0
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e0cc      	b.n	8004af4 <UART_SetConfig+0x348>
 800495a:	2302      	movs	r3, #2
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e0c9      	b.n	8004af4 <UART_SetConfig+0x348>
 8004960:	2304      	movs	r3, #4
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e0c6      	b.n	8004af4 <UART_SetConfig+0x348>
 8004966:	2308      	movs	r3, #8
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e0c3      	b.n	8004af4 <UART_SetConfig+0x348>
 800496c:	2310      	movs	r3, #16
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0c0      	b.n	8004af4 <UART_SetConfig+0x348>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a44      	ldr	r2, [pc, #272]	@ (8004a88 <UART_SetConfig+0x2dc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d125      	bne.n	80049c8 <UART_SetConfig+0x21c>
 800497c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a78 <UART_SetConfig+0x2cc>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800498a:	d017      	beq.n	80049bc <UART_SetConfig+0x210>
 800498c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004990:	d817      	bhi.n	80049c2 <UART_SetConfig+0x216>
 8004992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004996:	d00b      	beq.n	80049b0 <UART_SetConfig+0x204>
 8004998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800499c:	d811      	bhi.n	80049c2 <UART_SetConfig+0x216>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <UART_SetConfig+0x1fe>
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d006      	beq.n	80049b6 <UART_SetConfig+0x20a>
 80049a8:	e00b      	b.n	80049c2 <UART_SetConfig+0x216>
 80049aa:	2300      	movs	r3, #0
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e0a1      	b.n	8004af4 <UART_SetConfig+0x348>
 80049b0:	2302      	movs	r3, #2
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e09e      	b.n	8004af4 <UART_SetConfig+0x348>
 80049b6:	2304      	movs	r3, #4
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e09b      	b.n	8004af4 <UART_SetConfig+0x348>
 80049bc:	2308      	movs	r3, #8
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e098      	b.n	8004af4 <UART_SetConfig+0x348>
 80049c2:	2310      	movs	r3, #16
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e095      	b.n	8004af4 <UART_SetConfig+0x348>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2f      	ldr	r2, [pc, #188]	@ (8004a8c <UART_SetConfig+0x2e0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d125      	bne.n	8004a1e <UART_SetConfig+0x272>
 80049d2:	4b29      	ldr	r3, [pc, #164]	@ (8004a78 <UART_SetConfig+0x2cc>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049e0:	d017      	beq.n	8004a12 <UART_SetConfig+0x266>
 80049e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049e6:	d817      	bhi.n	8004a18 <UART_SetConfig+0x26c>
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ec:	d00b      	beq.n	8004a06 <UART_SetConfig+0x25a>
 80049ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f2:	d811      	bhi.n	8004a18 <UART_SetConfig+0x26c>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <UART_SetConfig+0x254>
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fc:	d006      	beq.n	8004a0c <UART_SetConfig+0x260>
 80049fe:	e00b      	b.n	8004a18 <UART_SetConfig+0x26c>
 8004a00:	2301      	movs	r3, #1
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e076      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a06:	2302      	movs	r3, #2
 8004a08:	77fb      	strb	r3, [r7, #31]
 8004a0a:	e073      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e070      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a12:	2308      	movs	r3, #8
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e06d      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e06a      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	@ (8004a90 <UART_SetConfig+0x2e4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d138      	bne.n	8004a9a <UART_SetConfig+0x2ee>
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <UART_SetConfig+0x2cc>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a36:	d017      	beq.n	8004a68 <UART_SetConfig+0x2bc>
 8004a38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a3c:	d82a      	bhi.n	8004a94 <UART_SetConfig+0x2e8>
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a42:	d00b      	beq.n	8004a5c <UART_SetConfig+0x2b0>
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a48:	d824      	bhi.n	8004a94 <UART_SetConfig+0x2e8>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <UART_SetConfig+0x2aa>
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a52:	d006      	beq.n	8004a62 <UART_SetConfig+0x2b6>
 8004a54:	e01e      	b.n	8004a94 <UART_SetConfig+0x2e8>
 8004a56:	2300      	movs	r3, #0
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e04b      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e048      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a62:	2304      	movs	r3, #4
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e045      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e042      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a6e:	bf00      	nop
 8004a70:	efff69f3 	.word	0xefff69f3
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800
 8004a84:	40004c00 	.word	0x40004c00
 8004a88:	40005000 	.word	0x40005000
 8004a8c:	40011400 	.word	0x40011400
 8004a90:	40007800 	.word	0x40007800
 8004a94:	2310      	movs	r3, #16
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e02c      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a72      	ldr	r2, [pc, #456]	@ (8004c68 <UART_SetConfig+0x4bc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d125      	bne.n	8004af0 <UART_SetConfig+0x344>
 8004aa4:	4b71      	ldr	r3, [pc, #452]	@ (8004c6c <UART_SetConfig+0x4c0>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aaa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004aae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ab2:	d017      	beq.n	8004ae4 <UART_SetConfig+0x338>
 8004ab4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ab8:	d817      	bhi.n	8004aea <UART_SetConfig+0x33e>
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004abe:	d00b      	beq.n	8004ad8 <UART_SetConfig+0x32c>
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac4:	d811      	bhi.n	8004aea <UART_SetConfig+0x33e>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <UART_SetConfig+0x326>
 8004aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ace:	d006      	beq.n	8004ade <UART_SetConfig+0x332>
 8004ad0:	e00b      	b.n	8004aea <UART_SetConfig+0x33e>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e00d      	b.n	8004af4 <UART_SetConfig+0x348>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e00a      	b.n	8004af4 <UART_SetConfig+0x348>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e007      	b.n	8004af4 <UART_SetConfig+0x348>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e004      	b.n	8004af4 <UART_SetConfig+0x348>
 8004aea:	2310      	movs	r3, #16
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e001      	b.n	8004af4 <UART_SetConfig+0x348>
 8004af0:	2310      	movs	r3, #16
 8004af2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afc:	d15b      	bne.n	8004bb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x3aa>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x360>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fd ff2c 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
        break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fd ff3c 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <UART_SetConfig+0x4c4>)
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fd fe0f 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61b8      	str	r0, [r7, #24]
        break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b52:	61bb      	str	r3, [r7, #24]
        break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d074      	beq.n	8004c50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	005a      	lsls	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d916      	bls.n	8004bb0 <UART_SetConfig+0x404>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d212      	bcs.n	8004bb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f023 030f 	bic.w	r3, r3, #15
 8004b92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	89fa      	ldrh	r2, [r7, #14]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	e04f      	b.n	8004c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77bb      	strb	r3, [r7, #30]
 8004bb4:	e04c      	b.n	8004c50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d828      	bhi.n	8004c0e <UART_SetConfig+0x462>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <UART_SetConfig+0x418>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fd fed0 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004bec:	61b8      	str	r0, [r7, #24]
        break;
 8004bee:	e013      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fd fee0 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	61b8      	str	r0, [r7, #24]
        break;
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <UART_SetConfig+0x4c4>)
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e00c      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fd fdb3 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8004c02:	61b8      	str	r0, [r7, #24]
        break;
 8004c04:	e008      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0a:	61bb      	str	r3, [r7, #24]
        break;
 8004c0c:	e004      	b.n	8004c18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	77bb      	strb	r3, [r7, #30]
        break;
 8004c16:	bf00      	nop
    }

    if (pclk != 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	085a      	lsrs	r2, r3, #1
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	441a      	add	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b0f      	cmp	r3, #15
 8004c36:	d909      	bls.n	8004c4c <UART_SetConfig+0x4a0>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3e:	d205      	bcs.n	8004c4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	e001      	b.n	8004c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40007c00 	.word	0x40007c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400

08004c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d72:	d10a      	bne.n	8004d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
  }
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc8:	f7fc fcac 	bl	8001724 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d10e      	bne.n	8004dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f831 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e027      	b.n	8004e4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d10e      	bne.n	8004e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f81b 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e011      	b.n	8004e4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b09c      	sub	sp, #112	@ 0x70
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e62:	e0a7      	b.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	f000 80a3 	beq.w	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fc fc59 	bl	8001724 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13f      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e94:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e98:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ea8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ed6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ed8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e068      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d050      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f20:	d148      	bne.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e6      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f7e:	623a      	str	r2, [r7, #32]
 8004f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e010      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f43f af48 	beq.w	8004e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3770      	adds	r7, #112	@ 0x70
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	f107 001c 	add.w	r0, r7, #28
 8004fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d120      	bne.n	800503a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	4b20      	ldr	r3, [pc, #128]	@ (800508c <USB_CoreInit+0xac>)
 800500a:	4013      	ands	r3, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800501c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d105      	bne.n	800502e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa96 	bl	8005560 <USB_CoreReset>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	e010      	b.n	800505c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa8a 	bl	8005560 <USB_CoreReset>
 800504c:	4603      	mov	r3, r0
 800504e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10b      	bne.n	800507a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f043 0206 	orr.w	r2, r3, #6
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005086:	b004      	add	sp, #16
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	ffbdffbf 	.word	0xffbdffbf

08005090 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 0201 	bic.w	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d115      	bne.n	8005100 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fc fb2b 	bl	800173c <HAL_Delay>
      ms++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa29 	bl	8005544 <USB_GetMode>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d01e      	beq.n	8005136 <USB_SetCurrentMode+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b31      	cmp	r3, #49	@ 0x31
 80050fc:	d9f0      	bls.n	80050e0 <USB_SetCurrentMode+0x2e>
 80050fe:	e01a      	b.n	8005136 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d115      	bne.n	8005132 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005112:	2001      	movs	r0, #1
 8005114:	f7fc fb12 	bl	800173c <HAL_Delay>
      ms++;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa10 	bl	8005544 <USB_GetMode>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <USB_SetCurrentMode+0x84>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b31      	cmp	r3, #49	@ 0x31
 800512e:	d9f0      	bls.n	8005112 <USB_SetCurrentMode+0x60>
 8005130:	e001      	b.n	8005136 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e005      	b.n	8005142 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b32      	cmp	r3, #50	@ 0x32
 800513a:	d101      	bne.n	8005140 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800514c:	b084      	sub	sp, #16
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800515a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	e009      	b.n	8005180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3340      	adds	r3, #64	@ 0x40
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	2200      	movs	r2, #0
 8005178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3301      	adds	r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b0e      	cmp	r3, #14
 8005184:	d9f2      	bls.n	800516c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d11c      	bne.n	80051c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800519a:	f043 0302 	orr.w	r3, r3, #2
 800519e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e005      	b.n	80051d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051d8:	461a      	mov	r2, r3
 80051da:	2300      	movs	r3, #0
 80051dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e4:	4619      	mov	r1, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ec:	461a      	mov	r2, r3
 80051ee:	680b      	ldr	r3, [r1, #0]
 80051f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d10c      	bne.n	8005212 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051fe:	2100      	movs	r1, #0
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f965 	bl	80054d0 <USB_SetDevSpeed>
 8005206:	e008      	b.n	800521a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005208:	2101      	movs	r1, #1
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f960 	bl	80054d0 <USB_SetDevSpeed>
 8005210:	e003      	b.n	800521a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005212:	2103      	movs	r1, #3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f95b 	bl	80054d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800521a:	2110      	movs	r1, #16
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8f3 	bl	8005408 <USB_FlushTxFifo>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f91f 	bl	8005470 <USB_FlushRxFifo>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005242:	461a      	mov	r2, r3
 8005244:	2300      	movs	r3, #0
 8005246:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525a:	461a      	mov	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e043      	b.n	80052ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800527c:	d118      	bne.n	80052b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005290:	461a      	mov	r2, r3
 8005292:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e013      	b.n	80052c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a6:	461a      	mov	r2, r3
 80052a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e008      	b.n	80052c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3301      	adds	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3b7      	bcc.n	8005266 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e043      	b.n	8005384 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800530e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005312:	d118      	bne.n	8005346 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e013      	b.n	8005358 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e008      	b.n	8005358 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800537c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3301      	adds	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d3b7      	bcc.n	80052fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800539a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800539e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f043 0210 	orr.w	r2, r3, #16
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <USB_DevInit+0x2b4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f043 0208 	orr.w	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d105      	bne.n	80053f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <USB_DevInit+0x2b8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053fc:	b004      	add	sp, #16
 80053fe:	4770      	bx	lr
 8005400:	803c3800 	.word	0x803c3800
 8005404:	40000004 	.word	0x40000004

08005408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a13      	ldr	r2, [pc, #76]	@ (800546c <USB_FlushTxFifo+0x64>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e01b      	b.n	8005460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	daf2      	bge.n	8005416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	019b      	lsls	r3, r3, #6
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a08      	ldr	r2, [pc, #32]	@ (800546c <USB_FlushTxFifo+0x64>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e006      	b.n	8005460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b20      	cmp	r3, #32
 800545c:	d0f0      	beq.n	8005440 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	00030d40 	.word	0x00030d40

08005470 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a11      	ldr	r2, [pc, #68]	@ (80054cc <USB_FlushRxFifo+0x5c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e018      	b.n	80054c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	daf2      	bge.n	800547c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2210      	movs	r2, #16
 800549e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <USB_FlushRxFifo+0x5c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e006      	b.n	80054c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d0f0      	beq.n	80054a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800551c:	f023 0303 	bic.w	r3, r3, #3
 8005520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0301 	and.w	r3, r3, #1
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a13      	ldr	r2, [pc, #76]	@ (80055c4 <USB_CoreReset+0x64>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e01b      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	daf2      	bge.n	800556c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a09      	ldr	r2, [pc, #36]	@ (80055c4 <USB_CoreReset+0x64>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e006      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d0f0      	beq.n	8005596 <USB_CoreReset+0x36>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	00030d40 	.word	0x00030d40

080055c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055de:	f3ef 8305 	mrs	r3, IPSR
 80055e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80055e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ea:	f3ef 8310 	mrs	r3, PRIMASK
 80055ee:	607b      	str	r3, [r7, #4]
  return(result);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d105      	bne.n	8005602 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055f6:	f3ef 8311 	mrs	r3, BASEPRI
 80055fa:	603b      	str	r3, [r7, #0]
  return(result);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <osKernelInitialize+0x3a>
 8005602:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <osKernelInitialize+0x64>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d103      	bne.n	8005612 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800560a:	f06f 0305 	mvn.w	r3, #5
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e00c      	b.n	800562c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <osKernelInitialize+0x64>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800561a:	4b08      	ldr	r3, [pc, #32]	@ (800563c <osKernelInitialize+0x64>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e002      	b.n	800562c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200006e0 	.word	0x200006e0

08005640 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005646:	f3ef 8305 	mrs	r3, IPSR
 800564a:	60bb      	str	r3, [r7, #8]
  return(result);
 800564c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005652:	f3ef 8310 	mrs	r3, PRIMASK
 8005656:	607b      	str	r3, [r7, #4]
  return(result);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d105      	bne.n	800566a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800565e:	f3ef 8311 	mrs	r3, BASEPRI
 8005662:	603b      	str	r3, [r7, #0]
  return(result);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <osKernelStart+0x3a>
 800566a:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <osKernelStart+0x68>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d103      	bne.n	800567a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005672:	f06f 0305 	mvn.w	r3, #5
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e010      	b.n	800569c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <osKernelStart+0x68>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d109      	bne.n	8005696 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005682:	f7ff ffa1 	bl	80055c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005686:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <osKernelStart+0x68>)
 8005688:	2202      	movs	r2, #2
 800568a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800568c:	f001 ff14 	bl	80074b8 <vTaskStartScheduler>
      stat = osOK;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e002      	b.n	800569c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005696:	f04f 33ff 	mov.w	r3, #4294967295
 800569a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200006e0 	.word	0x200006e0

080056ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b090      	sub	sp, #64	@ 0x40
 80056b0:	af04      	add	r7, sp, #16
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056bc:	f3ef 8305 	mrs	r3, IPSR
 80056c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80056c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 808f 	bne.w	80057e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d105      	bne.n	80056e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056d6:	f3ef 8311 	mrs	r3, BASEPRI
 80056da:	617b      	str	r3, [r7, #20]
  return(result);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <osThreadNew+0x3e>
 80056e2:	4b44      	ldr	r3, [pc, #272]	@ (80057f4 <osThreadNew+0x148>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d07e      	beq.n	80057e8 <osThreadNew+0x13c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d07b      	beq.n	80057e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80056f4:	2318      	movs	r3, #24
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d045      	beq.n	8005794 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <osThreadNew+0x6a>
        name = attr->name;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <osThreadNew+0x90>
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b38      	cmp	r3, #56	@ 0x38
 800572e:	d805      	bhi.n	800573c <osThreadNew+0x90>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <osThreadNew+0x94>
        return (NULL);
 800573c:	2300      	movs	r3, #0
 800573e:	e054      	b.n	80057ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	089b      	lsrs	r3, r3, #2
 800574e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <osThreadNew+0xca>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2ba7      	cmp	r3, #167	@ 0xa7
 800575e:	d90a      	bls.n	8005776 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	d006      	beq.n	8005776 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <osThreadNew+0xca>
        mem = 1;
 8005770:	2301      	movs	r3, #1
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	e010      	b.n	8005798 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10c      	bne.n	8005798 <osThreadNew+0xec>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d108      	bne.n	8005798 <osThreadNew+0xec>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <osThreadNew+0xec>
          mem = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	e001      	b.n	8005798 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d110      	bne.n	80057c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057a6:	9202      	str	r2, [sp, #8]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f001 fbfb 	bl	8006fb0 <xTaskCreateStatic>
 80057ba:	4603      	mov	r3, r0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e013      	b.n	80057e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d110      	bne.n	80057e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f107 0310 	add.w	r3, r7, #16
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f001 fc4f 	bl	800707c <xTaskCreate>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <osThreadNew+0x13c>
          hTask = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057e8:	693b      	ldr	r3, [r7, #16]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3730      	adds	r7, #48	@ 0x30
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200006e0 	.word	0x200006e0

080057f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005800:	f3ef 8305 	mrs	r3, IPSR
 8005804:	613b      	str	r3, [r7, #16]
  return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10f      	bne.n	800582c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580c:	f3ef 8310 	mrs	r3, PRIMASK
 8005810:	60fb      	str	r3, [r7, #12]
  return(result);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005818:	f3ef 8311 	mrs	r3, BASEPRI
 800581c:	60bb      	str	r3, [r7, #8]
  return(result);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <osDelay+0x3c>
 8005824:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <osDelay+0x58>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d103      	bne.n	8005834 <osDelay+0x3c>
    stat = osErrorISR;
 800582c:	f06f 0305 	mvn.w	r3, #5
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e007      	b.n	8005844 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <osDelay+0x4c>
      vTaskDelay(ticks);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fe02 	bl	8007448 <vTaskDelay>
    }
  }

  return (stat);
 8005844:	697b      	ldr	r3, [r7, #20]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200006e0 	.word	0x200006e0

08005854 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	617b      	str	r3, [r7, #20]
  return(result);
 8005862:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005868:	f3ef 8310 	mrs	r3, PRIMASK
 800586c:	613b      	str	r3, [r7, #16]
  return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005874:	f3ef 8311 	mrs	r3, BASEPRI
 8005878:	60fb      	str	r3, [r7, #12]
  return(result);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <osDelayUntil+0x3c>
 8005880:	4b13      	ldr	r3, [pc, #76]	@ (80058d0 <osDelayUntil+0x7c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d103      	bne.n	8005890 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8005888:	f06f 0305 	mvn.w	r3, #5
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e019      	b.n	80058c4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8005894:	f001 ff32 	bl	80076fc <xTaskGetTickCount>
 8005898:	4603      	mov	r3, r0
 800589a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <osDelayUntil+0x6a>
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	db06      	blt.n	80058be <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80058b0:	f107 0308 	add.w	r3, r7, #8
 80058b4:	69b9      	ldr	r1, [r7, #24]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fd40 	bl	800733c <vTaskDelayUntil>
 80058bc:	e002      	b.n	80058c4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80058be:	f06f 0303 	mvn.w	r3, #3
 80058c2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80058c4:	69fb      	ldr	r3, [r7, #28]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200006e0 	.word	0x200006e0

080058d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	@ 0x28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e0:	f3ef 8305 	mrs	r3, IPSR
 80058e4:	613b      	str	r3, [r7, #16]
  return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f040 8085 	bne.w	80059f8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ee:	f3ef 8310 	mrs	r3, PRIMASK
 80058f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058fa:	f3ef 8311 	mrs	r3, BASEPRI
 80058fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <osMutexNew+0x3a>
 8005906:	4b3f      	ldr	r3, [pc, #252]	@ (8005a04 <osMutexNew+0x130>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d074      	beq.n	80059f8 <osMutexNew+0x124>
    if (attr != NULL) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	e001      	b.n	8005920 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <osMutexNew+0x5c>
      rmtx = 1U;
 800592a:	2301      	movs	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e001      	b.n	8005934 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d15c      	bne.n	80059f8 <osMutexNew+0x124>
      mem = -1;
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d015      	beq.n	8005976 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <osMutexNew+0x8c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b4f      	cmp	r3, #79	@ 0x4f
 8005958:	d902      	bls.n	8005960 <osMutexNew+0x8c>
          mem = 1;
 800595a:	2301      	movs	r3, #1
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e00c      	b.n	800597a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d108      	bne.n	800597a <osMutexNew+0xa6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <osMutexNew+0xa6>
            mem = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e001      	b.n	800597a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d112      	bne.n	80059a6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	4619      	mov	r1, r3
 800598c:	2004      	movs	r0, #4
 800598e:	f000 fcc8 	bl	8006322 <xQueueCreateMutexStatic>
 8005992:	6278      	str	r0, [r7, #36]	@ 0x24
 8005994:	e016      	b.n	80059c4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4619      	mov	r1, r3
 800599c:	2001      	movs	r0, #1
 800599e:	f000 fcc0 	bl	8006322 <xQueueCreateMutexStatic>
 80059a2:	6278      	str	r0, [r7, #36]	@ 0x24
 80059a4:	e00e      	b.n	80059c4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80059b2:	2004      	movs	r0, #4
 80059b4:	f000 fc9d 	bl	80062f2 <xQueueCreateMutex>
 80059b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80059ba:	e003      	b.n	80059c4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80059bc:	2001      	movs	r0, #1
 80059be:	f000 fc98 	bl	80062f2 <xQueueCreateMutex>
 80059c2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <osMutexNew+0x110>
        if (attr != NULL) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <osMutexNew+0x104>
          name = attr->name;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e001      	b.n	80059dc <osMutexNew+0x108>
        } else {
          name = NULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80059dc:	6979      	ldr	r1, [r7, #20]
 80059de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059e0:	f001 fa88 	bl	8006ef4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <osMutexNew+0x124>
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3728      	adds	r7, #40	@ 0x28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200006e0 	.word	0x200006e0

08005a08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a26:	f3ef 8305 	mrs	r3, IPSR
 8005a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10f      	bne.n	8005a52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a32:	f3ef 8310 	mrs	r3, PRIMASK
 8005a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <osMutexAcquire+0x52>
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac0 <osMutexAcquire+0xb8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d103      	bne.n	8005a5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005a52:	f06f 0305 	mvn.w	r3, #5
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	e02c      	b.n	8005ab4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005a60:	f06f 0303 	mvn.w	r3, #3
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e025      	b.n	8005ab4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	69b8      	ldr	r0, [r7, #24]
 8005a72:	f000 fca8 	bl	80063c6 <xQueueTakeMutexRecursive>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d01b      	beq.n	8005ab4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005a82:	f06f 0301 	mvn.w	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e014      	b.n	8005ab4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005a8a:	f06f 0302 	mvn.w	r3, #2
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e010      	b.n	8005ab4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	69b8      	ldr	r0, [r7, #24]
 8005a96:	f000 ff65 	bl	8006964 <xQueueSemaphoreTake>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d009      	beq.n	8005ab4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005aa6:	f06f 0301 	mvn.w	r3, #1
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e002      	b.n	8005ab4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005aae:	f06f 0302 	mvn.w	r3, #2
 8005ab2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200006e0 	.word	0x200006e0

08005ac4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae0:	f3ef 8305 	mrs	r3, IPSR
 8005ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10f      	bne.n	8005b0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aec:	f3ef 8310 	mrs	r3, PRIMASK
 8005af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005af8:	f3ef 8311 	mrs	r3, BASEPRI
 8005afc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <osMutexRelease+0x50>
 8005b04:	4b16      	ldr	r3, [pc, #88]	@ (8005b60 <osMutexRelease+0x9c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d103      	bne.n	8005b14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005b0c:	f06f 0305 	mvn.w	r3, #5
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	e01f      	b.n	8005b54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005b1a:	f06f 0303 	mvn.w	r3, #3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e018      	b.n	8005b54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005b28:	69b8      	ldr	r0, [r7, #24]
 8005b2a:	f000 fc15 	bl	8006358 <xQueueGiveMutexRecursive>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d00f      	beq.n	8005b54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005b34:	f06f 0302 	mvn.w	r3, #2
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e00b      	b.n	8005b54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2100      	movs	r1, #0
 8005b42:	69b8      	ldr	r0, [r7, #24]
 8005b44:	f000 fc78 	bl	8006438 <xQueueGenericSend>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d002      	beq.n	8005b54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005b4e:	f06f 0302 	mvn.w	r3, #2
 8005b52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005b54:	69fb      	ldr	r3, [r7, #28]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200006e0 	.word	0x200006e0

08005b64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	@ 0x30
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b74:	f3ef 8305 	mrs	r3, IPSR
 8005b78:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d16f      	bne.n	8005c60 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b80:	f3ef 8310 	mrs	r3, PRIMASK
 8005b84:	617b      	str	r3, [r7, #20]
  return(result);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b90:	613b      	str	r3, [r7, #16]
  return(result);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <osMessageQueueNew+0x3c>
 8005b98:	4b34      	ldr	r3, [pc, #208]	@ (8005c6c <osMessageQueueNew+0x108>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d05f      	beq.n	8005c60 <osMessageQueueNew+0xfc>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d05c      	beq.n	8005c60 <osMessageQueueNew+0xfc>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d059      	beq.n	8005c60 <osMessageQueueNew+0xfc>
    mem = -1;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d029      	beq.n	8005c0c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d012      	beq.n	8005be6 <osMessageQueueNew+0x82>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005bc6:	d90e      	bls.n	8005be6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d302      	bcc.n	8005be6 <osMessageQueueNew+0x82>
        mem = 1;
 8005be0:	2301      	movs	r3, #1
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	e014      	b.n	8005c10 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d110      	bne.n	8005c10 <osMessageQueueNew+0xac>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10c      	bne.n	8005c10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d108      	bne.n	8005c10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <osMessageQueueNew+0xac>
          mem = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	e001      	b.n	8005c10 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d10b      	bne.n	8005c2e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2100      	movs	r1, #0
 8005c20:	9100      	str	r1, [sp, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fa5d 	bl	80060e4 <xQueueGenericCreateStatic>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c2c:	e008      	b.n	8005c40 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005c34:	2200      	movs	r2, #0
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fada 	bl	80061f2 <xQueueGenericCreate>
 8005c3e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00c      	beq.n	8005c60 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	e001      	b.n	8005c58 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c58:	69f9      	ldr	r1, [r7, #28]
 8005c5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c5c:	f001 f94a 	bl	8006ef4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3728      	adds	r7, #40	@ 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200006e0 	.word	0x200006e0

08005c70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	@ 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c88:	f3ef 8305 	mrs	r3, IPSR
 8005c8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c8e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10f      	bne.n	8005cb4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c94:	f3ef 8310 	mrs	r3, PRIMASK
 8005c98:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d105      	bne.n	8005cac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d02c      	beq.n	8005d06 <osMessageQueuePut+0x96>
 8005cac:	4b28      	ldr	r3, [pc, #160]	@ (8005d50 <osMessageQueuePut+0xe0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d128      	bne.n	8005d06 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <osMessageQueuePut+0x56>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <osMessageQueuePut+0x56>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005cc6:	f06f 0303 	mvn.w	r3, #3
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ccc:	e039      	b.n	8005d42 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005cd2:	f107 0210 	add.w	r2, r7, #16
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	6a38      	ldr	r0, [r7, #32]
 8005cdc:	f000 fcb6 	bl	800664c <xQueueGenericSendFromISR>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d003      	beq.n	8005cee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005ce6:	f06f 0302 	mvn.w	r3, #2
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cec:	e029      	b.n	8005d42 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d026      	beq.n	8005d42 <osMessageQueuePut+0xd2>
 8005cf4:	4b17      	ldr	r3, [pc, #92]	@ (8005d54 <osMessageQueuePut+0xe4>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d04:	e01d      	b.n	8005d42 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <osMessageQueuePut+0xa2>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005d12:	f06f 0303 	mvn.w	r3, #3
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d18:	e014      	b.n	8005d44 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	6a38      	ldr	r0, [r7, #32]
 8005d22:	f000 fb89 	bl	8006438 <xQueueGenericSend>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d00b      	beq.n	8005d44 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005d32:	f06f 0301 	mvn.w	r3, #1
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d38:	e004      	b.n	8005d44 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005d3a:	f06f 0302 	mvn.w	r3, #2
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d40:	e000      	b.n	8005d44 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d42:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3728      	adds	r7, #40	@ 0x28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200006e0 	.word	0x200006e0
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	@ 0x28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6e:	f3ef 8305 	mrs	r3, IPSR
 8005d72:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d74:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	617b      	str	r3, [r7, #20]
  return(result);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02c      	beq.n	8005dec <osMessageQueueGet+0x94>
 8005d92:	4b28      	ldr	r3, [pc, #160]	@ (8005e34 <osMessageQueueGet+0xdc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d128      	bne.n	8005dec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <osMessageQueueGet+0x54>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <osMessageQueueGet+0x54>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005dac:	f06f 0303 	mvn.w	r3, #3
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005db2:	e038      	b.n	8005e26 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005db8:	f107 0310 	add.w	r3, r7, #16
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	6a38      	ldr	r0, [r7, #32]
 8005dc2:	f000 fee7 	bl	8006b94 <xQueueReceiveFromISR>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d003      	beq.n	8005dd4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005dcc:	f06f 0302 	mvn.w	r3, #2
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dd2:	e028      	b.n	8005e26 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d025      	beq.n	8005e26 <osMessageQueueGet+0xce>
 8005dda:	4b17      	ldr	r3, [pc, #92]	@ (8005e38 <osMessageQueueGet+0xe0>)
 8005ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dea:	e01c      	b.n	8005e26 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <osMessageQueueGet+0xa0>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005df8:	f06f 0303 	mvn.w	r3, #3
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfe:	e013      	b.n	8005e28 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	6a38      	ldr	r0, [r7, #32]
 8005e06:	f000 fcc5 	bl	8006794 <xQueueReceive>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d00b      	beq.n	8005e28 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005e16:	f06f 0301 	mvn.w	r3, #1
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e1c:	e004      	b.n	8005e28 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005e1e:	f06f 0302 	mvn.w	r3, #2
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e24:	e000      	b.n	8005e28 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3728      	adds	r7, #40	@ 0x28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200006e0 	.word	0x200006e0
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a07      	ldr	r2, [pc, #28]	@ (8005e68 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4a06      	ldr	r2, [pc, #24]	@ (8005e6c <vApplicationGetIdleTaskMemory+0x30>)
 8005e52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	@ 0x80
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	200006e4 	.word	0x200006e4
 8005e6c:	2000078c 	.word	0x2000078c

08005e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a07      	ldr	r2, [pc, #28]	@ (8005e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4a06      	ldr	r2, [pc, #24]	@ (8005ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8005e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	2000098c 	.word	0x2000098c
 8005ea0:	20000a34 	.word	0x20000a34

08005ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f103 0208 	add.w	r2, r3, #8
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f103 0208 	add.w	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f103 0208 	add.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d103      	bne.n	8005f66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e00c      	b.n	8005f80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	e002      	b.n	8005f74 <vListInsert+0x2e>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d2f6      	bcs.n	8005f6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	601a      	str	r2, [r3, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6892      	ldr	r2, [r2, #8]
 8005fce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d103      	bne.n	8005fec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	b672      	cpsid	i
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	b662      	cpsie	i
 8006034:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800603c:	f002 fd26 	bl	8008a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	68f9      	ldr	r1, [r7, #12]
 800604a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	3b01      	subs	r3, #1
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22ff      	movs	r2, #255	@ 0xff
 8006080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	@ 0xff
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d114      	bne.n	80060bc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01a      	beq.n	80060d0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fcb6 	bl	8007a10 <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <xQueueGenericReset+0xd4>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	e009      	b.n	80060d0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3310      	adds	r3, #16
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff feef 	bl	8005ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3324      	adds	r3, #36	@ 0x24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff feea 	bl	8005ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060d0:	f002 fd12 	bl	8008af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060d4:	2301      	movs	r3, #1
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08e      	sub	sp, #56	@ 0x38
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10d      	bne.n	8006114 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	b672      	cpsid	i
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	b662      	cpsie	i
 800610c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	b672      	cpsid	i
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	b662      	cpsie	i
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <xQueueGenericCreateStatic+0x5e>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <xQueueGenericCreateStatic+0x62>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericCreateStatic+0x64>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10d      	bne.n	8006168 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	b672      	cpsid	i
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	b662      	cpsie	i
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <xQueueGenericCreateStatic+0x90>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueGenericCreateStatic+0x94>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueGenericCreateStatic+0x96>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	b672      	cpsid	i
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	b662      	cpsie	i
 8006192:	61fb      	str	r3, [r7, #28]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800619a:	2350      	movs	r3, #80	@ 0x50
 800619c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b50      	cmp	r3, #80	@ 0x50
 80061a2:	d00d      	beq.n	80061c0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	61bb      	str	r3, [r7, #24]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f848 	bl	8006278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3730      	adds	r7, #48	@ 0x30
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08a      	sub	sp, #40	@ 0x28
 80061f6:	af02      	add	r7, sp, #8
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	4613      	mov	r3, r2
 80061fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10d      	bne.n	8006222 <xQueueGenericCreate+0x30>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	b672      	cpsid	i
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	b662      	cpsie	i
 800621a:	613b      	str	r3, [r7, #16]
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	e7fd      	b.n	800621e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	e004      	b.n	8006238 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3350      	adds	r3, #80	@ 0x50
 800623c:	4618      	mov	r0, r3
 800623e:	f002 fd53 	bl	8008ce8 <pvPortMalloc>
 8006242:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	3350      	adds	r3, #80	@ 0x50
 8006252:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800625c:	79fa      	ldrb	r2, [r7, #7]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	4613      	mov	r3, r2
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f805 	bl	8006278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800626e:	69bb      	ldr	r3, [r7, #24]
	}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e002      	b.n	800629a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062a6:	2101      	movs	r1, #1
 80062a8:	69b8      	ldr	r0, [r7, #24]
 80062aa:	f7ff feaf 	bl	800600c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062de:	2300      	movs	r3, #0
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8a7 	bl	8006438 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	4603      	mov	r3, r0
 80062fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062fc:	2301      	movs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	461a      	mov	r2, r3
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f7ff ff71 	bl	80061f2 <xQueueGenericCreate>
 8006310:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ffd3 	bl	80062be <prvInitialiseMutex>

		return xNewQueue;
 8006318:	68fb      	ldr	r3, [r7, #12]
	}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006322:	b580      	push	{r7, lr}
 8006324:	b088      	sub	sp, #32
 8006326:	af02      	add	r7, sp, #8
 8006328:	4603      	mov	r3, r0
 800632a:	6039      	str	r1, [r7, #0]
 800632c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800632e:	2301      	movs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	6939      	ldr	r1, [r7, #16]
 8006340:	6978      	ldr	r0, [r7, #20]
 8006342:	f7ff fecf 	bl	80060e4 <xQueueGenericCreateStatic>
 8006346:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ffb8 	bl	80062be <prvInitialiseMutex>

		return xNewQueue;
 800634e:	68fb      	ldr	r3, [r7, #12]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	b672      	cpsid	i
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	b662      	cpsie	i
 800637e:	60fb      	str	r3, [r7, #12]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	689c      	ldr	r4, [r3, #8]
 800638a:	f001 fd0f 	bl	8007dac <xTaskGetCurrentTaskHandle>
 800638e:	4603      	mov	r3, r0
 8006390:	429c      	cmp	r4, r3
 8006392:	d111      	bne.n	80063b8 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	1e5a      	subs	r2, r3, #1
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d105      	bne.n	80063b2 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80063a6:	2300      	movs	r3, #0
 80063a8:	2200      	movs	r2, #0
 80063aa:	2100      	movs	r1, #0
 80063ac:	6938      	ldr	r0, [r7, #16]
 80063ae:	f000 f843 	bl	8006438 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80063b2:	2301      	movs	r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e001      	b.n	80063bc <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063bc:	697b      	ldr	r3, [r7, #20]
	}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd90      	pop	{r4, r7, pc}

080063c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063c6:	b590      	push	{r4, r7, lr}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10d      	bne.n	80063f6 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	b672      	cpsid	i
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	b662      	cpsie	i
 80063ee:	60fb      	str	r3, [r7, #12]
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	e7fd      	b.n	80063f2 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	689c      	ldr	r4, [r3, #8]
 80063fa:	f001 fcd7 	bl	8007dac <xTaskGetCurrentTaskHandle>
 80063fe:	4603      	mov	r3, r0
 8006400:	429c      	cmp	r4, r3
 8006402:	d107      	bne.n	8006414 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e00c      	b.n	800642e <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6938      	ldr	r0, [r7, #16]
 8006418:	f000 faa4 	bl	8006964 <xQueueSemaphoreTake>
 800641c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800642e:	697b      	ldr	r3, [r7, #20]
	}
 8006430:	4618      	mov	r0, r3
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08e      	sub	sp, #56	@ 0x38
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10d      	bne.n	8006470 <xQueueGenericSend+0x38>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <xQueueGenericSend+0x46>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <xQueueGenericSend+0x4a>
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <xQueueGenericSend+0x4c>
 8006482:	2300      	movs	r3, #0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10d      	bne.n	80064a4 <xQueueGenericSend+0x6c>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	b672      	cpsid	i
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	b662      	cpsie	i
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x7a>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0x7e>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0x80>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <xQueueGenericSend+0xa0>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	b672      	cpsid	i
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	b662      	cpsie	i
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	e7fd      	b.n	80064d4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d8:	f001 fc78 	bl	8007dcc <xTaskGetSchedulerState>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <xQueueGenericSend+0xb0>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <xQueueGenericSend+0xb4>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <xQueueGenericSend+0xb6>
 80064ec:	2300      	movs	r3, #0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <xQueueGenericSend+0xd6>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	b672      	cpsid	i
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	b662      	cpsie	i
 8006506:	61fb      	str	r3, [r7, #28]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800650e:	f002 fabd 	bl	8008a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651a:	429a      	cmp	r2, r3
 800651c:	d302      	bcc.n	8006524 <xQueueGenericSend+0xec>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d129      	bne.n	8006578 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800652a:	f000 fbd3 	bl	8006cd4 <prvCopyDataToQueue>
 800652e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	3324      	adds	r3, #36	@ 0x24
 800653c:	4618      	mov	r0, r3
 800653e:	f001 fa67 	bl	8007a10 <xTaskRemoveFromEventList>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d013      	beq.n	8006570 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006548:	4b3f      	ldr	r3, [pc, #252]	@ (8006648 <xQueueGenericSend+0x210>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	e00a      	b.n	8006570 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006560:	4b39      	ldr	r3, [pc, #228]	@ (8006648 <xQueueGenericSend+0x210>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006570:	f002 fac2 	bl	8008af8 <vPortExitCritical>
				return pdPASS;
 8006574:	2301      	movs	r3, #1
 8006576:	e063      	b.n	8006640 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800657e:	f002 fabb 	bl	8008af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006582:	2300      	movs	r3, #0
 8006584:	e05c      	b.n	8006640 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	4618      	mov	r0, r3
 8006592:	f001 faa3 	bl	8007adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800659a:	f002 faad 	bl	8008af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800659e:	f000 ffff 	bl	80075a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065a2:	f002 fa73 	bl	8008a8c <vPortEnterCritical>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d103      	bne.n	80065bc <xQueueGenericSend+0x184>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065c2:	b25b      	sxtb	r3, r3
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d103      	bne.n	80065d2 <xQueueGenericSend+0x19a>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065d2:	f002 fa91 	bl	8008af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065d6:	1d3a      	adds	r2, r7, #4
 80065d8:	f107 0314 	add.w	r3, r7, #20
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fa92 	bl	8007b08 <xTaskCheckForTimeOut>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d124      	bne.n	8006634 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ec:	f000 fc6a 	bl	8006ec4 <prvIsQueueFull>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	3310      	adds	r3, #16
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4611      	mov	r1, r2
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f9b0 	bl	8007964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006604:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006606:	f000 fbf5 	bl	8006df4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800660a:	f000 ffd7 	bl	80075bc <xTaskResumeAll>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f47f af7c 	bne.w	800650e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006616:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <xQueueGenericSend+0x210>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	e772      	b.n	800650e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800662a:	f000 fbe3 	bl	8006df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800662e:	f000 ffc5 	bl	80075bc <xTaskResumeAll>
 8006632:	e76c      	b.n	800650e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006636:	f000 fbdd 	bl	8006df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800663a:	f000 ffbf 	bl	80075bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800663e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006640:	4618      	mov	r0, r3
 8006642:	3738      	adds	r7, #56	@ 0x38
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08e      	sub	sp, #56	@ 0x38
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	b672      	cpsid	i
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	b662      	cpsie	i
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <xQueueGenericSendFromISR+0x42>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <xQueueGenericSendFromISR+0x46>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <xQueueGenericSendFromISR+0x48>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10d      	bne.n	80066b4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669c:	b672      	cpsid	i
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	b662      	cpsie	i
 80066ac:	623b      	str	r3, [r7, #32]
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <xQueueGenericSendFromISR+0x76>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSendFromISR+0x7a>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSendFromISR+0x7c>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10d      	bne.n	80066e8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	b672      	cpsid	i
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	b662      	cpsie	i
 80066e0:	61fb      	str	r3, [r7, #28]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e8:	f002 fab8 	bl	8008c5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066ec:	f3ef 8211 	mrs	r2, BASEPRI
 80066f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f4:	b672      	cpsid	i
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	b662      	cpsie	i
 8006704:	61ba      	str	r2, [r7, #24]
 8006706:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006708:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800670a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <xQueueGenericSendFromISR+0xd2>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d12c      	bne.n	8006778 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800672e:	f000 fad1 	bl	8006cd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006732:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d112      	bne.n	8006762 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d016      	beq.n	8006772 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	3324      	adds	r3, #36	@ 0x24
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f961 	bl	8007a10 <xTaskRemoveFromEventList>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00e      	beq.n	8006772 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e007      	b.n	8006772 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006762:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006766:	3301      	adds	r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	b25a      	sxtb	r2, r3
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006772:	2301      	movs	r3, #1
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006776:	e001      	b.n	800677c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006778:	2300      	movs	r3, #0
 800677a:	637b      	str	r3, [r7, #52]	@ 0x34
 800677c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006786:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800678a:	4618      	mov	r0, r3
 800678c:	3738      	adds	r7, #56	@ 0x38
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	@ 0x30
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10d      	bne.n	80067ca <xQueueReceive+0x36>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	b672      	cpsid	i
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	b662      	cpsie	i
 80067c2:	623b      	str	r3, [r7, #32]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <xQueueReceive+0x44>
 80067d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <xQueueReceive+0x48>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <xQueueReceive+0x4a>
 80067dc:	2300      	movs	r3, #0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <xQueueReceive+0x6a>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	b672      	cpsid	i
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	b662      	cpsie	i
 80067f6:	61fb      	str	r3, [r7, #28]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067fe:	f001 fae5 	bl	8007dcc <xTaskGetSchedulerState>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <xQueueReceive+0x7a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <xQueueReceive+0x7e>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <xQueueReceive+0x80>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <xQueueReceive+0xa0>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	61bb      	str	r3, [r7, #24]
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006834:	f002 f92a 	bl	8008a8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01f      	beq.n	8006884 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006848:	f000 faae 	bl	8006da8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	1e5a      	subs	r2, r3, #1
 8006850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006852:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00f      	beq.n	800687c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	3310      	adds	r3, #16
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f8d5 	bl	8007a10 <xTaskRemoveFromEventList>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800686c:	4b3c      	ldr	r3, [pc, #240]	@ (8006960 <xQueueReceive+0x1cc>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800687c:	f002 f93c 	bl	8008af8 <vPortExitCritical>
				return pdPASS;
 8006880:	2301      	movs	r3, #1
 8006882:	e069      	b.n	8006958 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d103      	bne.n	8006892 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800688a:	f002 f935 	bl	8008af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800688e:	2300      	movs	r3, #0
 8006890:	e062      	b.n	8006958 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006898:	f107 0310 	add.w	r3, r7, #16
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f91d 	bl	8007adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068a2:	2301      	movs	r3, #1
 80068a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068a6:	f002 f927 	bl	8008af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068aa:	f000 fe79 	bl	80075a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ae:	f002 f8ed 	bl	8008a8c <vPortEnterCritical>
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068b8:	b25b      	sxtb	r3, r3
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d103      	bne.n	80068c8 <xQueueReceive+0x134>
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d103      	bne.n	80068de <xQueueReceive+0x14a>
 80068d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068de:	f002 f90b 	bl	8008af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068e2:	1d3a      	adds	r2, r7, #4
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 f90c 	bl	8007b08 <xTaskCheckForTimeOut>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d123      	bne.n	800693e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068f8:	f000 face 	bl	8006e98 <prvIsQueueEmpty>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d017      	beq.n	8006932 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	3324      	adds	r3, #36	@ 0x24
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f82a 	bl	8007964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006912:	f000 fa6f 	bl	8006df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006916:	f000 fe51 	bl	80075bc <xTaskResumeAll>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d189      	bne.n	8006834 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006920:	4b0f      	ldr	r3, [pc, #60]	@ (8006960 <xQueueReceive+0x1cc>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	e780      	b.n	8006834 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006934:	f000 fa5e 	bl	8006df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006938:	f000 fe40 	bl	80075bc <xTaskResumeAll>
 800693c:	e77a      	b.n	8006834 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800693e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006940:	f000 fa58 	bl	8006df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006944:	f000 fe3a 	bl	80075bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800694a:	f000 faa5 	bl	8006e98 <prvIsQueueEmpty>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	f43f af6f 	beq.w	8006834 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006956:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006958:	4618      	mov	r0, r3
 800695a:	3730      	adds	r7, #48	@ 0x30
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	@ 0x38
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	b672      	cpsid	i
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	b662      	cpsie	i
 8006994:	623b      	str	r3, [r7, #32]
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	b672      	cpsid	i
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	b662      	cpsie	i
 80069b8:	61fb      	str	r3, [r7, #28]
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069c0:	f001 fa04 	bl	8007dcc <xTaskGetSchedulerState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <xQueueSemaphoreTake+0x6c>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <xQueueSemaphoreTake+0x70>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <xQueueSemaphoreTake+0x72>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	b672      	cpsid	i
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	b662      	cpsie	i
 80069ee:	61bb      	str	r3, [r7, #24]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069f6:	f002 f849 	bl	8008a8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d024      	beq.n	8006a50 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a16:	f001 fb5b 	bl	80080d0 <pvTaskIncrementMutexHeldCount>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00f      	beq.n	8006a48 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2a:	3310      	adds	r3, #16
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 ffef 	bl	8007a10 <xTaskRemoveFromEventList>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a38:	4b55      	ldr	r3, [pc, #340]	@ (8006b90 <xQueueSemaphoreTake+0x22c>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a48:	f002 f856 	bl	8008af8 <vPortExitCritical>
				return pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e09a      	b.n	8006b86 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d114      	bne.n	8006a80 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	b672      	cpsid	i
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	b662      	cpsie	i
 8006a70:	617b      	str	r3, [r7, #20]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a78:	f002 f83e 	bl	8008af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e082      	b.n	8006b86 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 f826 	bl	8007adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a94:	f002 f830 	bl	8008af8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a98:	f000 fd82 	bl	80075a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a9c:	f001 fff6 	bl	8008a8c <vPortEnterCritical>
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa6:	b25b      	sxtb	r3, r3
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d103      	bne.n	8006ab6 <xQueueSemaphoreTake+0x152>
 8006aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac2:	d103      	bne.n	8006acc <xQueueSemaphoreTake+0x168>
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006acc:	f002 f814 	bl	8008af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ad0:	463a      	mov	r2, r7
 8006ad2:	f107 030c 	add.w	r3, r7, #12
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f815 	bl	8007b08 <xTaskCheckForTimeOut>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d132      	bne.n	8006b4a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ae6:	f000 f9d7 	bl	8006e98 <prvIsQueueEmpty>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d026      	beq.n	8006b3e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006af8:	f001 ffc8 	bl	8008a8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 f981 	bl	8007e08 <xTaskPriorityInherit>
 8006b06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b08:	f001 fff6 	bl	8008af8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	3324      	adds	r3, #36	@ 0x24
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ff25 	bl	8007964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b1c:	f000 f96a 	bl	8006df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b20:	f000 fd4c 	bl	80075bc <xTaskResumeAll>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f af65 	bne.w	80069f6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006b2c:	4b18      	ldr	r3, [pc, #96]	@ (8006b90 <xQueueSemaphoreTake+0x22c>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	e75b      	b.n	80069f6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b40:	f000 f958 	bl	8006df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b44:	f000 fd3a 	bl	80075bc <xTaskResumeAll>
 8006b48:	e755      	b.n	80069f6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b4c:	f000 f952 	bl	8006df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b50:	f000 fd34 	bl	80075bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b56:	f000 f99f 	bl	8006e98 <prvIsQueueEmpty>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f43f af4a 	beq.w	80069f6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00d      	beq.n	8006b84 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006b68:	f001 ff90 	bl	8008a8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b6e:	f000 f899 	bl	8006ca4 <prvGetDisinheritPriorityAfterTimeout>
 8006b72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 fa20 	bl	8007fc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b80:	f001 ffba 	bl	8008af8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3738      	adds	r7, #56	@ 0x38
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	e000ed04 	.word	0xe000ed04

08006b94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	@ 0x38
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	b672      	cpsid	i
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	b662      	cpsie	i
 8006bbe:	623b      	str	r3, [r7, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <xQueueReceiveFromISR+0x40>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <xQueueReceiveFromISR+0x44>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <xQueueReceiveFromISR+0x46>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10d      	bne.n	8006bfa <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	b672      	cpsid	i
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	b662      	cpsie	i
 8006bf2:	61fb      	str	r3, [r7, #28]
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	e7fd      	b.n	8006bf6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bfa:	f002 f82f 	bl	8008c5c <vPortValidateInterruptPriority>
	__asm volatile
 8006bfe:	f3ef 8211 	mrs	r2, BASEPRI
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	61ba      	str	r2, [r7, #24]
 8006c18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d02f      	beq.n	8006c8a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c38:	f000 f8b6 	bl	8006da8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	1e5a      	subs	r2, r3, #1
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d112      	bne.n	8006c74 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	3310      	adds	r3, #16
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fed8 	bl	8007a10 <xTaskRemoveFromEventList>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e007      	b.n	8006c84 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	b25a      	sxtb	r2, r3
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006c84:	2301      	movs	r3, #1
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c88:	e001      	b.n	8006c8e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3738      	adds	r7, #56	@ 0x38
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e001      	b.n	8006cc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10d      	bne.n	8006d0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d14d      	bne.n	8006d96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f8ea 	bl	8007ed8 <xTaskPriorityDisinherit>
 8006d04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	e043      	b.n	8006d96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d119      	bne.n	8006d48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6858      	ldr	r0, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	f002 fa50 	bl	80091c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2c:	441a      	add	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d32b      	bcc.n	8006d96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	e026      	b.n	8006d96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68d8      	ldr	r0, [r3, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d50:	461a      	mov	r2, r3
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	f002 fa36 	bl	80091c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	425b      	negs	r3, r3
 8006d62:	441a      	add	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d207      	bcs.n	8006d84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	425b      	negs	r3, r3
 8006d7e:	441a      	add	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d105      	bne.n	8006d96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d9e:	697b      	ldr	r3, [r7, #20]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d018      	beq.n	8006dec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	441a      	add	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d303      	bcc.n	8006ddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68d9      	ldr	r1, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	461a      	mov	r2, r3
 8006de6:	6838      	ldr	r0, [r7, #0]
 8006de8:	f002 f9ec 	bl	80091c4 <memcpy>
	}
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dfc:	f001 fe46 	bl	8008a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e08:	e011      	b.n	8006e2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d012      	beq.n	8006e38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3324      	adds	r3, #36	@ 0x24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fdfa 	bl	8007a10 <xTaskRemoveFromEventList>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e22:	f000 fed9 	bl	8007bd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dce9      	bgt.n	8006e0a <prvUnlockQueue+0x16>
 8006e36:	e000      	b.n	8006e3a <prvUnlockQueue+0x46>
					break;
 8006e38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	22ff      	movs	r2, #255	@ 0xff
 8006e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e42:	f001 fe59 	bl	8008af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e46:	f001 fe21 	bl	8008a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e52:	e011      	b.n	8006e78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d012      	beq.n	8006e82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3310      	adds	r3, #16
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fdd5 	bl	8007a10 <xTaskRemoveFromEventList>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e6c:	f000 feb4 	bl	8007bd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dce9      	bgt.n	8006e54 <prvUnlockQueue+0x60>
 8006e80:	e000      	b.n	8006e84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	22ff      	movs	r2, #255	@ 0xff
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e8c:	f001 fe34 	bl	8008af8 <vPortExitCritical>
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ea0:	f001 fdf4 	bl	8008a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e001      	b.n	8006eb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eb6:	f001 fe1f 	bl	8008af8 <vPortExitCritical>

	return xReturn;
 8006eba:	68fb      	ldr	r3, [r7, #12]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ecc:	f001 fdde 	bl	8008a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d102      	bne.n	8006ee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	e001      	b.n	8006ee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ee6:	f001 fe07 	bl	8008af8 <vPortExitCritical>

	return xReturn;
 8006eea:	68fb      	ldr	r3, [r7, #12]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e014      	b.n	8006f2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f04:	4a0f      	ldr	r2, [pc, #60]	@ (8006f44 <vQueueAddToRegistry+0x50>)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f10:	490c      	ldr	r1, [pc, #48]	@ (8006f44 <vQueueAddToRegistry+0x50>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <vQueueAddToRegistry+0x50>)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	4413      	add	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f26:	e006      	b.n	8006f36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b07      	cmp	r3, #7
 8006f32:	d9e7      	bls.n	8006f04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000e34 	.word	0x20000e34

08006f48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f58:	f001 fd98 	bl	8008a8c <vPortEnterCritical>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f62:	b25b      	sxtb	r3, r3
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d103      	bne.n	8006f72 <vQueueWaitForMessageRestricted+0x2a>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d103      	bne.n	8006f88 <vQueueWaitForMessageRestricted+0x40>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f88:	f001 fdb6 	bl	8008af8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3324      	adds	r3, #36	@ 0x24
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fd09 	bl	80079b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f7ff ff26 	bl	8006df4 <prvUnlockQueue>
	}
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08e      	sub	sp, #56	@ 0x38
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10d      	bne.n	8006fe0 <xTaskCreateStatic+0x30>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	b672      	cpsid	i
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	b662      	cpsie	i
 8006fd8:	623b      	str	r3, [r7, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	e7fd      	b.n	8006fdc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <xTaskCreateStatic+0x52>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	b672      	cpsid	i
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	b662      	cpsie	i
 8006ffa:	61fb      	str	r3, [r7, #28]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007002:	23a8      	movs	r3, #168	@ 0xa8
 8007004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2ba8      	cmp	r3, #168	@ 0xa8
 800700a:	d00d      	beq.n	8007028 <xTaskCreateStatic+0x78>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	61bb      	str	r3, [r7, #24]
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	e7fd      	b.n	8007024 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007028:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01e      	beq.n	800706e <xTaskCreateStatic+0xbe>
 8007030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01b      	beq.n	800706e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007042:	2202      	movs	r2, #2
 8007044:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007048:	2300      	movs	r3, #0
 800704a:	9303      	str	r3, [sp, #12]
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	9302      	str	r3, [sp, #8]
 8007050:	f107 0314 	add.w	r3, r7, #20
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	68b9      	ldr	r1, [r7, #8]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f851 	bl	8007108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007068:	f000 f8f8 	bl	800725c <prvAddNewTaskToReadyList>
 800706c:	e001      	b.n	8007072 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007072:	697b      	ldr	r3, [r7, #20]
	}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	@ 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08c      	sub	sp, #48	@ 0x30
 8007080:	af04      	add	r7, sp, #16
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800708c:	88fb      	ldrh	r3, [r7, #6]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4618      	mov	r0, r3
 8007092:	f001 fe29 	bl	8008ce8 <pvPortMalloc>
 8007096:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00e      	beq.n	80070bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800709e:	20a8      	movs	r0, #168	@ 0xa8
 80070a0:	f001 fe22 	bl	8008ce8 <pvPortMalloc>
 80070a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80070b2:	e005      	b.n	80070c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070b4:	6978      	ldr	r0, [r7, #20]
 80070b6:	f001 fee5 	bl	8008e84 <vPortFree>
 80070ba:	e001      	b.n	80070c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d017      	beq.n	80070f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	2300      	movs	r3, #0
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	9302      	str	r3, [sp, #8]
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f80f 	bl	8007108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070ea:	69f8      	ldr	r0, [r7, #28]
 80070ec:	f000 f8b6 	bl	800725c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070f0:	2301      	movs	r3, #1
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	e002      	b.n	80070fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070f6:	f04f 33ff 	mov.w	r3, #4294967295
 80070fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070fc:	69bb      	ldr	r3, [r7, #24]
	}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	461a      	mov	r2, r3
 8007120:	21a5      	movs	r1, #165	@ 0xa5
 8007122:	f001 ffcb 	bl	80090bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007130:	440b      	add	r3, r1
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f023 0307 	bic.w	r3, r3, #7
 800713e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00d      	beq.n	8007166 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	b672      	cpsid	i
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	b662      	cpsie	i
 800715e:	617b      	str	r3, [r7, #20]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01f      	beq.n	80071ac <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	e012      	b.n	8007198 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	7819      	ldrb	r1, [r3, #0]
 800717a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	3334      	adds	r3, #52	@ 0x34
 8007182:	460a      	mov	r2, r1
 8007184:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d006      	beq.n	80071a0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3301      	adds	r3, #1
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	2b0f      	cmp	r3, #15
 800719c:	d9e9      	bls.n	8007172 <prvInitialiseNewTask+0x6a>
 800719e:	e000      	b.n	80071a2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80071a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071aa:	e003      	b.n	80071b4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	2b37      	cmp	r3, #55	@ 0x37
 80071b8:	d901      	bls.n	80071be <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ba:	2337      	movs	r3, #55	@ 0x37
 80071bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	2200      	movs	r2, #0
 80071ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fe85 	bl	8005ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	3318      	adds	r3, #24
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fe80 	bl	8005ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	2200      	movs	r2, #0
 8007206:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	3354      	adds	r3, #84	@ 0x54
 800720e:	224c      	movs	r2, #76	@ 0x4c
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 ff52 	bl	80090bc <memset>
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	4a0d      	ldr	r2, [pc, #52]	@ (8007250 <prvInitialiseNewTask+0x148>)
 800721c:	659a      	str	r2, [r3, #88]	@ 0x58
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	4a0c      	ldr	r2, [pc, #48]	@ (8007254 <prvInitialiseNewTask+0x14c>)
 8007222:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	4a0c      	ldr	r2, [pc, #48]	@ (8007258 <prvInitialiseNewTask+0x150>)
 8007228:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	69b8      	ldr	r0, [r7, #24]
 8007230:	f001 fb1e 	bl	8008870 <pxPortInitialiseStack>
 8007234:	4602      	mov	r2, r0
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800723a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007246:	bf00      	nop
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200050c0 	.word	0x200050c0
 8007254:	20005128 	.word	0x20005128
 8007258:	20005190 	.word	0x20005190

0800725c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007264:	f001 fc12 	bl	8008a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007268:	4b2d      	ldr	r3, [pc, #180]	@ (8007320 <prvAddNewTaskToReadyList+0xc4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	4a2c      	ldr	r2, [pc, #176]	@ (8007320 <prvAddNewTaskToReadyList+0xc4>)
 8007270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007272:	4b2c      	ldr	r3, [pc, #176]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800727a:	4a2a      	ldr	r2, [pc, #168]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007280:	4b27      	ldr	r3, [pc, #156]	@ (8007320 <prvAddNewTaskToReadyList+0xc4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d110      	bne.n	80072aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007288:	f000 fcca 	bl	8007c20 <prvInitialiseTaskLists>
 800728c:	e00d      	b.n	80072aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800728e:	4b26      	ldr	r3, [pc, #152]	@ (8007328 <prvAddNewTaskToReadyList+0xcc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007296:	4b23      	ldr	r3, [pc, #140]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d802      	bhi.n	80072aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072aa:	4b20      	ldr	r3, [pc, #128]	@ (800732c <prvAddNewTaskToReadyList+0xd0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	4a1e      	ldr	r2, [pc, #120]	@ (800732c <prvAddNewTaskToReadyList+0xd0>)
 80072b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072b4:	4b1d      	ldr	r3, [pc, #116]	@ (800732c <prvAddNewTaskToReadyList+0xd0>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007330 <prvAddNewTaskToReadyList+0xd4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <prvAddNewTaskToReadyList+0x74>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a18      	ldr	r2, [pc, #96]	@ (8007330 <prvAddNewTaskToReadyList+0xd4>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <prvAddNewTaskToReadyList+0xd8>)
 80072de:	441a      	add	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe fe09 	bl	8005efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072ec:	f001 fc04 	bl	8008af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <prvAddNewTaskToReadyList+0xcc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	429a      	cmp	r2, r3
 8007304:	d207      	bcs.n	8007316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007306:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <prvAddNewTaskToReadyList+0xdc>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20001348 	.word	0x20001348
 8007324:	20000e74 	.word	0x20000e74
 8007328:	20001354 	.word	0x20001354
 800732c:	20001364 	.word	0x20001364
 8007330:	20001350 	.word	0x20001350
 8007334:	20000e78 	.word	0x20000e78
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	@ 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10d      	bne.n	800736c <vTaskDelayUntil+0x30>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	b672      	cpsid	i
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	b662      	cpsie	i
 8007364:	617b      	str	r3, [r7, #20]
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	e7fd      	b.n	8007368 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <vTaskDelayUntil+0x52>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	b672      	cpsid	i
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	b662      	cpsie	i
 8007386:	613b      	str	r3, [r7, #16]
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	e7fd      	b.n	800738a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800738e:	4b2b      	ldr	r3, [pc, #172]	@ (800743c <vTaskDelayUntil+0x100>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <vTaskDelayUntil+0x76>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	60fb      	str	r3, [r7, #12]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 80073b2:	f000 f8f5 	bl	80075a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80073b6:	4b22      	ldr	r3, [pc, #136]	@ (8007440 <vTaskDelayUntil+0x104>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	4413      	add	r3, r2
 80073c4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d20b      	bcs.n	80073e8 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d211      	bcs.n	80073fe <vTaskDelayUntil+0xc2>
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d90d      	bls.n	80073fe <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e6:	e00a      	b.n	80073fe <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d303      	bcc.n	80073fa <vTaskDelayUntil+0xbe>
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d901      	bls.n	80073fe <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d006      	beq.n	8007418 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fe70 	bl	80080f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007418:	f000 f8d0 	bl	80075bc <xTaskResumeAll>
 800741c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d107      	bne.n	8007434 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8007424:	4b07      	ldr	r3, [pc, #28]	@ (8007444 <vTaskDelayUntil+0x108>)
 8007426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007434:	bf00      	nop
 8007436:	3728      	adds	r7, #40	@ 0x28
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20001370 	.word	0x20001370
 8007440:	2000134c 	.word	0x2000134c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01a      	beq.n	8007490 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800745a:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <vTaskDelay+0x68>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <vTaskDelay+0x36>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	b672      	cpsid	i
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	b662      	cpsie	i
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800747e:	f000 f88f 	bl	80075a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007482:	2100      	movs	r1, #0
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fe37 	bl	80080f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800748a:	f000 f897 	bl	80075bc <xTaskResumeAll>
 800748e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d107      	bne.n	80074a6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007496:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <vTaskDelay+0x6c>)
 8007498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20001370 	.word	0x20001370
 80074b4:	e000ed04 	.word	0xe000ed04

080074b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	@ 0x28
 80074bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074c6:	463a      	mov	r2, r7
 80074c8:	1d39      	adds	r1, r7, #4
 80074ca:	f107 0308 	add.w	r3, r7, #8
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fcb4 	bl	8005e3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	9202      	str	r2, [sp, #8]
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	2300      	movs	r3, #0
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	2300      	movs	r3, #0
 80074e4:	460a      	mov	r2, r1
 80074e6:	4926      	ldr	r1, [pc, #152]	@ (8007580 <vTaskStartScheduler+0xc8>)
 80074e8:	4826      	ldr	r0, [pc, #152]	@ (8007584 <vTaskStartScheduler+0xcc>)
 80074ea:	f7ff fd61 	bl	8006fb0 <xTaskCreateStatic>
 80074ee:	4603      	mov	r3, r0
 80074f0:	4a25      	ldr	r2, [pc, #148]	@ (8007588 <vTaskStartScheduler+0xd0>)
 80074f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074f4:	4b24      	ldr	r3, [pc, #144]	@ (8007588 <vTaskStartScheduler+0xd0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074fc:	2301      	movs	r3, #1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	e001      	b.n	8007506 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d102      	bne.n	8007512 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800750c:	f000 fe48 	bl	80081a0 <xTimerCreateTimerTask>
 8007510:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d11d      	bne.n	8007554 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751c:	b672      	cpsid	i
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	b662      	cpsie	i
 800752c:	613b      	str	r3, [r7, #16]
}
 800752e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007530:	4b16      	ldr	r3, [pc, #88]	@ (800758c <vTaskStartScheduler+0xd4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3354      	adds	r3, #84	@ 0x54
 8007536:	4a16      	ldr	r2, [pc, #88]	@ (8007590 <vTaskStartScheduler+0xd8>)
 8007538:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800753a:	4b16      	ldr	r3, [pc, #88]	@ (8007594 <vTaskStartScheduler+0xdc>)
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007542:	4b15      	ldr	r3, [pc, #84]	@ (8007598 <vTaskStartScheduler+0xe0>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007548:	4b14      	ldr	r3, [pc, #80]	@ (800759c <vTaskStartScheduler+0xe4>)
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800754e:	f001 fa1f 	bl	8008990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007552:	e011      	b.n	8007578 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d10d      	bne.n	8007578 <vTaskStartScheduler+0xc0>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	b672      	cpsid	i
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	b662      	cpsie	i
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <vTaskStartScheduler+0xbc>
}
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	08009340 	.word	0x08009340
 8007584:	08007bf1 	.word	0x08007bf1
 8007588:	2000136c 	.word	0x2000136c
 800758c:	20000e74 	.word	0x20000e74
 8007590:	20000010 	.word	0x20000010
 8007594:	20001368 	.word	0x20001368
 8007598:	20001354 	.word	0x20001354
 800759c:	2000134c 	.word	0x2000134c

080075a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075a4:	4b04      	ldr	r3, [pc, #16]	@ (80075b8 <vTaskSuspendAll+0x18>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a03      	ldr	r2, [pc, #12]	@ (80075b8 <vTaskSuspendAll+0x18>)
 80075ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80075ae:	bf00      	nop
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20001370 	.word	0x20001370

080075bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ca:	4b43      	ldr	r3, [pc, #268]	@ (80076d8 <xTaskResumeAll+0x11c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10d      	bne.n	80075ee <xTaskResumeAll+0x32>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	b672      	cpsid	i
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	b662      	cpsie	i
 80075e6:	603b      	str	r3, [r7, #0]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075ee:	f001 fa4d 	bl	8008a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075f2:	4b39      	ldr	r3, [pc, #228]	@ (80076d8 <xTaskResumeAll+0x11c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	4a37      	ldr	r2, [pc, #220]	@ (80076d8 <xTaskResumeAll+0x11c>)
 80075fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075fc:	4b36      	ldr	r3, [pc, #216]	@ (80076d8 <xTaskResumeAll+0x11c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d162      	bne.n	80076ca <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007604:	4b35      	ldr	r3, [pc, #212]	@ (80076dc <xTaskResumeAll+0x120>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d05e      	beq.n	80076ca <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800760c:	e02f      	b.n	800766e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760e:	4b34      	ldr	r3, [pc, #208]	@ (80076e0 <xTaskResumeAll+0x124>)
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3318      	adds	r3, #24
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fccc 	bl	8005fb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3304      	adds	r3, #4
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fcc7 	bl	8005fb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762e:	4b2d      	ldr	r3, [pc, #180]	@ (80076e4 <xTaskResumeAll+0x128>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d903      	bls.n	800763e <xTaskResumeAll+0x82>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	4a2a      	ldr	r2, [pc, #168]	@ (80076e4 <xTaskResumeAll+0x128>)
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4a27      	ldr	r2, [pc, #156]	@ (80076e8 <xTaskResumeAll+0x12c>)
 800764c:	441a      	add	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3304      	adds	r3, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f7fe fc52 	bl	8005efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765e:	4b23      	ldr	r3, [pc, #140]	@ (80076ec <xTaskResumeAll+0x130>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007668:	4b21      	ldr	r3, [pc, #132]	@ (80076f0 <xTaskResumeAll+0x134>)
 800766a:	2201      	movs	r2, #1
 800766c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800766e:	4b1c      	ldr	r3, [pc, #112]	@ (80076e0 <xTaskResumeAll+0x124>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1cb      	bne.n	800760e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800767c:	f000 fb76 	bl	8007d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007680:	4b1c      	ldr	r3, [pc, #112]	@ (80076f4 <xTaskResumeAll+0x138>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800768c:	f000 f846 	bl	800771c <xTaskIncrementTick>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007696:	4b16      	ldr	r3, [pc, #88]	@ (80076f0 <xTaskResumeAll+0x134>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3b01      	subs	r3, #1
 80076a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f1      	bne.n	800768c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80076a8:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <xTaskResumeAll+0x138>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076ae:	4b10      	ldr	r3, [pc, #64]	@ (80076f0 <xTaskResumeAll+0x134>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076ba:	4b0f      	ldr	r3, [pc, #60]	@ (80076f8 <xTaskResumeAll+0x13c>)
 80076bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076ca:	f001 fa15 	bl	8008af8 <vPortExitCritical>

	return xAlreadyYielded;
 80076ce:	68bb      	ldr	r3, [r7, #8]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20001370 	.word	0x20001370
 80076dc:	20001348 	.word	0x20001348
 80076e0:	20001308 	.word	0x20001308
 80076e4:	20001350 	.word	0x20001350
 80076e8:	20000e78 	.word	0x20000e78
 80076ec:	20000e74 	.word	0x20000e74
 80076f0:	2000135c 	.word	0x2000135c
 80076f4:	20001358 	.word	0x20001358
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007702:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <xTaskGetTickCount+0x1c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007708:	687b      	ldr	r3, [r7, #4]
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	2000134c 	.word	0x2000134c

0800771c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007726:	4b50      	ldr	r3, [pc, #320]	@ (8007868 <xTaskIncrementTick+0x14c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 808c 	bne.w	8007848 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007730:	4b4e      	ldr	r3, [pc, #312]	@ (800786c <xTaskIncrementTick+0x150>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3301      	adds	r3, #1
 8007736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007738:	4a4c      	ldr	r2, [pc, #304]	@ (800786c <xTaskIncrementTick+0x150>)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d123      	bne.n	800778c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007744:	4b4a      	ldr	r3, [pc, #296]	@ (8007870 <xTaskIncrementTick+0x154>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <xTaskIncrementTick+0x4e>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	b672      	cpsid	i
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	b662      	cpsie	i
 8007762:	603b      	str	r3, [r7, #0]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <xTaskIncrementTick+0x4a>
 800776a:	4b41      	ldr	r3, [pc, #260]	@ (8007870 <xTaskIncrementTick+0x154>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	4b40      	ldr	r3, [pc, #256]	@ (8007874 <xTaskIncrementTick+0x158>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a3e      	ldr	r2, [pc, #248]	@ (8007870 <xTaskIncrementTick+0x154>)
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	4a3e      	ldr	r2, [pc, #248]	@ (8007874 <xTaskIncrementTick+0x158>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4b3e      	ldr	r3, [pc, #248]	@ (8007878 <xTaskIncrementTick+0x15c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a3c      	ldr	r2, [pc, #240]	@ (8007878 <xTaskIncrementTick+0x15c>)
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f000 faf0 	bl	8007d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800778c:	4b3b      	ldr	r3, [pc, #236]	@ (800787c <xTaskIncrementTick+0x160>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d349      	bcc.n	800782a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007796:	4b36      	ldr	r3, [pc, #216]	@ (8007870 <xTaskIncrementTick+0x154>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a0:	4b36      	ldr	r3, [pc, #216]	@ (800787c <xTaskIncrementTick+0x160>)
 80077a2:	f04f 32ff 	mov.w	r2, #4294967295
 80077a6:	601a      	str	r2, [r3, #0]
					break;
 80077a8:	e03f      	b.n	800782a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077aa:	4b31      	ldr	r3, [pc, #196]	@ (8007870 <xTaskIncrementTick+0x154>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d203      	bcs.n	80077ca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077c2:	4a2e      	ldr	r2, [pc, #184]	@ (800787c <xTaskIncrementTick+0x160>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077c8:	e02f      	b.n	800782a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fbf2 	bl	8005fb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3318      	adds	r3, #24
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fbe9 	bl	8005fb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b25      	ldr	r3, [pc, #148]	@ (8007880 <xTaskIncrementTick+0x164>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d903      	bls.n	80077fa <xTaskIncrementTick+0xde>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	4a22      	ldr	r2, [pc, #136]	@ (8007880 <xTaskIncrementTick+0x164>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a1f      	ldr	r2, [pc, #124]	@ (8007884 <xTaskIncrementTick+0x168>)
 8007808:	441a      	add	r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7fe fb74 	bl	8005efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781a:	4b1b      	ldr	r3, [pc, #108]	@ (8007888 <xTaskIncrementTick+0x16c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	429a      	cmp	r2, r3
 8007822:	d3b8      	bcc.n	8007796 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007828:	e7b5      	b.n	8007796 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800782a:	4b17      	ldr	r3, [pc, #92]	@ (8007888 <xTaskIncrementTick+0x16c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	4914      	ldr	r1, [pc, #80]	@ (8007884 <xTaskIncrementTick+0x168>)
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d907      	bls.n	8007852 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007842:	2301      	movs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	e004      	b.n	8007852 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007848:	4b10      	ldr	r3, [pc, #64]	@ (800788c <xTaskIncrementTick+0x170>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	4a0f      	ldr	r2, [pc, #60]	@ (800788c <xTaskIncrementTick+0x170>)
 8007850:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007852:	4b0f      	ldr	r3, [pc, #60]	@ (8007890 <xTaskIncrementTick+0x174>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800785a:	2301      	movs	r3, #1
 800785c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800785e:	697b      	ldr	r3, [r7, #20]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20001370 	.word	0x20001370
 800786c:	2000134c 	.word	0x2000134c
 8007870:	20001300 	.word	0x20001300
 8007874:	20001304 	.word	0x20001304
 8007878:	20001360 	.word	0x20001360
 800787c:	20001368 	.word	0x20001368
 8007880:	20001350 	.word	0x20001350
 8007884:	20000e78 	.word	0x20000e78
 8007888:	20000e74 	.word	0x20000e74
 800788c:	20001358 	.word	0x20001358
 8007890:	2000135c 	.word	0x2000135c

08007894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800789a:	4b2c      	ldr	r3, [pc, #176]	@ (800794c <vTaskSwitchContext+0xb8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007950 <vTaskSwitchContext+0xbc>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078a8:	e049      	b.n	800793e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80078aa:	4b29      	ldr	r3, [pc, #164]	@ (8007950 <vTaskSwitchContext+0xbc>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b0:	4b28      	ldr	r3, [pc, #160]	@ (8007954 <vTaskSwitchContext+0xc0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e013      	b.n	80078e0 <vTaskSwitchContext+0x4c>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10d      	bne.n	80078da <vTaskSwitchContext+0x46>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	b672      	cpsid	i
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	b662      	cpsie	i
 80078d2:	607b      	str	r3, [r7, #4]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <vTaskSwitchContext+0x42>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3b01      	subs	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	491d      	ldr	r1, [pc, #116]	@ (8007958 <vTaskSwitchContext+0xc4>)
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0e1      	beq.n	80078b8 <vTaskSwitchContext+0x24>
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <vTaskSwitchContext+0xc4>)
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	3308      	adds	r3, #8
 8007916:	429a      	cmp	r2, r3
 8007918:	d104      	bne.n	8007924 <vTaskSwitchContext+0x90>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	605a      	str	r2, [r3, #4]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <vTaskSwitchContext+0xc8>)
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4a09      	ldr	r2, [pc, #36]	@ (8007954 <vTaskSwitchContext+0xc0>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007934:	4b09      	ldr	r3, [pc, #36]	@ (800795c <vTaskSwitchContext+0xc8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3354      	adds	r3, #84	@ 0x54
 800793a:	4a09      	ldr	r2, [pc, #36]	@ (8007960 <vTaskSwitchContext+0xcc>)
 800793c:	6013      	str	r3, [r2, #0]
}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20001370 	.word	0x20001370
 8007950:	2000135c 	.word	0x2000135c
 8007954:	20001350 	.word	0x20001350
 8007958:	20000e78 	.word	0x20000e78
 800795c:	20000e74 	.word	0x20000e74
 8007960:	20000010 	.word	0x20000010

08007964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007978:	b672      	cpsid	i
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	b662      	cpsie	i
 8007988:	60fb      	str	r3, [r7, #12]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007990:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <vTaskPlaceOnEventList+0x4c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3318      	adds	r3, #24
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7fe fad4 	bl	8005f46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800799e:	2101      	movs	r1, #1
 80079a0:	6838      	ldr	r0, [r7, #0]
 80079a2:	f000 fba9 	bl	80080f8 <prvAddCurrentTaskToDelayedList>
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000e74 	.word	0x20000e74

080079b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10d      	bne.n	80079e2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ca:	b672      	cpsid	i
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	b662      	cpsie	i
 80079da:	617b      	str	r3, [r7, #20]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079e2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <vTaskPlaceOnEventListRestricted+0x58>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3318      	adds	r3, #24
 80079e8:	4619      	mov	r1, r3
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7fe fa87 	bl	8005efe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80079f6:	f04f 33ff 	mov.w	r3, #4294967295
 80079fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	68b8      	ldr	r0, [r7, #8]
 8007a00:	f000 fb7a 	bl	80080f8 <prvAddCurrentTaskToDelayedList>
	}
 8007a04:	bf00      	nop
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000e74 	.word	0x20000e74

08007a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10d      	bne.n	8007a42 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	b672      	cpsid	i
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	b662      	cpsie	i
 8007a3a:	60fb      	str	r3, [r7, #12]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3318      	adds	r3, #24
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fab6 	bl	8005fb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac4 <xTaskRemoveFromEventList+0xb4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d11d      	bne.n	8007a90 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe faad 	bl	8005fb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a62:	4b19      	ldr	r3, [pc, #100]	@ (8007ac8 <xTaskRemoveFromEventList+0xb8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d903      	bls.n	8007a72 <xTaskRemoveFromEventList+0x62>
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ac8 <xTaskRemoveFromEventList+0xb8>)
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4a13      	ldr	r2, [pc, #76]	@ (8007acc <xTaskRemoveFromEventList+0xbc>)
 8007a80:	441a      	add	r2, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7fe fa38 	bl	8005efe <vListInsertEnd>
 8007a8e:	e005      	b.n	8007a9c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	3318      	adds	r3, #24
 8007a94:	4619      	mov	r1, r3
 8007a96:	480e      	ldr	r0, [pc, #56]	@ (8007ad0 <xTaskRemoveFromEventList+0xc0>)
 8007a98:	f7fe fa31 	bl	8005efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <xTaskRemoveFromEventList+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d905      	bls.n	8007ab6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007aae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad8 <xTaskRemoveFromEventList+0xc8>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e001      	b.n	8007aba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007aba:	697b      	ldr	r3, [r7, #20]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20001370 	.word	0x20001370
 8007ac8:	20001350 	.word	0x20001350
 8007acc:	20000e78 	.word	0x20000e78
 8007ad0:	20001308 	.word	0x20001308
 8007ad4:	20000e74 	.word	0x20000e74
 8007ad8:	2000135c 	.word	0x2000135c

08007adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ae4:	4b06      	ldr	r3, [pc, #24]	@ (8007b00 <vTaskInternalSetTimeOutState+0x24>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007aec:	4b05      	ldr	r3, [pc, #20]	@ (8007b04 <vTaskInternalSetTimeOutState+0x28>)
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	605a      	str	r2, [r3, #4]
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20001360 	.word	0x20001360
 8007b04:	2000134c 	.word	0x2000134c

08007b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10d      	bne.n	8007b34 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	e7fd      	b.n	8007b30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10d      	bne.n	8007b56 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	b672      	cpsid	i
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	b662      	cpsie	i
 8007b4e:	60fb      	str	r3, [r7, #12]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007b56:	f000 ff99 	bl	8008a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd0 <xTaskCheckForTimeOut+0xc8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d102      	bne.n	8007b7a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	e023      	b.n	8007bc2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b15      	ldr	r3, [pc, #84]	@ (8007bd4 <xTaskCheckForTimeOut+0xcc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d007      	beq.n	8007b96 <xTaskCheckForTimeOut+0x8e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d302      	bcc.n	8007b96 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	e015      	b.n	8007bc2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d20b      	bcs.n	8007bb8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	1ad2      	subs	r2, r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff ff95 	bl	8007adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	e004      	b.n	8007bc2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bc2:	f000 ff99 	bl	8008af8 <vPortExitCritical>

	return xReturn;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	2000134c 	.word	0x2000134c
 8007bd4:	20001360 	.word	0x20001360

08007bd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bdc:	4b03      	ldr	r3, [pc, #12]	@ (8007bec <vTaskMissedYield+0x14>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	bf00      	nop
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	2000135c 	.word	0x2000135c

08007bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bf8:	f000 f852 	bl	8007ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bfc:	4b06      	ldr	r3, [pc, #24]	@ (8007c18 <prvIdleTask+0x28>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d9f9      	bls.n	8007bf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <prvIdleTask+0x2c>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c14:	e7f0      	b.n	8007bf8 <prvIdleTask+0x8>
 8007c16:	bf00      	nop
 8007c18:	20000e78 	.word	0x20000e78
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	e00c      	b.n	8007c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4a12      	ldr	r2, [pc, #72]	@ (8007c80 <prvInitialiseTaskLists+0x60>)
 8007c38:	4413      	add	r3, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe f932 	bl	8005ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3301      	adds	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b37      	cmp	r3, #55	@ 0x37
 8007c4a:	d9ef      	bls.n	8007c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c4c:	480d      	ldr	r0, [pc, #52]	@ (8007c84 <prvInitialiseTaskLists+0x64>)
 8007c4e:	f7fe f929 	bl	8005ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c52:	480d      	ldr	r0, [pc, #52]	@ (8007c88 <prvInitialiseTaskLists+0x68>)
 8007c54:	f7fe f926 	bl	8005ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c58:	480c      	ldr	r0, [pc, #48]	@ (8007c8c <prvInitialiseTaskLists+0x6c>)
 8007c5a:	f7fe f923 	bl	8005ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c5e:	480c      	ldr	r0, [pc, #48]	@ (8007c90 <prvInitialiseTaskLists+0x70>)
 8007c60:	f7fe f920 	bl	8005ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c64:	480b      	ldr	r0, [pc, #44]	@ (8007c94 <prvInitialiseTaskLists+0x74>)
 8007c66:	f7fe f91d 	bl	8005ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c98 <prvInitialiseTaskLists+0x78>)
 8007c6c:	4a05      	ldr	r2, [pc, #20]	@ (8007c84 <prvInitialiseTaskLists+0x64>)
 8007c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c70:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <prvInitialiseTaskLists+0x7c>)
 8007c72:	4a05      	ldr	r2, [pc, #20]	@ (8007c88 <prvInitialiseTaskLists+0x68>)
 8007c74:	601a      	str	r2, [r3, #0]
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000e78 	.word	0x20000e78
 8007c84:	200012d8 	.word	0x200012d8
 8007c88:	200012ec 	.word	0x200012ec
 8007c8c:	20001308 	.word	0x20001308
 8007c90:	2000131c 	.word	0x2000131c
 8007c94:	20001334 	.word	0x20001334
 8007c98:	20001300 	.word	0x20001300
 8007c9c:	20001304 	.word	0x20001304

08007ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca6:	e019      	b.n	8007cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ca8:	f000 fef0 	bl	8008a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cac:	4b10      	ldr	r3, [pc, #64]	@ (8007cf0 <prvCheckTasksWaitingTermination+0x50>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe f97d 	bl	8005fb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <prvCheckTasksWaitingTermination+0x54>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf4 <prvCheckTasksWaitingTermination+0x54>)
 8007cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x58>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x58>)
 8007cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cd2:	f000 ff11 	bl	8008af8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f810 	bl	8007cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x58>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e1      	bne.n	8007ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	2000131c 	.word	0x2000131c
 8007cf4:	20001348 	.word	0x20001348
 8007cf8:	20001330 	.word	0x20001330

08007cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3354      	adds	r3, #84	@ 0x54
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 f9df 	bl	80090cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d108      	bne.n	8007d2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f8b1 	bl	8008e84 <vPortFree>
				vPortFree( pxTCB );
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 f8ae 	bl	8008e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d28:	e01b      	b.n	8007d62 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d103      	bne.n	8007d3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 f8a5 	bl	8008e84 <vPortFree>
	}
 8007d3a:	e012      	b.n	8007d62 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d00d      	beq.n	8007d62 <prvDeleteTCB+0x66>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <prvDeleteTCB+0x62>
	}
 8007d62:	bf00      	nop
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <prvResetNextTaskUnblockTime+0x38>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <prvResetNextTaskUnblockTime+0x3c>)
 8007d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d84:	e008      	b.n	8007d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d86:	4b07      	ldr	r3, [pc, #28]	@ (8007da4 <prvResetNextTaskUnblockTime+0x38>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4a04      	ldr	r2, [pc, #16]	@ (8007da8 <prvResetNextTaskUnblockTime+0x3c>)
 8007d96:	6013      	str	r3, [r2, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	20001300 	.word	0x20001300
 8007da8:	20001368 	.word	0x20001368

08007dac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007db2:	4b05      	ldr	r3, [pc, #20]	@ (8007dc8 <xTaskGetCurrentTaskHandle+0x1c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007db8:	687b      	ldr	r3, [r7, #4]
	}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000e74 	.word	0x20000e74

08007dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e00 <xTaskGetSchedulerState+0x34>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	e008      	b.n	8007df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de0:	4b08      	ldr	r3, [pc, #32]	@ (8007e04 <xTaskGetSchedulerState+0x38>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007de8:	2302      	movs	r3, #2
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	e001      	b.n	8007df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dee:	2300      	movs	r3, #0
 8007df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007df2:	687b      	ldr	r3, [r7, #4]
	}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20001354 	.word	0x20001354
 8007e04:	20001370 	.word	0x20001370

08007e08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d051      	beq.n	8007ec2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e22:	4b2a      	ldr	r3, [pc, #168]	@ (8007ecc <xTaskPriorityInherit+0xc4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d241      	bcs.n	8007eb0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	db06      	blt.n	8007e42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e34:	4b25      	ldr	r3, [pc, #148]	@ (8007ecc <xTaskPriorityInherit+0xc4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6959      	ldr	r1, [r3, #20]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed0 <xTaskPriorityInherit+0xc8>)
 8007e54:	4413      	add	r3, r2
 8007e56:	4299      	cmp	r1, r3
 8007e58:	d122      	bne.n	8007ea0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f8aa 	bl	8005fb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e64:	4b19      	ldr	r3, [pc, #100]	@ (8007ecc <xTaskPriorityInherit+0xc4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e72:	4b18      	ldr	r3, [pc, #96]	@ (8007ed4 <xTaskPriorityInherit+0xcc>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <xTaskPriorityInherit+0x7a>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	4a15      	ldr	r2, [pc, #84]	@ (8007ed4 <xTaskPriorityInherit+0xcc>)
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4a10      	ldr	r2, [pc, #64]	@ (8007ed0 <xTaskPriorityInherit+0xc8>)
 8007e90:	441a      	add	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fe f830 	bl	8005efe <vListInsertEnd>
 8007e9e:	e004      	b.n	8007eaa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <xTaskPriorityInherit+0xc4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	e008      	b.n	8007ec2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007eb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ecc <xTaskPriorityInherit+0xc4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d201      	bcs.n	8007ec2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000e74 	.word	0x20000e74
 8007ed0:	20000e78 	.word	0x20000e78
 8007ed4:	20001350 	.word	0x20001350

08007ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d05c      	beq.n	8007fa8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eee:	4b31      	ldr	r3, [pc, #196]	@ (8007fb4 <xTaskPriorityDisinherit+0xdc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d00d      	beq.n	8007f14 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	b672      	cpsid	i
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	b662      	cpsie	i
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10d      	bne.n	8007f38 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	b672      	cpsid	i
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	b662      	cpsie	i
 8007f30:	60bb      	str	r3, [r7, #8]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	1e5a      	subs	r2, r3, #1
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d02c      	beq.n	8007fa8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d128      	bne.n	8007fa8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe f82c 	bl	8005fb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f78:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb8 <xTaskPriorityDisinherit+0xe0>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d903      	bls.n	8007f88 <xTaskPriorityDisinherit+0xb0>
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb8 <xTaskPriorityDisinherit+0xe0>)
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4a09      	ldr	r2, [pc, #36]	@ (8007fbc <xTaskPriorityDisinherit+0xe4>)
 8007f96:	441a      	add	r2, r3
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7fd ffad 	bl	8005efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fa8:	697b      	ldr	r3, [r7, #20]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000e74 	.word	0x20000e74
 8007fb8:	20001350 	.word	0x20001350
 8007fbc:	20000e78 	.word	0x20000e78

08007fc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d070      	beq.n	80080ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10d      	bne.n	8007ffc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	b672      	cpsid	i
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	b662      	cpsie	i
 8007ff4:	60fb      	str	r3, [r7, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	429a      	cmp	r2, r3
 8008004:	d902      	bls.n	800800c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	e002      	b.n	8008012 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008010:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	429a      	cmp	r2, r3
 800801a:	d04e      	beq.n	80080ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	429a      	cmp	r2, r3
 8008024:	d149      	bne.n	80080ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008026:	4b27      	ldr	r3, [pc, #156]	@ (80080c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	429a      	cmp	r2, r3
 800802e:	d10d      	bne.n	800804c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	b672      	cpsid	i
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	b662      	cpsie	i
 8008044:	60bb      	str	r3, [r7, #8]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008050:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	db04      	blt.n	800806a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	6959      	ldr	r1, [r3, #20]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a13      	ldr	r2, [pc, #76]	@ (80080c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800807a:	4413      	add	r3, r2
 800807c:	4299      	cmp	r1, r3
 800807e:	d11c      	bne.n	80080ba <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	3304      	adds	r3, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7fd ff97 	bl	8005fb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808e:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d903      	bls.n	800809e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	4a0c      	ldr	r2, [pc, #48]	@ (80080cc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4a07      	ldr	r2, [pc, #28]	@ (80080c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80080ac:	441a      	add	r2, r3
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f7fd ff22 	bl	8005efe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080ba:	bf00      	nop
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000e74 	.word	0x20000e74
 80080c8:	20000e78 	.word	0x20000e78
 80080cc:	20001350 	.word	0x20001350

080080d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080d4:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080e2:	3201      	adds	r2, #1
 80080e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80080e6:	4b03      	ldr	r3, [pc, #12]	@ (80080f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80080e8:	681b      	ldr	r3, [r3, #0]
	}
 80080ea:	4618      	mov	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000e74 	.word	0x20000e74

080080f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008102:	4b21      	ldr	r3, [pc, #132]	@ (8008188 <prvAddCurrentTaskToDelayedList+0x90>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008108:	4b20      	ldr	r3, [pc, #128]	@ (800818c <prvAddCurrentTaskToDelayedList+0x94>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3304      	adds	r3, #4
 800810e:	4618      	mov	r0, r3
 8008110:	f7fd ff52 	bl	8005fb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d10a      	bne.n	8008132 <prvAddCurrentTaskToDelayedList+0x3a>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008122:	4b1a      	ldr	r3, [pc, #104]	@ (800818c <prvAddCurrentTaskToDelayedList+0x94>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4819      	ldr	r0, [pc, #100]	@ (8008190 <prvAddCurrentTaskToDelayedList+0x98>)
 800812c:	f7fd fee7 	bl	8005efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008130:	e026      	b.n	8008180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800813a:	4b14      	ldr	r3, [pc, #80]	@ (800818c <prvAddCurrentTaskToDelayedList+0x94>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	429a      	cmp	r2, r3
 8008148:	d209      	bcs.n	800815e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800814a:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b0f      	ldr	r3, [pc, #60]	@ (800818c <prvAddCurrentTaskToDelayedList+0x94>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f7fd fef5 	bl	8005f46 <vListInsert>
}
 800815c:	e010      	b.n	8008180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800815e:	4b0e      	ldr	r3, [pc, #56]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4b0a      	ldr	r3, [pc, #40]	@ (800818c <prvAddCurrentTaskToDelayedList+0x94>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fd feeb 	bl	8005f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008170:	4b0a      	ldr	r3, [pc, #40]	@ (800819c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	429a      	cmp	r2, r3
 8008178:	d202      	bcs.n	8008180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800817a:	4a08      	ldr	r2, [pc, #32]	@ (800819c <prvAddCurrentTaskToDelayedList+0xa4>)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6013      	str	r3, [r2, #0]
}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	2000134c 	.word	0x2000134c
 800818c:	20000e74 	.word	0x20000e74
 8008190:	20001334 	.word	0x20001334
 8008194:	20001304 	.word	0x20001304
 8008198:	20001300 	.word	0x20001300
 800819c:	20001368 	.word	0x20001368

080081a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	@ 0x28
 80081a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081aa:	f000 fb21 	bl	80087f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008228 <xTimerCreateTimerTask+0x88>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d021      	beq.n	80081fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081be:	1d3a      	adds	r2, r7, #4
 80081c0:	f107 0108 	add.w	r1, r7, #8
 80081c4:	f107 030c 	add.w	r3, r7, #12
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fd fe51 	bl	8005e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	9202      	str	r2, [sp, #8]
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	2302      	movs	r3, #2
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	460a      	mov	r2, r1
 80081e0:	4912      	ldr	r1, [pc, #72]	@ (800822c <xTimerCreateTimerTask+0x8c>)
 80081e2:	4813      	ldr	r0, [pc, #76]	@ (8008230 <xTimerCreateTimerTask+0x90>)
 80081e4:	f7fe fee4 	bl	8006fb0 <xTaskCreateStatic>
 80081e8:	4603      	mov	r3, r0
 80081ea:	4a12      	ldr	r2, [pc, #72]	@ (8008234 <xTimerCreateTimerTask+0x94>)
 80081ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081ee:	4b11      	ldr	r3, [pc, #68]	@ (8008234 <xTimerCreateTimerTask+0x94>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081f6:	2301      	movs	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10d      	bne.n	800821c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008204:	b672      	cpsid	i
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	b662      	cpsie	i
 8008214:	613b      	str	r3, [r7, #16]
}
 8008216:	bf00      	nop
 8008218:	bf00      	nop
 800821a:	e7fd      	b.n	8008218 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800821c:	697b      	ldr	r3, [r7, #20]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200013a4 	.word	0x200013a4
 800822c:	08009348 	.word	0x08009348
 8008230:	08008379 	.word	0x08008379
 8008234:	200013a8 	.word	0x200013a8

08008238 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	@ 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10d      	bne.n	800826c <xTimerGenericCommand+0x34>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	b672      	cpsid	i
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	b662      	cpsie	i
 8008264:	623b      	str	r3, [r7, #32]
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	e7fd      	b.n	8008268 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800826c:	4b19      	ldr	r3, [pc, #100]	@ (80082d4 <xTimerGenericCommand+0x9c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d02a      	beq.n	80082ca <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b05      	cmp	r3, #5
 8008284:	dc18      	bgt.n	80082b8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008286:	f7ff fda1 	bl	8007dcc <xTaskGetSchedulerState>
 800828a:	4603      	mov	r3, r0
 800828c:	2b02      	cmp	r3, #2
 800828e:	d109      	bne.n	80082a4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008290:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <xTimerGenericCommand+0x9c>)
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	f107 0110 	add.w	r1, r7, #16
 8008298:	2300      	movs	r3, #0
 800829a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800829c:	f7fe f8cc 	bl	8006438 <xQueueGenericSend>
 80082a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80082a2:	e012      	b.n	80082ca <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082a4:	4b0b      	ldr	r3, [pc, #44]	@ (80082d4 <xTimerGenericCommand+0x9c>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	f107 0110 	add.w	r1, r7, #16
 80082ac:	2300      	movs	r3, #0
 80082ae:	2200      	movs	r2, #0
 80082b0:	f7fe f8c2 	bl	8006438 <xQueueGenericSend>
 80082b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80082b6:	e008      	b.n	80082ca <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082b8:	4b06      	ldr	r3, [pc, #24]	@ (80082d4 <xTimerGenericCommand+0x9c>)
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	f107 0110 	add.w	r1, r7, #16
 80082c0:	2300      	movs	r3, #0
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	f7fe f9c2 	bl	800664c <xQueueGenericSendFromISR>
 80082c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	@ 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200013a4 	.word	0x200013a4

080082d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af02      	add	r7, sp, #8
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e2:	4b24      	ldr	r3, [pc, #144]	@ (8008374 <prvProcessExpiredTimer+0x9c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd fe61 	bl	8005fb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d025      	beq.n	8008350 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	699a      	ldr	r2, [r3, #24]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	18d1      	adds	r1, r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	6978      	ldr	r0, [r7, #20]
 8008312:	f000 f8d7 	bl	80084c4 <prvInsertTimerInActiveList>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d022      	beq.n	8008362 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800831c:	2300      	movs	r3, #0
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	2300      	movs	r3, #0
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	2100      	movs	r1, #0
 8008326:	6978      	ldr	r0, [r7, #20]
 8008328:	f7ff ff86 	bl	8008238 <xTimerGenericCommand>
 800832c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d116      	bne.n	8008362 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	b672      	cpsid	i
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	b662      	cpsie	i
 8008348:	60fb      	str	r3, [r7, #12]
}
 800834a:	bf00      	nop
 800834c:	bf00      	nop
 800834e:	e7fd      	b.n	800834c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	6978      	ldr	r0, [r7, #20]
 8008368:	4798      	blx	r3
}
 800836a:	bf00      	nop
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2000139c 	.word	0x2000139c

08008378 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f859 	bl	800843c <prvGetNextExpireTime>
 800838a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f805 	bl	80083a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008396:	f000 f8d7 	bl	8008548 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800839a:	bf00      	nop
 800839c:	e7f0      	b.n	8008380 <prvTimerTask+0x8>
	...

080083a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083aa:	f7ff f8f9 	bl	80075a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f866 	bl	8008484 <prvSampleTimeNow>
 80083b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d130      	bne.n	8008422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <prvProcessTimerOrBlockTask+0x3c>
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d806      	bhi.n	80083dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083ce:	f7ff f8f5 	bl	80075bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff ff7f 	bl	80082d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083da:	e024      	b.n	8008426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <prvProcessTimerOrBlockTask+0x90>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <prvProcessTimerOrBlockTask+0x50>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <prvProcessTimerOrBlockTask+0x52>
 80083f0:	2300      	movs	r3, #0
 80083f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008434 <prvProcessTimerOrBlockTask+0x94>)
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	4619      	mov	r1, r3
 8008402:	f7fe fda1 	bl	8006f48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008406:	f7ff f8d9 	bl	80075bc <xTaskResumeAll>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008410:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <prvProcessTimerOrBlockTask+0x98>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
}
 8008420:	e001      	b.n	8008426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008422:	f7ff f8cb 	bl	80075bc <xTaskResumeAll>
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200013a0 	.word	0x200013a0
 8008434:	200013a4 	.word	0x200013a4
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008444:	4b0e      	ldr	r3, [pc, #56]	@ (8008480 <prvGetNextExpireTime+0x44>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <prvGetNextExpireTime+0x16>
 800844e:	2201      	movs	r2, #1
 8008450:	e000      	b.n	8008454 <prvGetNextExpireTime+0x18>
 8008452:	2200      	movs	r2, #0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008460:	4b07      	ldr	r3, [pc, #28]	@ (8008480 <prvGetNextExpireTime+0x44>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	e001      	b.n	8008470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	2000139c 	.word	0x2000139c

08008484 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800848c:	f7ff f936 	bl	80076fc <xTaskGetTickCount>
 8008490:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008492:	4b0b      	ldr	r3, [pc, #44]	@ (80084c0 <prvSampleTimeNow+0x3c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d205      	bcs.n	80084a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800849c:	f000 f940 	bl	8008720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e002      	b.n	80084ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084ae:	4a04      	ldr	r2, [pc, #16]	@ (80084c0 <prvSampleTimeNow+0x3c>)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084b4:	68fb      	ldr	r3, [r7, #12]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	200013ac 	.word	0x200013ac

080084c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d812      	bhi.n	8008510 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d302      	bcc.n	80084fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e01b      	b.n	8008536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084fe:	4b10      	ldr	r3, [pc, #64]	@ (8008540 <prvInsertTimerInActiveList+0x7c>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3304      	adds	r3, #4
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f7fd fd1c 	bl	8005f46 <vListInsert>
 800850e:	e012      	b.n	8008536 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d206      	bcs.n	8008526 <prvInsertTimerInActiveList+0x62>
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d302      	bcc.n	8008526 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008520:	2301      	movs	r3, #1
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	e007      	b.n	8008536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008526:	4b07      	ldr	r3, [pc, #28]	@ (8008544 <prvInsertTimerInActiveList+0x80>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3304      	adds	r3, #4
 800852e:	4619      	mov	r1, r3
 8008530:	4610      	mov	r0, r2
 8008532:	f7fd fd08 	bl	8005f46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008536:	697b      	ldr	r3, [r7, #20]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	200013a0 	.word	0x200013a0
 8008544:	2000139c 	.word	0x2000139c

08008548 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08e      	sub	sp, #56	@ 0x38
 800854c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800854e:	e0d4      	b.n	80086fa <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	da1b      	bge.n	800858e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008556:	1d3b      	adds	r3, r7, #4
 8008558:	3304      	adds	r3, #4
 800855a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800855c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10d      	bne.n	800857e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	b672      	cpsid	i
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	b662      	cpsie	i
 8008576:	61fb      	str	r3, [r7, #28]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800857e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008584:	6850      	ldr	r0, [r2, #4]
 8008586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008588:	6892      	ldr	r2, [r2, #8]
 800858a:	4611      	mov	r1, r2
 800858c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f2c0 80b2 	blt.w	80086fa <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800859a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	3304      	adds	r3, #4
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd fd06 	bl	8005fb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ac:	463b      	mov	r3, r7
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff ff68 	bl	8008484 <prvSampleTimeNow>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	f200 809b 	bhi.w	80086f4 <prvProcessReceivedCommands+0x1ac>
 80085be:	a201      	add	r2, pc, #4	@ (adr r2, 80085c4 <prvProcessReceivedCommands+0x7c>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085ed 	.word	0x080085ed
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	080085ed 	.word	0x080085ed
 80085d0:	08008667 	.word	0x08008667
 80085d4:	0800867b 	.word	0x0800867b
 80085d8:	080086cb 	.word	0x080086cb
 80085dc:	080085ed 	.word	0x080085ed
 80085e0:	080085ed 	.word	0x080085ed
 80085e4:	08008667 	.word	0x08008667
 80085e8:	0800867b 	.word	0x0800867b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	18d1      	adds	r1, r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800860a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800860c:	f7ff ff5a 	bl	80084c4 <prvInsertTimerInActiveList>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d070      	beq.n	80086f8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800861c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d065      	beq.n	80086f8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	441a      	add	r2, r3
 8008634:	2300      	movs	r3, #0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	2100      	movs	r1, #0
 800863c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800863e:	f7ff fdfb 	bl	8008238 <xTimerGenericCommand>
 8008642:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d156      	bne.n	80086f8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	b672      	cpsid	i
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	b662      	cpsie	i
 800865e:	61bb      	str	r3, [r7, #24]
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	e7fd      	b.n	8008662 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	b2da      	uxtb	r2, r3
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008678:	e03f      	b.n	80086fa <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	b2da      	uxtb	r2, r3
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10d      	bne.n	80086b6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	b672      	cpsid	i
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	b662      	cpsie	i
 80086ae:	617b      	str	r3, [r7, #20]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	18d1      	adds	r1, r2, r3
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c4:	f7ff fefe 	bl	80084c4 <prvInsertTimerInActiveList>
					break;
 80086c8:	e017      	b.n	80086fa <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80086d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086da:	f000 fbd3 	bl	8008e84 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086de:	e00c      	b.n	80086fa <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086f2:	e002      	b.n	80086fa <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <prvProcessReceivedCommands+0x1b2>
					break;
 80086f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086fa:	4b08      	ldr	r3, [pc, #32]	@ (800871c <prvProcessReceivedCommands+0x1d4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	1d39      	adds	r1, r7, #4
 8008700:	2200      	movs	r2, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe f846 	bl	8006794 <xQueueReceive>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	f47f af20 	bne.w	8008550 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	3730      	adds	r7, #48	@ 0x30
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200013a4 	.word	0x200013a4

08008720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008726:	e04b      	b.n	80087c0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008728:	4b2f      	ldr	r3, [pc, #188]	@ (80087e8 <prvSwitchTimerLists+0xc8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008732:	4b2d      	ldr	r3, [pc, #180]	@ (80087e8 <prvSwitchTimerLists+0xc8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3304      	adds	r3, #4
 8008740:	4618      	mov	r0, r3
 8008742:	f7fd fc39 	bl	8005fb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d031      	beq.n	80087c0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	429a      	cmp	r2, r3
 800876c:	d90e      	bls.n	800878c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800877a:	4b1b      	ldr	r3, [pc, #108]	@ (80087e8 <prvSwitchTimerLists+0xc8>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3304      	adds	r3, #4
 8008782:	4619      	mov	r1, r3
 8008784:	4610      	mov	r0, r2
 8008786:	f7fd fbde 	bl	8005f46 <vListInsert>
 800878a:	e019      	b.n	80087c0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800878c:	2300      	movs	r3, #0
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	2300      	movs	r3, #0
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	2100      	movs	r1, #0
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7ff fd4e 	bl	8008238 <xTimerGenericCommand>
 800879c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10d      	bne.n	80087c0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	b672      	cpsid	i
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	b662      	cpsie	i
 80087b8:	603b      	str	r3, [r7, #0]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087c0:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <prvSwitchTimerLists+0xc8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1ae      	bne.n	8008728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087ca:	4b07      	ldr	r3, [pc, #28]	@ (80087e8 <prvSwitchTimerLists+0xc8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087d0:	4b06      	ldr	r3, [pc, #24]	@ (80087ec <prvSwitchTimerLists+0xcc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a04      	ldr	r2, [pc, #16]	@ (80087e8 <prvSwitchTimerLists+0xc8>)
 80087d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087d8:	4a04      	ldr	r2, [pc, #16]	@ (80087ec <prvSwitchTimerLists+0xcc>)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6013      	str	r3, [r2, #0]
}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	2000139c 	.word	0x2000139c
 80087ec:	200013a0 	.word	0x200013a0

080087f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087f6:	f000 f949 	bl	8008a8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087fa:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <prvCheckForValidListAndQueue+0x60>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d120      	bne.n	8008844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008802:	4814      	ldr	r0, [pc, #80]	@ (8008854 <prvCheckForValidListAndQueue+0x64>)
 8008804:	f7fd fb4e 	bl	8005ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008808:	4813      	ldr	r0, [pc, #76]	@ (8008858 <prvCheckForValidListAndQueue+0x68>)
 800880a:	f7fd fb4b 	bl	8005ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800880e:	4b13      	ldr	r3, [pc, #76]	@ (800885c <prvCheckForValidListAndQueue+0x6c>)
 8008810:	4a10      	ldr	r2, [pc, #64]	@ (8008854 <prvCheckForValidListAndQueue+0x64>)
 8008812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008814:	4b12      	ldr	r3, [pc, #72]	@ (8008860 <prvCheckForValidListAndQueue+0x70>)
 8008816:	4a10      	ldr	r2, [pc, #64]	@ (8008858 <prvCheckForValidListAndQueue+0x68>)
 8008818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800881a:	2300      	movs	r3, #0
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4b11      	ldr	r3, [pc, #68]	@ (8008864 <prvCheckForValidListAndQueue+0x74>)
 8008820:	4a11      	ldr	r2, [pc, #68]	@ (8008868 <prvCheckForValidListAndQueue+0x78>)
 8008822:	2110      	movs	r1, #16
 8008824:	200a      	movs	r0, #10
 8008826:	f7fd fc5d 	bl	80060e4 <xQueueGenericCreateStatic>
 800882a:	4603      	mov	r3, r0
 800882c:	4a08      	ldr	r2, [pc, #32]	@ (8008850 <prvCheckForValidListAndQueue+0x60>)
 800882e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008830:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <prvCheckForValidListAndQueue+0x60>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008838:	4b05      	ldr	r3, [pc, #20]	@ (8008850 <prvCheckForValidListAndQueue+0x60>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	490b      	ldr	r1, [pc, #44]	@ (800886c <prvCheckForValidListAndQueue+0x7c>)
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fb58 	bl	8006ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008844:	f000 f958 	bl	8008af8 <vPortExitCritical>
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200013a4 	.word	0x200013a4
 8008854:	20001374 	.word	0x20001374
 8008858:	20001388 	.word	0x20001388
 800885c:	2000139c 	.word	0x2000139c
 8008860:	200013a0 	.word	0x200013a0
 8008864:	20001450 	.word	0x20001450
 8008868:	200013b0 	.word	0x200013b0
 800886c:	08009350 	.word	0x08009350

08008870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3b04      	subs	r3, #4
 8008880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3b04      	subs	r3, #4
 800888e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f023 0201 	bic.w	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3b04      	subs	r3, #4
 800889e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088a0:	4a0c      	ldr	r2, [pc, #48]	@ (80088d4 <pxPortInitialiseStack+0x64>)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3b14      	subs	r3, #20
 80088aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f06f 0202 	mvn.w	r2, #2
 80088be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3b20      	subs	r3, #32
 80088c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088c6:	68fb      	ldr	r3, [r7, #12]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	080088d9 	.word	0x080088d9

080088d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088e2:	4b15      	ldr	r3, [pc, #84]	@ (8008938 <prvTaskExitError+0x60>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d00d      	beq.n	8008908 <prvTaskExitError+0x30>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	b672      	cpsid	i
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	b662      	cpsie	i
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <prvTaskExitError+0x2c>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890c:	b672      	cpsid	i
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	b662      	cpsie	i
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008920:	bf00      	nop
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0fc      	beq.n	8008922 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	2000000c 	.word	0x2000000c
 800893c:	00000000 	.word	0x00000000

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	4770      	bx	lr
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst2>:
 8008960:	20000e74 	.word	0x20000e74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008968:	4808      	ldr	r0, [pc, #32]	@ (800898c <prvPortStartFirstTask+0x24>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8814 	msr	CONTROL, r0
 800897a:	b662      	cpsie	i
 800897c:	b661      	cpsie	f
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	df00      	svc	0
 8008988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800898a:	bf00      	nop
 800898c:	e000ed08 	.word	0xe000ed08

08008990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008996:	4b37      	ldr	r3, [pc, #220]	@ (8008a74 <xPortStartScheduler+0xe4>)
 8008998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	22ff      	movs	r2, #255	@ 0xff
 80089a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008a78 <xPortStartScheduler+0xe8>)
 80089bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089be:	4b2f      	ldr	r3, [pc, #188]	@ (8008a7c <xPortStartScheduler+0xec>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089c4:	e009      	b.n	80089da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80089c6:	4b2d      	ldr	r3, [pc, #180]	@ (8008a7c <xPortStartScheduler+0xec>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	4a2b      	ldr	r2, [pc, #172]	@ (8008a7c <xPortStartScheduler+0xec>)
 80089ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e2:	2b80      	cmp	r3, #128	@ 0x80
 80089e4:	d0ef      	beq.n	80089c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089e6:	4b25      	ldr	r3, [pc, #148]	@ (8008a7c <xPortStartScheduler+0xec>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1c3 0307 	rsb	r3, r3, #7
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d00d      	beq.n	8008a0e <xPortStartScheduler+0x7e>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	b672      	cpsid	i
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	b662      	cpsie	i
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008a7c <xPortStartScheduler+0xec>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	4a19      	ldr	r2, [pc, #100]	@ (8008a7c <xPortStartScheduler+0xec>)
 8008a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a18:	4b18      	ldr	r3, [pc, #96]	@ (8008a7c <xPortStartScheduler+0xec>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a20:	4a16      	ldr	r2, [pc, #88]	@ (8008a7c <xPortStartScheduler+0xec>)
 8008a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a2c:	4b14      	ldr	r3, [pc, #80]	@ (8008a80 <xPortStartScheduler+0xf0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a13      	ldr	r2, [pc, #76]	@ (8008a80 <xPortStartScheduler+0xf0>)
 8008a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a38:	4b11      	ldr	r3, [pc, #68]	@ (8008a80 <xPortStartScheduler+0xf0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a10      	ldr	r2, [pc, #64]	@ (8008a80 <xPortStartScheduler+0xf0>)
 8008a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a44:	f000 f8dc 	bl	8008c00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a48:	4b0e      	ldr	r3, [pc, #56]	@ (8008a84 <xPortStartScheduler+0xf4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a4e:	f000 f8fb 	bl	8008c48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a52:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <xPortStartScheduler+0xf8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a0c      	ldr	r2, [pc, #48]	@ (8008a88 <xPortStartScheduler+0xf8>)
 8008a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a5e:	f7ff ff83 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a62:	f7fe ff17 	bl	8007894 <vTaskSwitchContext>
	prvTaskExitError();
 8008a66:	f7ff ff37 	bl	80088d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	e000e400 	.word	0xe000e400
 8008a78:	200014a0 	.word	0x200014a0
 8008a7c:	200014a4 	.word	0x200014a4
 8008a80:	e000ed20 	.word	0xe000ed20
 8008a84:	2000000c 	.word	0x2000000c
 8008a88:	e000ef34 	.word	0xe000ef34

08008a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	b672      	cpsid	i
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	b662      	cpsie	i
 8008aa6:	607b      	str	r3, [r7, #4]
}
 8008aa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aaa:	4b11      	ldr	r3, [pc, #68]	@ (8008af0 <vPortEnterCritical+0x64>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8008af0 <vPortEnterCritical+0x64>)
 8008ab2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8008af0 <vPortEnterCritical+0x64>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d112      	bne.n	8008ae2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008abc:	4b0d      	ldr	r3, [pc, #52]	@ (8008af4 <vPortEnterCritical+0x68>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <vPortEnterCritical+0x56>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	b672      	cpsid	i
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	b662      	cpsie	i
 8008ada:	603b      	str	r3, [r7, #0]
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	e7fd      	b.n	8008ade <vPortEnterCritical+0x52>
	}
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	2000000c 	.word	0x2000000c
 8008af4:	e000ed04 	.word	0xe000ed04

08008af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008afe:	4b13      	ldr	r3, [pc, #76]	@ (8008b4c <vPortExitCritical+0x54>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10d      	bne.n	8008b22 <vPortExitCritical+0x2a>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	b672      	cpsid	i
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	b662      	cpsie	i
 8008b1a:	607b      	str	r3, [r7, #4]
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	e7fd      	b.n	8008b1e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008b22:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <vPortExitCritical+0x54>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	4a08      	ldr	r2, [pc, #32]	@ (8008b4c <vPortExitCritical+0x54>)
 8008b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <vPortExitCritical+0x54>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <vPortExitCritical+0x48>
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
}
 8008b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	2000000c 	.word	0x2000000c

08008b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b50:	f3ef 8009 	mrs	r0, PSP
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4b15      	ldr	r3, [pc, #84]	@ (8008bb0 <pxCurrentTCBConst>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	f01e 0f10 	tst.w	lr, #16
 8008b60:	bf08      	it	eq
 8008b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	6010      	str	r0, [r2, #0]
 8008b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b74:	b672      	cpsid	i
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	b662      	cpsie	i
 8008b84:	f7fe fe86 	bl	8007894 <vTaskSwitchContext>
 8008b88:	f04f 0000 	mov.w	r0, #0
 8008b8c:	f380 8811 	msr	BASEPRI, r0
 8008b90:	bc09      	pop	{r0, r3}
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	6808      	ldr	r0, [r1, #0]
 8008b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9a:	f01e 0f10 	tst.w	lr, #16
 8008b9e:	bf08      	it	eq
 8008ba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ba4:	f380 8809 	msr	PSP, r0
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop

08008bb0 <pxCurrentTCBConst>:
 8008bb0:	20000e74 	.word	0x20000e74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop

08008bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	b672      	cpsid	i
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	b662      	cpsie	i
 8008bd2:	607b      	str	r3, [r7, #4]
}
 8008bd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bd6:	f7fe fda1 	bl	800771c <xTaskIncrementTick>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008be0:	4b06      	ldr	r3, [pc, #24]	@ (8008bfc <SysTick_Handler+0x44>)
 8008be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	2300      	movs	r3, #0
 8008bea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	f383 8811 	msr	BASEPRI, r3
}
 8008bf2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c04:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <vPortSetupTimerInterrupt+0x34>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <vPortSetupTimerInterrupt+0x38>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c10:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <vPortSetupTimerInterrupt+0x3c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a0a      	ldr	r2, [pc, #40]	@ (8008c40 <vPortSetupTimerInterrupt+0x40>)
 8008c16:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1a:	099b      	lsrs	r3, r3, #6
 8008c1c:	4a09      	ldr	r2, [pc, #36]	@ (8008c44 <vPortSetupTimerInterrupt+0x44>)
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c22:	4b04      	ldr	r3, [pc, #16]	@ (8008c34 <vPortSetupTimerInterrupt+0x34>)
 8008c24:	2207      	movs	r2, #7
 8008c26:	601a      	str	r2, [r3, #0]
}
 8008c28:	bf00      	nop
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	e000e010 	.word	0xe000e010
 8008c38:	e000e018 	.word	0xe000e018
 8008c3c:	20000000 	.word	0x20000000
 8008c40:	10624dd3 	.word	0x10624dd3
 8008c44:	e000e014 	.word	0xe000e014

08008c48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c58 <vPortEnableVFP+0x10>
 8008c4c:	6801      	ldr	r1, [r0, #0]
 8008c4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c52:	6001      	str	r1, [r0, #0]
 8008c54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c56:	bf00      	nop
 8008c58:	e000ed88 	.word	0xe000ed88

08008c5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c62:	f3ef 8305 	mrs	r3, IPSR
 8008c66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b0f      	cmp	r3, #15
 8008c6c:	d917      	bls.n	8008c9e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd8 <vPortValidateInterruptPriority+0x7c>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c78:	4b18      	ldr	r3, [pc, #96]	@ (8008cdc <vPortValidateInterruptPriority+0x80>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	7afa      	ldrb	r2, [r7, #11]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d20d      	bcs.n	8008c9e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	b672      	cpsid	i
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	b662      	cpsie	i
 8008c96:	607b      	str	r3, [r7, #4]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c9e:	4b10      	ldr	r3, [pc, #64]	@ (8008ce0 <vPortValidateInterruptPriority+0x84>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce4 <vPortValidateInterruptPriority+0x88>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d90d      	bls.n	8008cca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	b672      	cpsid	i
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	b662      	cpsie	i
 8008cc2:	603b      	str	r3, [r7, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <vPortValidateInterruptPriority+0x6a>
	}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	e000e3f0 	.word	0xe000e3f0
 8008cdc:	200014a0 	.word	0x200014a0
 8008ce0:	e000ed0c 	.word	0xe000ed0c
 8008ce4:	200014a4 	.word	0x200014a4

08008ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	@ 0x28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cf4:	f7fe fc54 	bl	80075a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8008e70 <pvPortMalloc+0x188>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d00:	f000 f920 	bl	8008f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d04:	4b5b      	ldr	r3, [pc, #364]	@ (8008e74 <pvPortMalloc+0x18c>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 8094 	bne.w	8008e3a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d020      	beq.n	8008d5a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008d18:	2208      	movs	r2, #8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d017      	beq.n	8008d5a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f023 0307 	bic.w	r3, r3, #7
 8008d30:	3308      	adds	r3, #8
 8008d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <pvPortMalloc+0x72>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d42:	b672      	cpsid	i
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	b662      	cpsie	i
 8008d52:	617b      	str	r3, [r7, #20]
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	e7fd      	b.n	8008d56 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d06c      	beq.n	8008e3a <pvPortMalloc+0x152>
 8008d60:	4b45      	ldr	r3, [pc, #276]	@ (8008e78 <pvPortMalloc+0x190>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d867      	bhi.n	8008e3a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d6a:	4b44      	ldr	r3, [pc, #272]	@ (8008e7c <pvPortMalloc+0x194>)
 8008d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d6e:	4b43      	ldr	r3, [pc, #268]	@ (8008e7c <pvPortMalloc+0x194>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d74:	e004      	b.n	8008d80 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d903      	bls.n	8008d92 <pvPortMalloc+0xaa>
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f1      	bne.n	8008d76 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d92:	4b37      	ldr	r3, [pc, #220]	@ (8008e70 <pvPortMalloc+0x188>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d04e      	beq.n	8008e3a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2208      	movs	r2, #8
 8008da2:	4413      	add	r3, r2
 8008da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	1ad2      	subs	r2, r2, r3
 8008db6:	2308      	movs	r3, #8
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d922      	bls.n	8008e04 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00d      	beq.n	8008dec <pvPortMalloc+0x104>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	b672      	cpsid	i
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	b662      	cpsie	i
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	e7fd      	b.n	8008de8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	1ad2      	subs	r2, r2, r3
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dfe:	69b8      	ldr	r0, [r7, #24]
 8008e00:	f000 f902 	bl	8009008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e04:	4b1c      	ldr	r3, [pc, #112]	@ (8008e78 <pvPortMalloc+0x190>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008e78 <pvPortMalloc+0x190>)
 8008e10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e12:	4b19      	ldr	r3, [pc, #100]	@ (8008e78 <pvPortMalloc+0x190>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b1a      	ldr	r3, [pc, #104]	@ (8008e80 <pvPortMalloc+0x198>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d203      	bcs.n	8008e26 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e1e:	4b16      	ldr	r3, [pc, #88]	@ (8008e78 <pvPortMalloc+0x190>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a17      	ldr	r2, [pc, #92]	@ (8008e80 <pvPortMalloc+0x198>)
 8008e24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	4b12      	ldr	r3, [pc, #72]	@ (8008e74 <pvPortMalloc+0x18c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e3a:	f7fe fbbf 	bl	80075bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00d      	beq.n	8008e64 <pvPortMalloc+0x17c>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4c:	b672      	cpsid	i
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	b662      	cpsie	i
 8008e5c:	60fb      	str	r3, [r7, #12]
}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	e7fd      	b.n	8008e60 <pvPortMalloc+0x178>
	return pvReturn;
 8008e64:	69fb      	ldr	r3, [r7, #28]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3728      	adds	r7, #40	@ 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	200050b0 	.word	0x200050b0
 8008e74:	200050bc 	.word	0x200050bc
 8008e78:	200050b4 	.word	0x200050b4
 8008e7c:	200050a8 	.word	0x200050a8
 8008e80:	200050b8 	.word	0x200050b8

08008e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d04e      	beq.n	8008f34 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e96:	2308      	movs	r3, #8
 8008e98:	425b      	negs	r3, r3
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	4b24      	ldr	r3, [pc, #144]	@ (8008f3c <vPortFree+0xb8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4013      	ands	r3, r2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10d      	bne.n	8008ece <vPortFree+0x4a>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	60fb      	str	r3, [r7, #12]
}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	e7fd      	b.n	8008eca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00d      	beq.n	8008ef2 <vPortFree+0x6e>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	b672      	cpsid	i
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	b662      	cpsie	i
 8008eea:	60bb      	str	r3, [r7, #8]
}
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	e7fd      	b.n	8008eee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	4b11      	ldr	r3, [pc, #68]	@ (8008f3c <vPortFree+0xb8>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d019      	beq.n	8008f34 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d115      	bne.n	8008f34 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f3c <vPortFree+0xb8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	401a      	ands	r2, r3
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f18:	f7fe fb42 	bl	80075a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <vPortFree+0xbc>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4413      	add	r3, r2
 8008f26:	4a06      	ldr	r2, [pc, #24]	@ (8008f40 <vPortFree+0xbc>)
 8008f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f2a:	6938      	ldr	r0, [r7, #16]
 8008f2c:	f000 f86c 	bl	8009008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f30:	f7fe fb44 	bl	80075bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f34:	bf00      	nop
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	200050bc 	.word	0x200050bc
 8008f40:	200050b4 	.word	0x200050b4

08008f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f4a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f50:	4b27      	ldr	r3, [pc, #156]	@ (8008ff0 <prvHeapInit+0xac>)
 8008f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00c      	beq.n	8008f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3307      	adds	r3, #7
 8008f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	4a1f      	ldr	r2, [pc, #124]	@ (8008ff0 <prvHeapInit+0xac>)
 8008f74:	4413      	add	r3, r2
 8008f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff4 <prvHeapInit+0xb0>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f82:	4b1c      	ldr	r3, [pc, #112]	@ (8008ff4 <prvHeapInit+0xb0>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f90:	2208      	movs	r2, #8
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 0307 	bic.w	r3, r3, #7
 8008f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4a15      	ldr	r2, [pc, #84]	@ (8008ff8 <prvHeapInit+0xb4>)
 8008fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fa6:	4b14      	ldr	r3, [pc, #80]	@ (8008ff8 <prvHeapInit+0xb4>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2200      	movs	r2, #0
 8008fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fae:	4b12      	ldr	r3, [pc, #72]	@ (8008ff8 <prvHeapInit+0xb4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	1ad2      	subs	r2, r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <prvHeapInit+0xb4>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ffc <prvHeapInit+0xb8>)
 8008fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4a09      	ldr	r2, [pc, #36]	@ (8009000 <prvHeapInit+0xbc>)
 8008fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fdc:	4b09      	ldr	r3, [pc, #36]	@ (8009004 <prvHeapInit+0xc0>)
 8008fde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	200014a8 	.word	0x200014a8
 8008ff4:	200050a8 	.word	0x200050a8
 8008ff8:	200050b0 	.word	0x200050b0
 8008ffc:	200050b8 	.word	0x200050b8
 8009000:	200050b4 	.word	0x200050b4
 8009004:	200050bc 	.word	0x200050bc

08009008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009010:	4b28      	ldr	r3, [pc, #160]	@ (80090b4 <prvInsertBlockIntoFreeList+0xac>)
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	e002      	b.n	800901c <prvInsertBlockIntoFreeList+0x14>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	429a      	cmp	r2, r3
 8009024:	d8f7      	bhi.n	8009016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d108      	bne.n	800904a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	441a      	add	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	441a      	add	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d118      	bne.n	8009090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	4b15      	ldr	r3, [pc, #84]	@ (80090b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d00d      	beq.n	8009086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	e008      	b.n	8009098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009086:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e003      	b.n	8009098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	429a      	cmp	r2, r3
 800909e:	d002      	beq.n	80090a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090a6:	bf00      	nop
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	200050a8 	.word	0x200050a8
 80090b8:	200050b0 	.word	0x200050b0

080090bc <memset>:
 80090bc:	4402      	add	r2, r0
 80090be:	4603      	mov	r3, r0
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d100      	bne.n	80090c6 <memset+0xa>
 80090c4:	4770      	bx	lr
 80090c6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ca:	e7f9      	b.n	80090c0 <memset+0x4>

080090cc <_reclaim_reent>:
 80090cc:	4b29      	ldr	r3, [pc, #164]	@ (8009174 <_reclaim_reent+0xa8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4283      	cmp	r3, r0
 80090d2:	b570      	push	{r4, r5, r6, lr}
 80090d4:	4604      	mov	r4, r0
 80090d6:	d04b      	beq.n	8009170 <_reclaim_reent+0xa4>
 80090d8:	69c3      	ldr	r3, [r0, #28]
 80090da:	b1ab      	cbz	r3, 8009108 <_reclaim_reent+0x3c>
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	b16b      	cbz	r3, 80090fc <_reclaim_reent+0x30>
 80090e0:	2500      	movs	r5, #0
 80090e2:	69e3      	ldr	r3, [r4, #28]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	5959      	ldr	r1, [r3, r5]
 80090e8:	2900      	cmp	r1, #0
 80090ea:	d13b      	bne.n	8009164 <_reclaim_reent+0x98>
 80090ec:	3504      	adds	r5, #4
 80090ee:	2d80      	cmp	r5, #128	@ 0x80
 80090f0:	d1f7      	bne.n	80090e2 <_reclaim_reent+0x16>
 80090f2:	69e3      	ldr	r3, [r4, #28]
 80090f4:	4620      	mov	r0, r4
 80090f6:	68d9      	ldr	r1, [r3, #12]
 80090f8:	f000 f872 	bl	80091e0 <_free_r>
 80090fc:	69e3      	ldr	r3, [r4, #28]
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	b111      	cbz	r1, 8009108 <_reclaim_reent+0x3c>
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f86c 	bl	80091e0 <_free_r>
 8009108:	6961      	ldr	r1, [r4, #20]
 800910a:	b111      	cbz	r1, 8009112 <_reclaim_reent+0x46>
 800910c:	4620      	mov	r0, r4
 800910e:	f000 f867 	bl	80091e0 <_free_r>
 8009112:	69e1      	ldr	r1, [r4, #28]
 8009114:	b111      	cbz	r1, 800911c <_reclaim_reent+0x50>
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f862 	bl	80091e0 <_free_r>
 800911c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800911e:	b111      	cbz	r1, 8009126 <_reclaim_reent+0x5a>
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f85d 	bl	80091e0 <_free_r>
 8009126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009128:	b111      	cbz	r1, 8009130 <_reclaim_reent+0x64>
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f858 	bl	80091e0 <_free_r>
 8009130:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009132:	b111      	cbz	r1, 800913a <_reclaim_reent+0x6e>
 8009134:	4620      	mov	r0, r4
 8009136:	f000 f853 	bl	80091e0 <_free_r>
 800913a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800913c:	b111      	cbz	r1, 8009144 <_reclaim_reent+0x78>
 800913e:	4620      	mov	r0, r4
 8009140:	f000 f84e 	bl	80091e0 <_free_r>
 8009144:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009146:	b111      	cbz	r1, 800914e <_reclaim_reent+0x82>
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f849 	bl	80091e0 <_free_r>
 800914e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009150:	b111      	cbz	r1, 8009158 <_reclaim_reent+0x8c>
 8009152:	4620      	mov	r0, r4
 8009154:	f000 f844 	bl	80091e0 <_free_r>
 8009158:	6a23      	ldr	r3, [r4, #32]
 800915a:	b14b      	cbz	r3, 8009170 <_reclaim_reent+0xa4>
 800915c:	4620      	mov	r0, r4
 800915e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009162:	4718      	bx	r3
 8009164:	680e      	ldr	r6, [r1, #0]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 f83a 	bl	80091e0 <_free_r>
 800916c:	4631      	mov	r1, r6
 800916e:	e7bb      	b.n	80090e8 <_reclaim_reent+0x1c>
 8009170:	bd70      	pop	{r4, r5, r6, pc}
 8009172:	bf00      	nop
 8009174:	20000010 	.word	0x20000010

08009178 <__libc_init_array>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	4d0d      	ldr	r5, [pc, #52]	@ (80091b0 <__libc_init_array+0x38>)
 800917c:	4c0d      	ldr	r4, [pc, #52]	@ (80091b4 <__libc_init_array+0x3c>)
 800917e:	1b64      	subs	r4, r4, r5
 8009180:	10a4      	asrs	r4, r4, #2
 8009182:	2600      	movs	r6, #0
 8009184:	42a6      	cmp	r6, r4
 8009186:	d109      	bne.n	800919c <__libc_init_array+0x24>
 8009188:	4d0b      	ldr	r5, [pc, #44]	@ (80091b8 <__libc_init_array+0x40>)
 800918a:	4c0c      	ldr	r4, [pc, #48]	@ (80091bc <__libc_init_array+0x44>)
 800918c:	f000 f87e 	bl	800928c <_init>
 8009190:	1b64      	subs	r4, r4, r5
 8009192:	10a4      	asrs	r4, r4, #2
 8009194:	2600      	movs	r6, #0
 8009196:	42a6      	cmp	r6, r4
 8009198:	d105      	bne.n	80091a6 <__libc_init_array+0x2e>
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a0:	4798      	blx	r3
 80091a2:	3601      	adds	r6, #1
 80091a4:	e7ee      	b.n	8009184 <__libc_init_array+0xc>
 80091a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091aa:	4798      	blx	r3
 80091ac:	3601      	adds	r6, #1
 80091ae:	e7f2      	b.n	8009196 <__libc_init_array+0x1e>
 80091b0:	0800943c 	.word	0x0800943c
 80091b4:	0800943c 	.word	0x0800943c
 80091b8:	0800943c 	.word	0x0800943c
 80091bc:	08009440 	.word	0x08009440

080091c0 <__retarget_lock_acquire_recursive>:
 80091c0:	4770      	bx	lr

080091c2 <__retarget_lock_release_recursive>:
 80091c2:	4770      	bx	lr

080091c4 <memcpy>:
 80091c4:	440a      	add	r2, r1
 80091c6:	4291      	cmp	r1, r2
 80091c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091cc:	d100      	bne.n	80091d0 <memcpy+0xc>
 80091ce:	4770      	bx	lr
 80091d0:	b510      	push	{r4, lr}
 80091d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091da:	4291      	cmp	r1, r2
 80091dc:	d1f9      	bne.n	80091d2 <memcpy+0xe>
 80091de:	bd10      	pop	{r4, pc}

080091e0 <_free_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4605      	mov	r5, r0
 80091e4:	2900      	cmp	r1, #0
 80091e6:	d041      	beq.n	800926c <_free_r+0x8c>
 80091e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ec:	1f0c      	subs	r4, r1, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bfb8      	it	lt
 80091f2:	18e4      	addlt	r4, r4, r3
 80091f4:	f000 f83e 	bl	8009274 <__malloc_lock>
 80091f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009270 <_free_r+0x90>)
 80091fa:	6813      	ldr	r3, [r2, #0]
 80091fc:	b933      	cbnz	r3, 800920c <_free_r+0x2c>
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	6014      	str	r4, [r2, #0]
 8009202:	4628      	mov	r0, r5
 8009204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009208:	f000 b83a 	b.w	8009280 <__malloc_unlock>
 800920c:	42a3      	cmp	r3, r4
 800920e:	d908      	bls.n	8009222 <_free_r+0x42>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	1821      	adds	r1, r4, r0
 8009214:	428b      	cmp	r3, r1
 8009216:	bf01      	itttt	eq
 8009218:	6819      	ldreq	r1, [r3, #0]
 800921a:	685b      	ldreq	r3, [r3, #4]
 800921c:	1809      	addeq	r1, r1, r0
 800921e:	6021      	streq	r1, [r4, #0]
 8009220:	e7ed      	b.n	80091fe <_free_r+0x1e>
 8009222:	461a      	mov	r2, r3
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	b10b      	cbz	r3, 800922c <_free_r+0x4c>
 8009228:	42a3      	cmp	r3, r4
 800922a:	d9fa      	bls.n	8009222 <_free_r+0x42>
 800922c:	6811      	ldr	r1, [r2, #0]
 800922e:	1850      	adds	r0, r2, r1
 8009230:	42a0      	cmp	r0, r4
 8009232:	d10b      	bne.n	800924c <_free_r+0x6c>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	4401      	add	r1, r0
 8009238:	1850      	adds	r0, r2, r1
 800923a:	4283      	cmp	r3, r0
 800923c:	6011      	str	r1, [r2, #0]
 800923e:	d1e0      	bne.n	8009202 <_free_r+0x22>
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	6053      	str	r3, [r2, #4]
 8009246:	4408      	add	r0, r1
 8009248:	6010      	str	r0, [r2, #0]
 800924a:	e7da      	b.n	8009202 <_free_r+0x22>
 800924c:	d902      	bls.n	8009254 <_free_r+0x74>
 800924e:	230c      	movs	r3, #12
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	e7d6      	b.n	8009202 <_free_r+0x22>
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	1821      	adds	r1, r4, r0
 8009258:	428b      	cmp	r3, r1
 800925a:	bf04      	itt	eq
 800925c:	6819      	ldreq	r1, [r3, #0]
 800925e:	685b      	ldreq	r3, [r3, #4]
 8009260:	6063      	str	r3, [r4, #4]
 8009262:	bf04      	itt	eq
 8009264:	1809      	addeq	r1, r1, r0
 8009266:	6021      	streq	r1, [r4, #0]
 8009268:	6054      	str	r4, [r2, #4]
 800926a:	e7ca      	b.n	8009202 <_free_r+0x22>
 800926c:	bd38      	pop	{r3, r4, r5, pc}
 800926e:	bf00      	nop
 8009270:	200051fc 	.word	0x200051fc

08009274 <__malloc_lock>:
 8009274:	4801      	ldr	r0, [pc, #4]	@ (800927c <__malloc_lock+0x8>)
 8009276:	f7ff bfa3 	b.w	80091c0 <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	200051f8 	.word	0x200051f8

08009280 <__malloc_unlock>:
 8009280:	4801      	ldr	r0, [pc, #4]	@ (8009288 <__malloc_unlock+0x8>)
 8009282:	f7ff bf9e 	b.w	80091c2 <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	200051f8 	.word	0x200051f8

0800928c <_init>:
 800928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928e:	bf00      	nop
 8009290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009292:	bc08      	pop	{r3}
 8009294:	469e      	mov	lr, r3
 8009296:	4770      	bx	lr

08009298 <_fini>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	bf00      	nop
 800929c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800929e:	bc08      	pop	{r3}
 80092a0:	469e      	mov	lr, r3
 80092a2:	4770      	bx	lr
