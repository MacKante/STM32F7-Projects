
mcp2510_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080092f4  080092f4  0000a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009420  08009420  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009420  08009420  0000a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009428  08009428  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009428  08009428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009430  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005200  2000006c  0800949c  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000526c  0800949c  0000b26c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224c1  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004602  00000000  00000000  0002d55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  000335d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b63d  00000000  00000000  00034a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b7d  00000000  00000000  000600af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a624  00000000  00000000  00081c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b0  00000000  00000000  0018c294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00193544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	080092dc 	.word	0x080092dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	080092dc 	.word	0x080092dc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CAN_IC_READ_REGISTER>:
 * @param address: hex address of the register
 * 		  bufffer: to store value read
 * @retval None
 */
void CAN_IC_READ_REGISTER(uint8_t address, uint8_t* buffer, CANPeripheral *peripheral)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	73fb      	strb	r3, [r7, #15]
	// Packet includes 3 bytes
	// 1st byte: 0x03 (specifies as read instruction)
	// 2nd byte: address of register to read
	uint8_t packet[2] = {0x03, address};
 800053e:	2303      	movs	r3, #3
 8000540:	753b      	strb	r3, [r7, #20]
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	757b      	strb	r3, [r7, #21]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); // Initialize instruction by setting CS pin low
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	889b      	ldrh	r3, [r3, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f001 fc95 	bl	8001e80 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 2, 100U); //transmit
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6898      	ldr	r0, [r3, #8]
 800055a:	f107 0114 	add.w	r1, r7, #20
 800055e:	2364      	movs	r3, #100	@ 0x64
 8000560:	2202      	movs	r2, #2
 8000562:	f003 f830 	bl	80035c6 <HAL_SPI_Transmit>
 8000566:	4603      	mov	r3, r0
 8000568:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(peripheral->hspi, buffer, 1, 100U); //receive register contents
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6898      	ldr	r0, [r3, #8]
 800056e:	2364      	movs	r3, #100	@ 0x64
 8000570:	2201      	movs	r2, #1
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	f003 f995 	bl	80038a2 <HAL_SPI_Receive>
 8000578:	4603      	mov	r3, r0
 800057a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); // Terminate instruction by setting CS pin high
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	889b      	ldrh	r3, [r3, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	f001 fc7a 	bl	8001e80 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <CAN_IC_WRITE_REGISTER>:
 * @param address: hex address of the register
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER(uint8_t address, uint8_t value, CANPeripheral *peripheral)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	603a      	str	r2, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	460b      	mov	r3, r1
 80005a2:	71bb      	strb	r3, [r7, #6]
	// Packet includes 3 bytes
	// 1st byte: 0x02 (specifies as write instruction)
	// 2nd byte: address of register to write to
	// 3rd byte: value to write
	uint8_t packet[3] = {0x02, address, value};
 80005a4:	2302      	movs	r3, #2
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	737b      	strb	r3, [r7, #13]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); //set CS pin low
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f001 fc60 	bl	8001e80 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 3, 100U);	//transmit
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	6898      	ldr	r0, [r3, #8]
 80005c4:	f107 010c 	add.w	r1, r7, #12
 80005c8:	2364      	movs	r3, #100	@ 0x64
 80005ca:	2203      	movs	r2, #3
 80005cc:	f002 fffb 	bl	80035c6 <HAL_SPI_Transmit>
 80005d0:	4603      	mov	r3, r0
 80005d2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); //set CS pin high
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	f001 fc4e 	bl	8001e80 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <CAN_IC_WRITE_REGISTER_BITWISE>:
 * 		  mask: bit mask
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER_BITWISE(uint8_t address, uint8_t mask, uint8_t value, CANPeripheral *peripheral)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	460b      	mov	r3, r1
 80005fa:	71bb      	strb	r3, [r7, #6]
 80005fc:	4613      	mov	r3, r2
 80005fe:	717b      	strb	r3, [r7, #5]
	// 0x05 specifies bit-write instruction
	// mask specifies which bits can be modified (1 means bit can be modified)
	uint8_t packet[4] = {0x05, address, mask, value};
 8000600:	2305      	movs	r3, #5
 8000602:	723b      	strb	r3, [r7, #8]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	727b      	strb	r3, [r7, #9]
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	72bb      	strb	r3, [r7, #10]
 800060c:	797b      	ldrb	r3, [r7, #5]
 800060e:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); //set CS pin low
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	889b      	ldrh	r3, [r3, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f001 fc30 	bl	8001e80 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 4, 100U); //transmit
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	6898      	ldr	r0, [r3, #8]
 8000624:	f107 0108 	add.w	r1, r7, #8
 8000628:	2364      	movs	r3, #100	@ 0x64
 800062a:	2204      	movs	r2, #4
 800062c:	f002 ffcb 	bl	80035c6 <HAL_SPI_Transmit>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); //set CS pin high
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	889b      	ldrh	r3, [r3, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	f001 fc1e 	bl	8001e80 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <CAN_IC_READ_STATUS>:
 * @brief read status of CAN IC
 * @param buffer: buffer to write status
 * @retval None
 */
void CAN_IC_READ_STATUS(uint8_t* buffer, CANPeripheral *peripheral)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	// Packet includes read status instruction
	uint8_t packet[1] = {0xA0};
 8000656:	23a0      	movs	r3, #160	@ 0xa0
 8000658:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); // Initialize instruction by setting CS pin low
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	f001 fc0b 	bl	8001e80 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 1, 100U); //transmit
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	6898      	ldr	r0, [r3, #8]
 800066e:	f107 010c 	add.w	r1, r7, #12
 8000672:	2364      	movs	r3, #100	@ 0x64
 8000674:	2201      	movs	r2, #1
 8000676:	f002 ffa6 	bl	80035c6 <HAL_SPI_Transmit>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive(peripheral->hspi, buffer, 1, 100U); //receive register contents
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	6898      	ldr	r0, [r3, #8]
 8000682:	2364      	movs	r3, #100	@ 0x64
 8000684:	2201      	movs	r2, #1
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f003 f90b 	bl	80038a2 <HAL_SPI_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); // Terminate instruction by setting CS pin high
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 fbf0 	bl	8001e80 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <CAN_IC_RESET>:
/**
 * @brief Reset the CAN IC
 * @param None
 * @retval None
 */
void CAN_IC_RESET(CANPeripheral *peripheral) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// Packet includes reset instruction
	uint8_t packet[1] = {0xC0};
 80006b0:	23c0      	movs	r3, #192	@ 0xc0
 80006b2:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	f001 fbde 	bl	8001e80 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 1, 100U);  //reset IC to default
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6898      	ldr	r0, [r3, #8]
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2364      	movs	r3, #100	@ 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	f002 ff79 	bl	80035c6 <HAL_SPI_Transmit>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	889b      	ldrh	r3, [r3, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 fbcc 	bl	8001e80 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ConfigureCANSPI>:
  * @retval None
  * Configuration is as close to Elysia's CAN configuration whenever possible
  * TODO: add configuration verification and return value accordingly
  */
void ConfigureCANSPI(CANPeripheral *peripheral)
{	
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

	// oof this is a mind fook
	// TODO: ask violet of this settings

	// Ensure IC is out of reset state (128 clock cycles)
	HAL_Delay(100);
 80006f8:	2064      	movs	r0, #100	@ 0x64
 80006fa:	f001 f90f 	bl	800191c <HAL_Delay>

	// Tq = (2 x (BRP + 1)) / Fosc
	uint8_t CONFIG_CNF1 = 0x01; //BRP = 1 to make tq = 250ns and a SJW of 1Tq
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
	uint8_t CONFIG_CNF2 = 0x98; //PRSEG = 0, PHSEG1 = 3, SAM = 0, BTLMODE = 1
 8000702:	2398      	movs	r3, #152	@ 0x98
 8000704:	73bb      	strb	r3, [r7, #14]
	uint8_t CONFIG_CNF3 = 0x01; //WAFKIL disabled, PHSEG2 = 2 (BTL enabled) but PHSEG = 1 makes it backwards compatible???? wat
 8000706:	2301      	movs	r3, #1
 8000708:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef status;

	// Reset CAN IC
	CAN_IC_RESET(peripheral);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ffcc 	bl	80006a8 <CAN_IC_RESET>
	HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f001 f903 	bl	800191c <HAL_Delay>

	// CANSTAT.OPMOD must read as config mode to be able to write to the registers (0x80)
	uint8_t CANSTAT_STATUS = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	733b      	strb	r3, [r7, #12]
	CAN_IC_READ_REGISTER(CANSTAT, &CANSTAT_STATUS, peripheral);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4619      	mov	r1, r3
 8000722:	200e      	movs	r0, #14
 8000724:	f7ff ff04 	bl	8000530 <CAN_IC_READ_REGISTER>

	// Ensure IC is in configuration mode
	if ((CANSTAT_STATUS & 0xE0) != 0x80) {
 8000728:	7b3b      	ldrb	r3, [r7, #12]
 800072a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800072e:	2b80      	cmp	r3, #128	@ 0x80
 8000730:	d008      	beq.n	8000744 <ConfigureCANSPI+0x54>
		CAN_IC_WRITE_REGISTER_BITWISE(CANCTRL, 0xE0, 0x80, peripheral);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	21e0      	movs	r1, #224	@ 0xe0
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff ff57 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f001 f8ec 	bl	800191c <HAL_Delay>
	}

	// Base IC Configuration Registers
	CAN_IC_WRITE_REGISTER(CNF1, CONFIG_CNF1, peripheral); //configure CNF1
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	202a      	movs	r0, #42	@ 0x2a
 800074c:	f7ff ff22 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF2, CONFIG_CNF2, peripheral); //configure CNF2
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4619      	mov	r1, r3
 8000756:	2029      	movs	r0, #41	@ 0x29
 8000758:	f7ff ff1c 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF3, CONFIG_CNF3, peripheral); //configure CNF3
 800075c:	7b7b      	ldrb	r3, [r7, #13]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	2028      	movs	r0, #40	@ 0x28
 8000764:	f7ff ff16 	bl	8000594 <CAN_IC_WRITE_REGISTER>

	// Receive Buffer Configurations
	CAN_IC_WRITE_REGISTER_BITWISE(BFPCTRL, 0x0F, 0x0F, peripheral);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	220f      	movs	r2, #15
 800076c:	210f      	movs	r1, #15
 800076e:	200c      	movs	r0, #12
 8000770:	f7ff ff3c 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
	CAN_IC_WRITE_REGISTER_BITWISE(RXB0CTRL, 0x60, 0x60, peripheral);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2260      	movs	r2, #96	@ 0x60
 8000778:	2160      	movs	r1, #96	@ 0x60
 800077a:	2060      	movs	r0, #96	@ 0x60
 800077c:	f7ff ff36 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
	CAN_IC_WRITE_REGISTER_BITWISE(RXB1CTRL, 0x60, 0x60, peripheral);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2260      	movs	r2, #96	@ 0x60
 8000784:	2160      	movs	r1, #96	@ 0x60
 8000786:	2070      	movs	r0, #112	@ 0x70
 8000788:	f7ff ff30 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>

	CANSTAT_STATUS = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	733b      	strb	r3, [r7, #12]

	// Toggle CAN_TEST_SETUP to 1 for loopback mode, 0 for normal mode
	#if CAN_TEST_SETUP
		CAN_IC_WRITE_REGISTER_BITWISE(CANCTRL, 0xE7, 0x44, peripheral);	// Put IC in loop-back mode for testing as well as enable CLKOUT pin with 1:1 prescaler
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2244      	movs	r2, #68	@ 0x44
 8000794:	21e7      	movs	r1, #231	@ 0xe7
 8000796:	200f      	movs	r0, #15
 8000798:	f7ff ff28 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		HAL_Delay(100);
 800079c:	2064      	movs	r0, #100	@ 0x64
 800079e:	f001 f8bd 	bl	800191c <HAL_Delay>
		CAN_IC_READ_REGISTER(CANSTAT, &CANSTAT_STATUS, peripheral); // 0x44
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	200e      	movs	r0, #14
 80007ac:	f7ff fec0 	bl	8000530 <CAN_IC_READ_REGISTER>
		HAL_Delay(100);
		CAN_IC_READ_REGISTER(CANSTAT, &CANSTAT_STATUS, peripheral);
	#endif

	// Reset and configure interrupts
	CAN_IC_WRITE_REGISTER(CANINTE, 0x20, peripheral); 	//configure interrupts, currently enable ERRIF
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	2120      	movs	r1, #32
 80007b4:	202b      	movs	r0, #43	@ 0x2b
 80007b6:	f7ff feed 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CANINTF, 0x00, peripheral); 	//clear INTE flags
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	2100      	movs	r1, #0
 80007be:	202c      	movs	r0, #44	@ 0x2c
 80007c0:	f7ff fee8 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(EFLG, 0x00, peripheral);
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	2100      	movs	r1, #0
 80007c8:	202d      	movs	r0, #45	@ 0x2d
 80007ca:	f7ff fee3 	bl	8000594 <CAN_IC_WRITE_REGISTER>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <checkAvailableTXChannel>:

/*-------------------------------------------------------------------------------------------*/

uint8_t checkAvailableTXChannel(CANPeripheral *peripheral)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
			Use flags instead as it will be easier and faster...
		*/

		// Use "Read Status" command from IC to retrieve status of TXBnCTRL.TXREQ bits (remember to use mask, check datasheet for byte structure)
    	uint8_t CANStatus;
    	CAN_IC_READ_STATUS(&CANStatus, peripheral);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff31 	bl	800064c <CAN_IC_READ_STATUS>

        uint8_t TXB0Status = CANStatus & 0b00000100;
 80007ea:	7b3b      	ldrb	r3, [r7, #12]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	73fb      	strb	r3, [r7, #15]
        uint8_t TXB1Status = CANStatus & 0b00010000;
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	73bb      	strb	r3, [r7, #14]
        uint8_t TXB2Status = CANStatus & 0b01000000;
 80007fa:	7b3b      	ldrb	r3, [r7, #12]
 80007fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000800:	737b      	strb	r3, [r7, #13]

        // CAN_IC_READ_REGISTER(TXB0CTRL, &TXB0Status, peripheral);
        // TXB0Status = TXB0Status & 0x08; //Not masking out bits
        if (!TXB0Status) {
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <checkAvailableTXChannel+0x36>
            return 0;
 8000808:	2300      	movs	r3, #0
 800080a:	e008      	b.n	800081e <checkAvailableTXChannel+0x48>
        }

        // CAN_IC_READ_REGISTER(TXB1CTRL, &TXB1Status, peripheral);
        // TXB1Status = TXB1Status & 0x08; //Not masking out bits
        if (!TXB1Status) {
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <checkAvailableTXChannel+0x40>
            return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e003      	b.n	800081e <checkAvailableTXChannel+0x48>
        }

        // CAN_IC_READ_REGISTER(TXB2CTRL, &TXB2Status, peripheral);
        // TXB2Status = TXB2Status & 0x08; //Not masking out bits
        if (!TXB2Status) {
 8000816:	7b7b      	ldrb	r3, [r7, #13]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1e0      	bne.n	80007de <checkAvailableTXChannel+0x8>
            return 2;
 800081c:	2302      	movs	r3, #2
        }

        // prevWakeTime += TX_CHANNEL_CHECK_DELAY;
        // osDelayUntil(prevWakeTime);
    }
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <sendCANMessage>:
  * @brief send CAN message
  * @param None
  * @retval None
  */
void sendCANMessage(CANMsg *msg, CANPeripheral *peripheral)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
	// Find TxBuffer to use
	uint8_t channel = checkAvailableTXChannel(peripheral);
 8000830:	6838      	ldr	r0, [r7, #0]
 8000832:	f7ff ffd0 	bl	80007d6 <checkAvailableTXChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	74fb      	strb	r3, [r7, #19]
    uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 800083a:	7cfb      	ldrb	r3, [r7, #19]
 800083c:	3303      	adds	r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	74bb      	strb	r3, [r7, #18]

	// Initializations
	uint8_t sendCommand = 0x80 + (0x01 < channel); 	   //instruction to send CAN message on buffer 1
 8000844:	7cfb      	ldrb	r3, [r7, #19]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d901      	bls.n	800084e <sendCANMessage+0x28>
 800084a:	2381      	movs	r3, #129	@ 0x81
 800084c:	e000      	b.n	8000850 <sendCANMessage+0x2a>
 800084e:	2380      	movs	r3, #128	@ 0x80
 8000850:	737b      	strb	r3, [r7, #13]
	uint8_t TXBNSIDH = (msg->ID & 0b11111111000) >> 3; // mask upper ID register (SD 10-3)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	10db      	asrs	r3, r3, #3
 8000858:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (msg->ID & 0b111) << 5; 	   	   // mask lower ID register (SD 2-0)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	015b      	lsls	r3, r3, #5
 8000860:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNDLC = msg->DLC & 0x0F;				   // mask DLC
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7a1b      	ldrb	r3, [r3, #8]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	73fb      	strb	r3, [r7, #15]

	// Set Standard Identifier and DLC
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH, peripheral); // SD 10-3
 800086c:	7cbb      	ldrb	r3, [r7, #18]
 800086e:	3301      	adds	r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	7c79      	ldrb	r1, [r7, #17]
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe8c 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL, peripheral); // SD 2-0
 800087c:	7cbb      	ldrb	r3, [r7, #18]
 800087e:	3302      	adds	r3, #2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	7c39      	ldrb	r1, [r7, #16]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe84 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC, peripheral);  // DLC
 800088c:	7cbb      	ldrb	r3, [r7, #18]
 800088e:	3305      	adds	r3, #5
 8000890:	b2db      	uxtb	r3, r3
 8000892:	7bf9      	ldrb	r1, [r7, #15]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe7c 	bl	8000594 <CAN_IC_WRITE_REGISTER>

	// Set data to registers
	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 800089c:	7cbb      	ldrb	r3, [r7, #18]
 800089e:	3306      	adds	r3, #6
 80008a0:	73bb      	strb	r3, [r7, #14]
	for(int i = 0; i < msg->DLC; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	e010      	b.n	80008ca <sendCANMessage+0xa4>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i], peripheral); //write to relevant data registers
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	4413      	add	r3, r2
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	4413      	add	r3, r2
 80008b8:	3309      	adds	r3, #9
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	f7ff fe68 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7a1b      	ldrb	r3, [r3, #8]
 80008ce:	461a      	mov	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4293      	cmp	r3, r2
 80008d4:	dbe8      	blt.n	80008a8 <sendCANMessage+0x82>
	}

	// set transmit buffer priority to 3 (max)
	// write to TXBNCTRL<1:0>
	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03, peripheral);
 80008d6:	7cb8      	ldrb	r0, [r7, #18]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2203      	movs	r2, #3
 80008dc:	2103      	movs	r1, #3
 80008de:	f7ff fe85 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>

	// Initiate message transmit
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	889b      	ldrh	r3, [r3, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	f001 fac7 	bl	8001e80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(peripheral->hspi, &sendCommand, 1, 100U);  // Send command to transmit
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	6898      	ldr	r0, [r3, #8]
 80008f6:	f107 010d 	add.w	r1, r7, #13
 80008fa:	2364      	movs	r3, #100	@ 0x64
 80008fc:	2201      	movs	r2, #1
 80008fe:	f002 fe62 	bl	80035c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	889b      	ldrh	r3, [r3, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	4619      	mov	r1, r3
 800090e:	f001 fab7 	bl	8001e80 <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <sendExtendedCANMessage>:
  * @brief send CAN message with extended identifier
  * @param None
  * @retval None
  */
void sendExtendedCANMessage(CANMsg *msg, CANPeripheral *peripheral)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	// Find TxBuffer to use
	// uint8_t initialBufferAddress = TXB0CTRL + 16*(channel); //TXB0CTRL for channel 1, TXB1CTRL for channel 2, TXB2CTRL for channel 3
    uint8_t channel = checkAvailableTXChannel(peripheral);
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f7ff ff56 	bl	80007d6 <checkAvailableTXChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	74fb      	strb	r3, [r7, #19]
	uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 800092e:	7cfb      	ldrb	r3, [r7, #19]
 8000930:	3303      	adds	r3, #3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	74bb      	strb	r3, [r7, #18]

	// Initializations
	uint8_t sendCommand = 0x80 + (1 << channel); //instruction to send CAN message on channel
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	2201      	movs	r2, #1
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3b80      	subs	r3, #128	@ 0x80
 8000944:	b2db      	uxtb	r3, r3
 8000946:	72fb      	strb	r3, [r7, #11]
	uint8_t TXBNSIDH = (msg->extendedID >> 21) & 0xFF;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	0d5b      	lsrs	r3, r3, #21
 800094e:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (((msg->extendedID >> 18) & 0x07) << 5) | 0x08 | ((msg->ID >> 16) & 0x03);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	0c9b      	lsrs	r3, r3, #18
 8000956:	b2db      	uxtb	r3, r3
 8000958:	015b      	lsls	r3, r3, #5
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNEID8 = (msg->extendedID >> 8) & 0xFF;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	73fb      	strb	r3, [r7, #15]
	uint8_t TXBNEID0 = msg->extendedID & 0xFF;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	73bb      	strb	r3, [r7, #14]
	uint8_t TXBNDLC = msg->DLC & 0x0F;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	737b      	strb	r3, [r7, #13]

	// Set Extended Identifier and DLC
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH, peripheral); // SD 10-3
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	3301      	adds	r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	7c79      	ldrb	r1, [r7, #17]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe05 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL, peripheral); // SD 2-0, ED 17-16
 800098a:	7cbb      	ldrb	r3, [r7, #18]
 800098c:	3302      	adds	r3, #2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	7c39      	ldrb	r1, [r7, #16]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdfd 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 3, TXBNEID8, peripheral); // ED 15-8
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	3303      	adds	r3, #3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	7bf9      	ldrb	r1, [r7, #15]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fdf5 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 4, TXBNEID0, peripheral); // ED 7-0
 80009aa:	7cbb      	ldrb	r3, [r7, #18]
 80009ac:	3304      	adds	r3, #4
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	7bb9      	ldrb	r1, [r7, #14]
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fded 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC, peripheral);  // DLC
 80009ba:	7cbb      	ldrb	r3, [r7, #18]
 80009bc:	3305      	adds	r3, #5
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	7b79      	ldrb	r1, [r7, #13]
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fde5 	bl	8000594 <CAN_IC_WRITE_REGISTER>

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 80009ca:	7cbb      	ldrb	r3, [r7, #18]
 80009cc:	3306      	adds	r3, #6
 80009ce:	733b      	strb	r3, [r7, #12]
	for(int i = 0; i < msg->DLC; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e010      	b.n	80009f8 <sendExtendedCANMessage+0xde>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i], peripheral); //write to relevant data registers
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	b2d8      	uxtb	r0, r3
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	4413      	add	r3, r2
 80009e6:	3309      	adds	r3, #9
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff fdd1 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7a1b      	ldrb	r3, [r3, #8]
 80009fc:	461a      	mov	r2, r3
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4293      	cmp	r3, r2
 8000a02:	dbe8      	blt.n	80009d6 <sendExtendedCANMessage+0xbc>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03, peripheral); //set transmit buffer priority to 3 (max)
 8000a04:	7cb8      	ldrb	r0, [r7, #18]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	f7ff fdee 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>

	// Initiate message transmit
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f001 fa30 	bl	8001e80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(peripheral->hspi, &sendCommand, 1, 100U);  //Send command to transmit
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	6898      	ldr	r0, [r3, #8]
 8000a24:	f107 010b 	add.w	r1, r7, #11
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f002 fdcb 	bl	80035c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f001 fa20 	bl	8001e80 <HAL_GPIO_WritePin>
}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <receiveCANMessage>:
  * @brief Receive CAN message
  * @param None
  * @retval None
  */
void receiveCANMessage(uint8_t channel, uint32_t* ID, uint8_t* DLC, uint8_t* data, CANPeripheral *peripheral)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]
	// Check if channel is valid, should never go in with wrong channel
	if (channel > 1) {
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	f200 8094 	bhi.w	8000b88 <receiveCANMessage+0x140>
		return;
	}

	uint8_t initialBufferAddress = RXB0CTRL + 16*(channel); //RXB0CTRL for channel 0, RXB1CTRL for channel 1
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	3306      	adds	r3, #6
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	76fb      	strb	r3, [r7, #27]

	uint8_t RXBNSIDH = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	767b      	strb	r3, [r7, #25]
	uint8_t RXBNSIDL = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	763b      	strb	r3, [r7, #24]
	uint8_t RXBDLC = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	75fb      	strb	r3, [r7, #23]

	CAN_IC_READ_REGISTER(initialBufferAddress + 1, &RXBNSIDH, peripheral); // SD 10-3
 8000a76:	7efb      	ldrb	r3, [r7, #27]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f107 0119 	add.w	r1, r7, #25
 8000a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fd54 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 2, &RXBNSIDL, peripheral); //SD 2-0, IDE, ED 17-16
 8000a88:	7efb      	ldrb	r3, [r7, #27]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f107 0118 	add.w	r1, r7, #24
 8000a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fd4b 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 5, &RXBDLC, peripheral);   //DLC
 8000a9a:	7efb      	ldrb	r3, [r7, #27]
 8000a9c:	3305      	adds	r3, #5
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f107 0117 	add.w	r1, r7, #23
 8000aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd42 	bl	8000530 <CAN_IC_READ_REGISTER>

	if(RXBNSIDL & 0x08)	// Check RXBmSIDL.IDE to verify if CAN message has extended identifier
 8000aac:	7e3b      	ldrb	r3, [r7, #24]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d02c      	beq.n	8000b10 <receiveCANMessage+0xc8>
	{
		uint8_t RXBNEID8 = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	75bb      	strb	r3, [r7, #22]
		uint8_t RXBNEID0 = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	757b      	strb	r3, [r7, #21]
		CAN_IC_READ_REGISTER(initialBufferAddress + 3, &RXBNEID8, peripheral); // ED 15-8
 8000abe:	7efb      	ldrb	r3, [r7, #27]
 8000ac0:	3303      	adds	r3, #3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f107 0116 	add.w	r1, r7, #22
 8000ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fd30 	bl	8000530 <CAN_IC_READ_REGISTER>
		CAN_IC_READ_REGISTER(initialBufferAddress + 4, &RXBNEID0, peripheral); // ED 7-0
 8000ad0:	7efb      	ldrb	r3, [r7, #27]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f107 0115 	add.w	r1, r7, #21
 8000ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd27 	bl	8000530 <CAN_IC_READ_REGISTER>
		*ID = (RXBNSIDH << 21) | (((RXBNSIDL >> 5) & 0x07) << 18) | ((RXBNSIDL & 0x03) << 16) | (RXBNEID8 << 8) | (RXBNEID0);
 8000ae2:	7e7b      	ldrb	r3, [r7, #25]
 8000ae4:	055a      	lsls	r2, r3, #21
 8000ae6:	7e3b      	ldrb	r3, [r7, #24]
 8000ae8:	095b      	lsrs	r3, r3, #5
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	049b      	lsls	r3, r3, #18
 8000aee:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8000af2:	431a      	orrs	r2, r3
 8000af4:	7e3b      	ldrb	r3, [r7, #24]
 8000af6:	041b      	lsls	r3, r3, #16
 8000af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000afc:	431a      	orrs	r2, r3
 8000afe:	7dbb      	ldrb	r3, [r7, #22]
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	4313      	orrs	r3, r2
 8000b04:	7d7a      	ldrb	r2, [r7, #21]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e008      	b.n	8000b22 <receiveCANMessage+0xda>
	} else // CAN message is standard
	{
		*ID = (RXBNSIDH << 3) | (RXBNSIDL >> 5);
 8000b10:	7e7b      	ldrb	r3, [r7, #25]
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	7e3a      	ldrb	r2, [r7, #24]
 8000b16:	0952      	lsrs	r2, r2, #5
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	601a      	str	r2, [r3, #0]
	}

	// Check data length of CAN message
	*DLC = RXBDLC & 0x0F; 
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	701a      	strb	r2, [r3, #0]
	if(*DLC > 8){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d902      	bls.n	8000b3c <receiveCANMessage+0xf4>
		*DLC = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 8000b3c:	7efb      	ldrb	r3, [r7, #27]
 8000b3e:	3306      	adds	r3, #6
 8000b40:	76bb      	strb	r3, [r7, #26]
	for(int i = 0; i < *DLC; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	e00e      	b.n	8000b66 <receiveCANMessage+0x11e>
	{
		CAN_IC_READ_REGISTER(initialDataBufferAddress + i, &data[i], peripheral); //read from relevant data registers
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	7ebb      	ldrb	r3, [r7, #26]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f7ff fce8 	bl	8000530 <CAN_IC_READ_REGISTER>
	for(int i = 0; i < *DLC; i++)
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	dbea      	blt.n	8000b48 <receiveCANMessage+0x100>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, channel + 1, channel + 1, peripheral); //clear interrupts
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b80:	202c      	movs	r0, #44	@ 0x2c
 8000b82:	f7ff fd33 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
	return;
 8000b86:	e000      	b.n	8000b8a <receiveCANMessage+0x142>
		return;
 8000b88:	bf00      	nop
}
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <CANRxMessageTask>:
 */

#include "CANRxMessageTask.h"

void CANRxMessageTask(void* arg)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	for(;;) {
		CANRxMessage();
 8000b98:	f000 f802 	bl	8000ba0 <CANRxMessage>
 8000b9c:	e7fc      	b.n	8000b98 <CANRxMessageTask+0x8>
	...

08000ba0 <CANRxMessage>:
	}
}

void CANRxMessage()
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b08b      	sub	sp, #44	@ 0x2c
 8000ba4:	af02      	add	r7, sp, #8
	// Receive pin that triggered receive interrupt
	uint16_t pin;
	osStatus_t status = osMessageQueueGet(CANRxMessageQueue, &pin, NULL, osWaitForever);
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <CANRxMessage+0x7c>)
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	f107 0116 	add.w	r1, r7, #22
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f005 f980 	bl	8005eb8 <osMessageQueueGet>
 8000bb8:	61b8      	str	r0, [r7, #24]
		// Handle if not ok
	}

	// Find what channel to use
	uint8_t channel;
	switch (pin) {
 8000bba:	8afb      	ldrh	r3, [r7, #22]
 8000bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000bc0:	d005      	beq.n	8000bce <CANRxMessage+0x2e>
 8000bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000bc6:	d105      	bne.n	8000bd4 <CANRxMessage+0x34>
		case CAN_RX0BF_Pin:
			channel = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	77fb      	strb	r3, [r7, #31]
			break;
 8000bcc:	e002      	b.n	8000bd4 <CANRxMessage+0x34>
		case CAN_RX1BF_Pin:
			channel = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	77fb      	strb	r3, [r7, #31]
			break;
 8000bd2:	bf00      	nop
	}

	uint32_t ID = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
	uint8_t DLC = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
	uint8_t data[8] = {0};
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]

	// Attain mutex then read message
	if ( osMutexWait(SPIMutexHandle, 0) == osOK)
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <CANRxMessage+0x80>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 ffbc 	bl	8005b68 <osMutexAcquire>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10e      	bne.n	8000c14 <CANRxMessage+0x74>
	{
		receiveCANMessage(channel, &ID, &DLC, data, &peripheral1);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	f107 020f 	add.w	r2, r7, #15
 8000bfc:	f107 0110 	add.w	r1, r7, #16
 8000c00:	7ff8      	ldrb	r0, [r7, #31]
 8000c02:	4c08      	ldr	r4, [pc, #32]	@ (8000c24 <CANRxMessage+0x84>)
 8000c04:	9400      	str	r4, [sp, #0]
 8000c06:	f7ff ff1f 	bl	8000a48 <receiveCANMessage>
		osMutexRelease(SPIMutexHandle);
 8000c0a:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <CANRxMessage+0x80>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 f808 	bl	8005c24 <osMutexRelease>
	// switch (ID) {
	// 	default:
	// 		// Do nothing?
	// 		continue;
	// }
}
 8000c14:	bf00      	nop
 8000c16:	3724      	adds	r7, #36	@ 0x24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	200006f4 	.word	0x200006f4
 8000c20:	200006ec 	.word	0x200006ec
 8000c24:	20000000 	.word	0x20000000

08000c28 <CANTxGatekeeperTask>:
 *      Author: MacKante
 */

#include "CANTxGatekeeperTask.h"

void CANTxGatekeeperTask(void* arg) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    for (;;) {
        CANTxGatekeeper();
 8000c30:	f000 f802 	bl	8000c38 <CANTxGatekeeper>
 8000c34:	e7fc      	b.n	8000c30 <CANTxGatekeeperTask+0x8>
	...

08000c38 <CANTxGatekeeper>:
    }
}

void CANTxGatekeeper() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
	// Acquire message to send from queue
	CANMsg newMsg;
	osStatus_t status = osMessageQueueGet(CANTxMessageQueue, &newMsg, NULL, osWaitForever);
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <CANTxGatekeeper+0x60>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	4639      	mov	r1, r7
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f005 f935 	bl	8005eb8 <osMessageQueueGet>
 8000c4e:	6178      	str	r0, [r7, #20]
	if (status != osOK) {
		// Handle if not ok
	}

	// Wait for mutex
	if ( osMutexWait(SPIMutexHandle, 0) == osOK )
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <CANTxGatekeeper+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 ff86 	bl	8005b68 <osMutexAcquire>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d115      	bne.n	8000c8e <CANTxGatekeeper+0x56>
	{
		// check if CAN message is standard/extended
		// if extendedID == 0, then message is standard
		if ((newMsg.extendedID == 0) && (newMsg.ID != 0))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d108      	bne.n	8000c7a <CANTxGatekeeper+0x42>
 8000c68:	883b      	ldrh	r3, [r7, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <CANTxGatekeeper+0x42>
		{
			sendCANMessage(&newMsg, &peripheral1);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	490b      	ldr	r1, [pc, #44]	@ (8000ca0 <CANTxGatekeeper+0x68>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fdd7 	bl	8000826 <sendCANMessage>
 8000c78:	e004      	b.n	8000c84 <CANTxGatekeeper+0x4c>
		}
		else
		{
			sendExtendedCANMessage(&newMsg, &peripheral1);
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <CANTxGatekeeper+0x68>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe4b 	bl	800091a <sendExtendedCANMessage>
		}
		osMutexRelease(SPIMutexHandle);
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <CANTxGatekeeper+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 ffcb 	bl	8005c24 <osMutexRelease>
	}

}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200006f0 	.word	0x200006f0
 8000c9c:	200006ec 	.word	0x200006ec
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f000 fe0b 	bl	80018c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f862 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f000 f9aa 	bl	8001008 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cb4:	f000 f94a 	bl	8000f4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cb8:	f000 f978 	bl	8000fac <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000cbc:	f000 f8ca 	bl	8000e54 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000cc0:	f000 f906 	bl	8000ed0 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  // Configure CAN IC
  ConfigureCANSPI(&peripheral1);
 8000cc4:	481c      	ldr	r0, [pc, #112]	@ (8000d38 <main+0x94>)
 8000cc6:	f7ff fd13 	bl	80006f0 <ConfigureCANSPI>
  // ConfigureCANSPI(&peripheral2);
  CAN_FINISH_CONFIG_FLAG = 1;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <main+0x98>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cd0:	f004 fd72 	bl	80057b8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  /* SPI Mutex */
  SPIMutexHandle = osMutexNew(&SPIMutex_attributes);
 8000cd4:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <main+0x9c>)
 8000cd6:	f004 fead 	bl	8005a34 <osMutexNew>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <main+0xa0>)
 8000cde:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  // CANInterruptQueue = osMessageQueueNew(CAN_INTERRUPT_QUEUE_COUNT, sizeof(CAN_INTERRUPT), NULL);
  CANTxMessageQueue = osMessageQueueNew(CAN_TRANSMIT_QUEUE_COUNT, sizeof(CANMsg), NULL);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2114      	movs	r1, #20
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f004 ffed 	bl	8005cc4 <osMessageQueueNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a16      	ldr	r2, [pc, #88]	@ (8000d48 <main+0xa4>)
 8000cee:	6013      	str	r3, [r2, #0]
  CANRxMessageQueue = osMessageQueueNew(CAN_RECEIVE_QUEUE_COUNT, sizeof(uint16_t), NULL);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	2005      	movs	r0, #5
 8000cf6:	f004 ffe5 	bl	8005cc4 <osMessageQueueNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <main+0xa8>)
 8000cfe:	6013      	str	r3, [r2, #0]

  /* Creation of CANClearTask */
  // CANClearInterruptTaskHandle = osThreadNew(CANClearInterruptTask, NULL, &CANClearInterruptTask_attributes);

  /* Creation of CANRxMessageTask */
  CANRxMessageTaskHandle = osThreadNew(CANRxMessageTask, NULL, &CANRxMessageTask_attributes);
 8000d00:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <main+0xac>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <main+0xb0>)
 8000d06:	f004 fdc1 	bl	800588c <osThreadNew>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <main+0xb4>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Creation of CANRxMessageTask */
  // CANRxMessageTaskHandle_1 = osThreadNew(CANRxMessageTask1, NULL, &CANRxMessageTask_attributes_1);

  /* Creation of CANTxGatekeeperTask */
  CANTxGateKeeperTaskHandle = osThreadNew(CANTxGatekeeperTask, NULL, &CANTxGateKeeperTask_attributes);
 8000d10:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <main+0xb8>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <main+0xbc>)
 8000d16:	f004 fdb9 	bl	800588c <osThreadNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a11      	ldr	r2, [pc, #68]	@ (8000d64 <main+0xc0>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* Creation of queueMessageTask2 */
  queueMessageTask2Handle = osThreadNew(queueMessageTask2, NULL, &queueMessageTask2_attributes);
 8000d20:	4a11      	ldr	r2, [pc, #68]	@ (8000d68 <main+0xc4>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <main+0xc8>)
 8000d26:	f004 fdb1 	bl	800588c <osThreadNew>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <main+0xcc>)
 8000d2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d30:	f004 fd76 	bl	8005820 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <main+0x90>
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	200006f8 	.word	0x200006f8
 8000d40:	080093f8 	.word	0x080093f8
 8000d44:	200006ec 	.word	0x200006ec
 8000d48:	200006f0 	.word	0x200006f0
 8000d4c:	200006f4 	.word	0x200006f4
 8000d50:	080093d4 	.word	0x080093d4
 8000d54:	08000b91 	.word	0x08000b91
 8000d58:	200006e8 	.word	0x200006e8
 8000d5c:	080093b0 	.word	0x080093b0
 8000d60:	08000c29 	.word	0x08000c29
 8000d64:	200006e4 	.word	0x200006e4
 8000d68:	0800938c 	.word	0x0800938c
 8000d6c:	0800138d 	.word	0x0800138d
 8000d70:	200006e0 	.word	0x200006e0

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	@ 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2234      	movs	r2, #52	@ 0x34
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f008 f9c2 	bl	800910c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <SystemClock_Config+0xd8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e4c <SystemClock_Config+0xd8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <SystemClock_Config+0xd8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <SystemClock_Config+0xdc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000db8:	4a25      	ldr	r2, [pc, #148]	@ (8000e50 <SystemClock_Config+0xdc>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <SystemClock_Config+0xdc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000de4:	2360      	movs	r3, #96	@ 0x60
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fa0b 	bl	8002214 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e04:	f000 fabb 	bl	800137e <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e08:	f001 f9b4 	bl	8002174 <HAL_PWREx_EnableOverDrive>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e12:	f000 fab4 	bl	800137e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2103      	movs	r1, #3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fc9c 	bl	8002770 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e3e:	f000 fa9e 	bl	800137e <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	@ 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <MX_SPI1_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e6e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e8a:	2228      	movs	r2, #40	@ 0x28
 8000e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000eae:	2208      	movs	r2, #8
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_SPI1_Init+0x74>)
 8000eb4:	f002 fadc 	bl	8003470 <HAL_SPI_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f000 fa5e 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000088 	.word	0x20000088
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_SPI4_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000edc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000eea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000eee:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f02:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f06:	2228      	movs	r2, #40	@ 0x28
 8000f08:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_SPI4_Init+0x74>)
 8000f30:	f002 fa9e 	bl	8003470 <HAL_SPI_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fa20 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000ec 	.word	0x200000ec
 8000f48:	40013400 	.word	0x40013400

08000f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <MX_USART3_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f90:	f003 fcae 	bl	80048f0 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 f9f0 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000150 	.word	0x20000150
 8000fa8:	40004800 	.word	0x40004800

08000fac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2206      	movs	r2, #6
 8000fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	f000 ff78 	bl	8001ee4 <HAL_PCD_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 f9c0 	bl	800137e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001d8 	.word	0x200001d8

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	@ 0x38
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800101e:	4bb2      	ldr	r3, [pc, #712]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4ab1      	ldr	r2, [pc, #708]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4baf      	ldr	r3, [pc, #700]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4bac      	ldr	r3, [pc, #688]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4aab      	ldr	r2, [pc, #684]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4ba9      	ldr	r3, [pc, #676]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104e:	4ba6      	ldr	r3, [pc, #664]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4aa5      	ldr	r2, [pc, #660]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4ba3      	ldr	r3, [pc, #652]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	4ba0      	ldr	r3, [pc, #640]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a9f      	ldr	r2, [pc, #636]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b9d      	ldr	r3, [pc, #628]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b9a      	ldr	r3, [pc, #616]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a99      	ldr	r2, [pc, #612]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b97      	ldr	r3, [pc, #604]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b94      	ldr	r3, [pc, #592]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a93      	ldr	r2, [pc, #588]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b91      	ldr	r3, [pc, #580]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b8e      	ldr	r3, [pc, #568]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a8d      	ldr	r2, [pc, #564]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b8b      	ldr	r3, [pc, #556]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c6:	4b88      	ldr	r3, [pc, #544]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a87      	ldr	r2, [pc, #540]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b85      	ldr	r3, [pc, #532]	@ (80012e8 <MX_GPIO_Init+0x2e0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2110      	movs	r1, #16
 80010e2:	4882      	ldr	r0, [pc, #520]	@ (80012ec <MX_GPIO_Init+0x2e4>)
 80010e4:	f000 fecc 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2110      	movs	r1, #16
 80010ec:	4880      	ldr	r0, [pc, #512]	@ (80012f0 <MX_GPIO_Init+0x2e8>)
 80010ee:	f000 fec7 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80010f8:	487e      	ldr	r0, [pc, #504]	@ (80012f4 <MX_GPIO_Init+0x2ec>)
 80010fa:	f000 fec1 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2140      	movs	r1, #64	@ 0x40
 8001102:	487d      	ldr	r0, [pc, #500]	@ (80012f8 <MX_GPIO_Init+0x2f0>)
 8001104:	f000 febc 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8001108:	2310      	movs	r3, #16
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4873      	ldr	r0, [pc, #460]	@ (80012ec <MX_GPIO_Init+0x2e4>)
 8001120:	f000 fd02 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4870      	ldr	r0, [pc, #448]	@ (80012fc <MX_GPIO_Init+0x2f4>)
 800113c:	f000 fcf4 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN2_RX1BF_Pin CAN2_RX0BF_Pin CAN_RX1BF_Pin */
  GPIO_InitStruct.Pin = CAN2_RX1BF_Pin|CAN2_RX0BF_Pin|CAN_RX1BF_Pin;
 8001140:	f241 0306 	movw	r3, #4102	@ 0x1006
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001146:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	486a      	ldr	r0, [pc, #424]	@ (8001300 <MX_GPIO_Init+0x2f8>)
 8001158:	f000 fce6 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800115c:	2332      	movs	r3, #50	@ 0x32
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116c:	230b      	movs	r3, #11
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4861      	ldr	r0, [pc, #388]	@ (80012fc <MX_GPIO_Init+0x2f4>)
 8001178:	f000 fcd6 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800117c:	2306      	movs	r3, #6
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4856      	ldr	r0, [pc, #344]	@ (80012f0 <MX_GPIO_Init+0x2e8>)
 8001198:	f000 fcc6 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 800119c:	2310      	movs	r3, #16
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	484f      	ldr	r0, [pc, #316]	@ (80012f0 <MX_GPIO_Init+0x2e8>)
 80011b4:	f000 fcb8 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_INT_Pin */
  GPIO_InitStruct.Pin = CAN2_INT_Pin;
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN2_INT_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	4848      	ldr	r0, [pc, #288]	@ (80012f0 <MX_GPIO_Init+0x2e8>)
 80011ce:	f000 fcab 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011d2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	4842      	ldr	r0, [pc, #264]	@ (80012f4 <MX_GPIO_Init+0x2ec>)
 80011ec:	f000 fc9c 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001202:	230b      	movs	r3, #11
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4839      	ldr	r0, [pc, #228]	@ (80012f4 <MX_GPIO_Init+0x2ec>)
 800120e:	f000 fc8b 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8001212:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001218:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4836      	ldr	r0, [pc, #216]	@ (8001304 <MX_GPIO_Init+0x2fc>)
 800122a:	f000 fc7d 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RX0BF_Pin */
  GPIO_InitStruct.Pin = CAN_RX0BF_Pin;
 800122e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001234:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN_RX0BF_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	482f      	ldr	r0, [pc, #188]	@ (8001304 <MX_GPIO_Init+0x2fc>)
 8001246:	f000 fc6f 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800124a:	2340      	movs	r3, #64	@ 0x40
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4825      	ldr	r0, [pc, #148]	@ (80012f8 <MX_GPIO_Init+0x2f0>)
 8001262:	f000 fc61 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	481f      	ldr	r0, [pc, #124]	@ (80012f8 <MX_GPIO_Init+0x2f0>)
 800127a:	f000 fc55 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800127e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001290:	230b      	movs	r3, #11
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <MX_GPIO_Init+0x2f0>)
 800129c:	f000 fc44 	bl	8001b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2105      	movs	r1, #5
 80012a4:	2007      	movs	r0, #7
 80012a6:	f000 fc15 	bl	8001ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012aa:	2007      	movs	r0, #7
 80012ac:	f000 fc2e 	bl	8001b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2105      	movs	r1, #5
 80012b4:	2008      	movs	r0, #8
 80012b6:	f000 fc0d 	bl	8001ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012ba:	2008      	movs	r0, #8
 80012bc:	f000 fc26 	bl	8001b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2105      	movs	r1, #5
 80012c4:	2017      	movs	r0, #23
 80012c6:	f000 fc05 	bl	8001ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ca:	2017      	movs	r0, #23
 80012cc:	f000 fc1e 	bl	8001b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2105      	movs	r1, #5
 80012d4:	2028      	movs	r0, #40	@ 0x28
 80012d6:	f000 fbfd 	bl	8001ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012da:	2028      	movs	r0, #40	@ 0x28
 80012dc:	f000 fc16 	bl	8001b0c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e0:	bf00      	nop
 80012e2:	3738      	adds	r7, #56	@ 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40020800 	.word	0x40020800
 8001300:	40021400 	.word	0x40021400
 8001304:	40020c00 	.word	0x40020c00

08001308 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
//	//		case CAN2_RX1BF_Pin:
//	//			// osMessageQueuePut(mq_id, msg_ptr, msg_prio, osWaitForever);
//		}
//	}

	if (CAN_FINISH_CONFIG_FLAG) {
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x50>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d018      	beq.n	800134e <HAL_GPIO_EXTI_Callback+0x46>
		osStatus_t status;
		switch (GPIO_Pin) {
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001322:	d00b      	beq.n	800133c <HAL_GPIO_EXTI_Callback+0x34>
 8001324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001328:	d111      	bne.n	800134e <HAL_GPIO_EXTI_Callback+0x46>
			case CAN_RX0BF_Pin:
				// RX0Flag = 1;
				status = osMessageQueuePut(CANRxMessageQueue, &GPIO_Pin, 0U, 0U);
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_GPIO_EXTI_Callback+0x54>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	1db9      	adds	r1, r7, #6
 8001330:	2300      	movs	r3, #0
 8001332:	2200      	movs	r2, #0
 8001334:	f004 fd4c 	bl	8005dd0 <osMessageQueuePut>
 8001338:	60f8      	str	r0, [r7, #12]
				break;
 800133a:	e008      	b.n	800134e <HAL_GPIO_EXTI_Callback+0x46>
			case CAN_RX1BF_Pin:
				// RX1Flag = 1;
				status = osMessageQueuePut(CANRxMessageQueue, &GPIO_Pin, 0U, 0U);
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_GPIO_EXTI_Callback+0x54>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	1db9      	adds	r1, r7, #6
 8001342:	2300      	movs	r3, #0
 8001344:	2200      	movs	r2, #0
 8001346:	f004 fd43 	bl	8005dd0 <osMessageQueuePut>
 800134a:	60f8      	str	r0, [r7, #12]
				break;
 800134c:	bf00      	nop
		}
	}
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200006f8 	.word	0x200006f8
 800135c:	200006f4 	.word	0x200006f4

08001360 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001370:	d101      	bne.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001372:	f000 fab3 	bl	80018dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001382:	b672      	cpsid	i
}
 8001384:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001386:	bf00      	nop
 8001388:	e7fd      	b.n	8001386 <Error_Handler+0x8>
	...

0800138c <queueMessageTask2>:
#include "queueMessageTask.h"

void queueMessageTask2(void* arg) {
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	CANMsg msg2 = {
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <queueMessageTask2+0x38>)
 8001396:	f107 0408 	add.w	r4, r7, #8
 800139a:	461d      	mov	r5, r3
 800139c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	6023      	str	r3, [r4, #0]
		.extendedID = 0xAFAFAFA,
		.data = {0xAA}
	};

	for(;;) {
		osStatus_t status = osMessageQueuePut(CANTxMessageQueue, &msg2, 0U, osWaitForever);
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <queueMessageTask2+0x3c>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	f107 0108 	add.w	r1, r7, #8
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2200      	movs	r2, #0
 80013b2:	f004 fd0d 	bl	8005dd0 <osMessageQueuePut>
 80013b6:	61f8      	str	r0, [r7, #28]
		if (status != osOK) {
			// do something
		}
		osDelay(1500);
 80013b8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80013bc:	f004 fb0c 	bl	80059d8 <osDelay>
	for(;;) {
 80013c0:	e7f0      	b.n	80013a4 <queueMessageTask2+0x18>
 80013c2:	bf00      	nop
 80013c4:	08009360 	.word	0x08009360
 80013c8:	200006f0 	.word	0x200006f0

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <HAL_MspInit+0x4c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	210f      	movs	r1, #15
 8001406:	f06f 0001 	mvn.w	r0, #1
 800140a:	f000 fb63 	bl	8001ad4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	@ 0x30
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2e      	ldr	r2, [pc, #184]	@ (80014f4 <HAL_SPI_MspInit+0xd8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d128      	bne.n	8001490 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	4a2d      	ldr	r2, [pc, #180]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001448:	6453      	str	r3, [r2, #68]	@ 0x44
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a27      	ldr	r2, [pc, #156]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800146e:	2338      	movs	r3, #56	@ 0x38
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147e:	2305      	movs	r3, #5
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	481c      	ldr	r0, [pc, #112]	@ (80014fc <HAL_SPI_MspInit+0xe0>)
 800148a:	f000 fb4d 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800148e:	e02c      	b.n	80014ea <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI4)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1a      	ldr	r2, [pc, #104]	@ (8001500 <HAL_SPI_MspInit+0xe4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d127      	bne.n	80014ea <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 80014a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_SPI_MspInit+0xdc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80014ca:	2364      	movs	r3, #100	@ 0x64
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014da:	2305      	movs	r3, #5
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	@ (8001504 <HAL_SPI_MspInit+0xe8>)
 80014e6:	f000 fb1f 	bl	8001b28 <HAL_GPIO_Init>
}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	@ 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40013400 	.word	0x40013400
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0ae      	sub	sp, #184	@ 0xb8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2290      	movs	r2, #144	@ 0x90
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f007 fdef 	bl	800910c <memset>
  if(huart->Instance==USART3)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a22      	ldr	r2, [pc, #136]	@ (80015bc <HAL_UART_MspInit+0xb4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d13c      	bne.n	80015b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800153c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800153e:	2300      	movs	r3, #0
 8001540:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fb6a 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001552:	f7ff ff14 	bl	800137e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <HAL_UART_MspInit+0xb8>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_UART_MspInit+0xb8>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_UART_MspInit+0xb8>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_UART_MspInit+0xb8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <HAL_UART_MspInit+0xb8>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_UART_MspInit+0xb8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001586:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800158a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <HAL_UART_MspInit+0xbc>)
 80015ae:	f000 fabb 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	37b8      	adds	r7, #184	@ 0xb8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004800 	.word	0x40004800
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0ae      	sub	sp, #184	@ 0xb8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2290      	movs	r2, #144	@ 0x90
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 fd8f 	bl	800910c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015f6:	d159      	bne.n	80016ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fb09 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001614:	f7ff feb3 	bl	800137e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	4a25      	ldr	r2, [pc, #148]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6313      	str	r3, [r2, #48]	@ 0x30
 8001624:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001630:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800164a:	230a      	movs	r3, #10
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001654:	4619      	mov	r1, r3
 8001656:	4818      	ldr	r0, [pc, #96]	@ (80016b8 <HAL_PCD_MspInit+0xf0>)
 8001658:	f000 fa66 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800165c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001674:	4619      	mov	r1, r3
 8001676:	4810      	ldr	r0, [pc, #64]	@ (80016b8 <HAL_PCD_MspInit+0xf0>)
 8001678:	f000 fa56 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001680:	4a0c      	ldr	r2, [pc, #48]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 8001682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001686:	6353      	str	r3, [r2, #52]	@ 0x34
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169e:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <HAL_PCD_MspInit+0xec>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016ac:	bf00      	nop
 80016ae:	37b8      	adds	r7, #184	@ 0xb8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016cc:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a33      	ldr	r2, [pc, #204]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e4:	f107 0210 	add.w	r2, r7, #16
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fa64 	bl	8002bbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fe:	f001 fa35 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8001702:	6378      	str	r0, [r7, #52]	@ 0x34
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001706:	f001 fa31 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001712:	4a24      	ldr	r2, [pc, #144]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	3b01      	subs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_InitTick+0xec>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_InitTick+0xec>)
 8001728:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800172c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_InitTick+0xec>)
 8001730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001732:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <HAL_InitTick+0xec>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_InitTick+0xec>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_InitTick+0xec>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001746:	4818      	ldr	r0, [pc, #96]	@ (80017a8 <HAL_InitTick+0xec>)
 8001748:	f002 fdf2 	bl	8004330 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001752:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001756:	2b00      	cmp	r3, #0
 8001758:	d11b      	bne.n	8001792 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800175a:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <HAL_InitTick+0xec>)
 800175c:	f002 fe4a 	bl	80043f4 <HAL_TIM_Base_Start_IT>
 8001760:	4603      	mov	r3, r0
 8001762:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001766:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800176a:	2b00      	cmp	r3, #0
 800176c:	d111      	bne.n	8001792 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800176e:	201c      	movs	r0, #28
 8001770:	f000 f9cc 	bl	8001b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	d808      	bhi.n	800178c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800177a:	2200      	movs	r2, #0
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	201c      	movs	r0, #28
 8001780:	f000 f9a8 	bl	8001ad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001784:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <HAL_InitTick+0xf0>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e002      	b.n	8001792 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001792:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001796:	4618      	mov	r0, r3
 8001798:	3738      	adds	r7, #56	@ 0x38
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	200006fc 	.word	0x200006fc
 80017ac:	20000010 	.word	0x20000010

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN2_RX1BF_Pin);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f000 fb62 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN2_RX0BF_Pin);
 80017f8:	2004      	movs	r0, #4
 80017fa:	f000 fb5b 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}

08001802 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 8001806:	2080      	movs	r0, #128	@ 0x80
 8001808:	f000 fb54 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <TIM2_IRQHandler+0x10>)
 8001816:	f002 fe65 	bl	80044e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200006fc 	.word	0x200006fc

08001824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_RX1BF_Pin);
 8001828:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800182c:	f000 fb42 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001830:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001834:	f000 fb3e 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8001838:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800183c:	f000 fb3a 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_RX0BF_Pin);
 8001840:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001844:	f000 fb36 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001874:	480d      	ldr	r0, [pc, #52]	@ (80018ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001876:	490e      	ldr	r1, [pc, #56]	@ (80018b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0b      	ldr	r2, [pc, #44]	@ (80018b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800188c:	4c0b      	ldr	r4, [pc, #44]	@ (80018bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189a:	f7ff ffd7 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189e:	f007 fc93 	bl	80091c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff f9ff 	bl	8000ca4 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80018b4:	08009430 	.word	0x08009430
  ldr r2, =_sbss
 80018b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80018bc:	2000526c 	.word	0x2000526c

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>

080018c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c6:	2003      	movs	r0, #3
 80018c8:	f000 f8f9 	bl	8001abe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018cc:	200f      	movs	r0, #15
 80018ce:	f7ff fef5 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d2:	f7ff fd7b 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000014 	.word	0x20000014
 8001900:	20000748 	.word	0x20000748

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000748 	.word	0x20000748

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000014 	.word	0x20000014

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	4313      	orrs	r3, r2
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	05fa0000 	.word	0x05fa0000

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	@ (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff4c 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae6:	f7ff ff61 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f7ff ffb1 	bl	8001a58 <NVIC_EncodePriority>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff80 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff54 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e175      	b.n	8001e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8164 	bne.w	8001e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <HAL_GPIO_Init+0x56>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d130      	bne.n	8001be0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d017      	beq.n	8001c1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80be 	beq.w	8001e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a65      	ldr	r2, [pc, #404]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cca:	4a61      	ldr	r2, [pc, #388]	@ (8001e50 <HAL_GPIO_Init+0x328>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	@ (8001e54 <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d037      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a57      	ldr	r2, [pc, #348]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d031      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a55      	ldr	r2, [pc, #340]	@ (8001e60 <HAL_GPIO_Init+0x338>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a54      	ldr	r2, [pc, #336]	@ (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a53      	ldr	r2, [pc, #332]	@ (8001e68 <HAL_GPIO_Init+0x340>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_GPIO_Init+0x344>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x226>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	@ (8001e70 <HAL_GPIO_Init+0x348>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	@ (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x21a>
 8001d3e:	2309      	movs	r3, #9
 8001d40:	e012      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d42:	230a      	movs	r3, #10
 8001d44:	e010      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e00e      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00c      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00a      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <HAL_GPIO_Init+0x328>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b3d      	ldr	r3, [pc, #244]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a29      	ldr	r2, [pc, #164]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e28:	4a14      	ldr	r2, [pc, #80]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f ae86 	bls.w	8001b48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40021c00 	.word	0x40021c00
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40022400 	.word	0x40022400
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa18 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	@ 0x3c
 8001ee8:	af0a      	add	r7, sp, #40	@ 0x28
 8001eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e116      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fb59 	bl	80015c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f99b 	bl	8005270 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f003 f92f 	bl	80051c0 <USB_CoreInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d7      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 f989 	bl	8005292 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e04a      	b.n	800201c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333d      	adds	r3, #61	@ 0x3d
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	333c      	adds	r3, #60	@ 0x3c
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3344      	adds	r3, #68	@ 0x44
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3340      	adds	r3, #64	@ 0x40
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3348      	adds	r3, #72	@ 0x48
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	334c      	adds	r3, #76	@ 0x4c
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3354      	adds	r3, #84	@ 0x54
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3af      	bcc.n	8001f86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e044      	b.n	80020b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3b5      	bcc.n	800202c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f003 f922 	bl	800532c <USB_DevInit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e014      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f80a 	bl	800212c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fae0 	bl	80056e2 <USB_DevDisconnect>

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800215a:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_PCDEx_ActivateLPM+0x44>)
 800215c:	4313      	orrs	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	10000003 	.word	0x10000003

08002174 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b23      	ldr	r3, [pc, #140]	@ (800220c <HAL_PWREx_EnableOverDrive+0x98>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_PWREx_EnableOverDrive+0x98>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_PWREx_EnableOverDrive+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1d      	ldr	r2, [pc, #116]	@ (8002210 <HAL_PWREx_EnableOverDrive+0x9c>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a2:	f7ff fbaf 	bl	8001904 <HAL_GetTick>
 80021a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021a8:	e009      	b.n	80021be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021aa:	f7ff fbab 	bl	8001904 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021b8:	d901      	bls.n	80021be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e022      	b.n	8002204 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ca:	d1ee      	bne.n	80021aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d8:	f7ff fb94 	bl	8001904 <HAL_GetTick>
 80021dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021de:	e009      	b.n	80021f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021e0:	f7ff fb90 	bl	8001904 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ee:	d901      	bls.n	80021f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e007      	b.n	8002204 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002200:	d1ee      	bne.n	80021e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e29b      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8087 	beq.w	8002346 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002238:	4b96      	ldr	r3, [pc, #600]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00c      	beq.n	800225e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002244:	4b93      	ldr	r3, [pc, #588]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d112      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
 8002250:	4b90      	ldr	r3, [pc, #576]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	4b8d      	ldr	r3, [pc, #564]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d06c      	beq.n	8002344 <HAL_RCC_OscConfig+0x130>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d168      	bne.n	8002344 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e275      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x7a>
 8002280:	4b84      	ldr	r3, [pc, #528]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a83      	ldr	r2, [pc, #524]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e02e      	b.n	80022ec <HAL_RCC_OscConfig+0xd8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x9c>
 8002296:	4b7f      	ldr	r3, [pc, #508]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7e      	ldr	r2, [pc, #504]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e01d      	b.n	80022ec <HAL_RCC_OscConfig+0xd8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0xc0>
 80022ba:	4b76      	ldr	r3, [pc, #472]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a75      	ldr	r2, [pc, #468]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b73      	ldr	r3, [pc, #460]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a72      	ldr	r2, [pc, #456]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0xd8>
 80022d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb06 	bl	8001904 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fb02 	bl	8001904 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	@ 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e229      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b61      	ldr	r3, [pc, #388]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0xe8>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff faf2 	bl	8001904 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff faee 	bl	8001904 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e215      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	4b57      	ldr	r3, [pc, #348]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x110>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d069      	beq.n	8002426 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002352:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b4d      	ldr	r3, [pc, #308]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x190>
 800236a:	4b4a      	ldr	r3, [pc, #296]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x17a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1e9      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	493d      	ldr	r1, [pc, #244]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	e040      	b.n	8002426 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ac:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a38      	ldr	r2, [pc, #224]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff faa4 	bl	8001904 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff faa0 	bl	8001904 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1c7      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b30      	ldr	r3, [pc, #192]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4929      	ldr	r1, [pc, #164]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
 80023f2:	e018      	b.n	8002426 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff fa80 	bl	8001904 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002408:	f7ff fa7c 	bl	8001904 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1a3      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d038      	beq.n	80024a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	4a15      	ldr	r2, [pc, #84]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff fa5d 	bl	8001904 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fa59 	bl	8001904 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e180      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x23a>
 800246c:	e01a      	b.n	80024a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002472:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7ff fa43 	bl	8001904 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff fa3f 	bl	8001904 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d903      	bls.n	8002498 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e166      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
 8002494:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	4b92      	ldr	r3, [pc, #584]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a4 	beq.w	80025fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b8c      	ldr	r3, [pc, #560]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b89      	ldr	r3, [pc, #548]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	4a88      	ldr	r2, [pc, #544]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ca:	4b86      	ldr	r3, [pc, #536]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b83      	ldr	r3, [pc, #524]	@ (80026e8 <HAL_RCC_OscConfig+0x4d4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024e6:	4b80      	ldr	r3, [pc, #512]	@ (80026e8 <HAL_RCC_OscConfig+0x4d4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7f      	ldr	r2, [pc, #508]	@ (80026e8 <HAL_RCC_OscConfig+0x4d4>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fa07 	bl	8001904 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fa03 	bl	8001904 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	@ 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e12a      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	4b76      	ldr	r3, [pc, #472]	@ (80026e8 <HAL_RCC_OscConfig+0x4d4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x31a>
 8002520:	4b70      	ldr	r3, [pc, #448]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002524:	4a6f      	ldr	r2, [pc, #444]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	@ 0x70
 800252c:	e02d      	b.n	800258a <HAL_RCC_OscConfig+0x376>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x33c>
 8002536:	4b6b      	ldr	r3, [pc, #428]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	4a6a      	ldr	r2, [pc, #424]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	@ 0x70
 8002542:	4b68      	ldr	r3, [pc, #416]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	4a67      	ldr	r2, [pc, #412]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	@ 0x70
 800254e:	e01c      	b.n	800258a <HAL_RCC_OscConfig+0x376>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x35e>
 8002558:	4b62      	ldr	r3, [pc, #392]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255c:	4a61      	ldr	r2, [pc, #388]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6713      	str	r3, [r2, #112]	@ 0x70
 8002564:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a5e      	ldr	r2, [pc, #376]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	e00b      	b.n	800258a <HAL_RCC_OscConfig+0x376>
 8002572:	4b5c      	ldr	r3, [pc, #368]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002576:	4a5b      	ldr	r2, [pc, #364]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	@ 0x70
 800257e:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002582:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d015      	beq.n	80025be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7ff f9b7 	bl	8001904 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff f9b3 	bl	8001904 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0d8      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	4b4c      	ldr	r3, [pc, #304]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ee      	beq.n	800259a <HAL_RCC_OscConfig+0x386>
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7ff f9a1 	bl	8001904 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff f99d 	bl	8001904 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0c2      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	4b41      	ldr	r3, [pc, #260]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ee      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	4a3c      	ldr	r2, [pc, #240]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80ae 	beq.w	8002760 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d06d      	beq.n	80026ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d14b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b32      	ldr	r3, [pc, #200]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a31      	ldr	r2, [pc, #196]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800261e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff f96e 	bl	8001904 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff f96a 	bl	8001904 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e091      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b29      	ldr	r3, [pc, #164]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	071b      	lsls	r3, r3, #28
 8002676:	491b      	ldr	r1, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a18      	ldr	r2, [pc, #96]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7ff f93c 	bl	8001904 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff f938 	bl	8001904 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e05f      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x47c>
 80026ae:	e057      	b.n	8002760 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f922 	bl	8001904 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f91e 	bl	8001904 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e045      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4b0>
 80026e2:	e03d      	b.n	8002760 <HAL_RCC_OscConfig+0x54c>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026ec:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <HAL_RCC_OscConfig+0x558>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d030      	beq.n	800275c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d129      	bne.n	800275c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d122      	bne.n	800275c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002722:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002724:	4293      	cmp	r3, r2
 8002726:	d119      	bne.n	800275c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d10f      	bne.n	800275c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0d0      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b6a      	ldr	r3, [pc, #424]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d910      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b67      	ldr	r3, [pc, #412]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 020f 	bic.w	r2, r3, #15
 800279e:	4965      	ldr	r1, [pc, #404]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b63      	ldr	r3, [pc, #396]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b8      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d0:	4b59      	ldr	r3, [pc, #356]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a58      	ldr	r2, [pc, #352]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80027d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e8:	4b53      	ldr	r3, [pc, #332]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a52      	ldr	r2, [pc, #328]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80027ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b50      	ldr	r3, [pc, #320]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	494d      	ldr	r1, [pc, #308]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d040      	beq.n	8002894 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b47      	ldr	r3, [pc, #284]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d115      	bne.n	8002852 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e07f      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e073      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b3d      	ldr	r3, [pc, #244]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e06b      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4936      	ldr	r1, [pc, #216]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002864:	f7ff f84e 	bl	8001904 <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7ff f84a 	bl	8001904 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e053      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b2d      	ldr	r3, [pc, #180]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 020c 	and.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1eb      	bne.n	800286c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d210      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 020f 	bic.w	r2, r3, #15
 80028aa:	4922      	ldr	r1, [pc, #136]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e032      	b.n	800292a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4916      	ldr	r1, [pc, #88]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ee:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490e      	ldr	r1, [pc, #56]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002902:	f000 f821 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002906:	4602      	mov	r2, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	490a      	ldr	r1, [pc, #40]	@ (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002914:	5ccb      	ldrb	r3, [r1, r3]
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	4a09      	ldr	r2, [pc, #36]	@ (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <HAL_RCC_ClockConfig+0x1d4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe feca 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023c00 	.word	0x40023c00
 8002938:	40023800 	.word	0x40023800
 800293c:	08009408 	.word	0x08009408
 8002940:	2000000c 	.word	0x2000000c
 8002944:	20000010 	.word	0x20000010

08002948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b094      	sub	sp, #80	@ 0x50
 800294e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	647b      	str	r3, [r7, #68]	@ 0x44
 8002954:	2300      	movs	r3, #0
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	2300      	movs	r3, #0
 800295a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002960:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d00d      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x40>
 800296c:	2b08      	cmp	r3, #8
 800296e:	f200 80e1 	bhi.w	8002b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x34>
 8002976:	2b04      	cmp	r3, #4
 8002978:	d003      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x3a>
 800297a:	e0db      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b73      	ldr	r3, [pc, #460]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800297e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002980:	e0db      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002982:	4b73      	ldr	r3, [pc, #460]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002986:	e0d8      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002988:	4b6f      	ldr	r3, [pc, #444]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d063      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	2200      	movs	r2, #0
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80029b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029ba:	4622      	mov	r2, r4
 80029bc:	462b      	mov	r3, r5
 80029be:	f04f 0000 	mov.w	r0, #0
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	0159      	lsls	r1, r3, #5
 80029c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029cc:	0150      	lsls	r0, r2, #5
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4621      	mov	r1, r4
 80029d4:	1a51      	subs	r1, r2, r1
 80029d6:	6139      	str	r1, [r7, #16]
 80029d8:	4629      	mov	r1, r5
 80029da:	eb63 0301 	sbc.w	r3, r3, r1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029ec:	4659      	mov	r1, fp
 80029ee:	018b      	lsls	r3, r1, #6
 80029f0:	4651      	mov	r1, sl
 80029f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f6:	4651      	mov	r1, sl
 80029f8:	018a      	lsls	r2, r1, #6
 80029fa:	4651      	mov	r1, sl
 80029fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002a00:	4659      	mov	r1, fp
 8002a02:	eb63 0901 	sbc.w	r9, r3, r1
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1a:	4690      	mov	r8, r2
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	4623      	mov	r3, r4
 8002a20:	eb18 0303 	adds.w	r3, r8, r3
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	462b      	mov	r3, r5
 8002a28:	eb49 0303 	adc.w	r3, r9, r3
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	024b      	lsls	r3, r1, #9
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a44:	4621      	mov	r1, r4
 8002a46:	024a      	lsls	r2, r1, #9
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a4e:	2200      	movs	r2, #0
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a58:	f7fd fbf2 	bl	8000240 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a64:	e058      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4611      	mov	r1, r2
 8002a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a80:	4642      	mov	r2, r8
 8002a82:	464b      	mov	r3, r9
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	0159      	lsls	r1, r3, #5
 8002a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a92:	0150      	lsls	r0, r2, #5
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4641      	mov	r1, r8
 8002a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8002abc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	00eb      	lsls	r3, r5, #3
 8002aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ace:	00e2      	lsls	r2, r4, #3
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	461d      	mov	r5, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	18e3      	adds	r3, r4, r3
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	464b      	mov	r3, r9
 8002adc:	eb45 0303 	adc.w	r3, r5, r3
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aee:	4629      	mov	r1, r5
 8002af0:	028b      	lsls	r3, r1, #10
 8002af2:	4621      	mov	r1, r4
 8002af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af8:	4621      	mov	r1, r4
 8002afa:	028a      	lsls	r2, r1, #10
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b02:	2200      	movs	r2, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	61fa      	str	r2, [r7, #28]
 8002b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0c:	f7fd fb98 	bl	8000240 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4613      	mov	r3, r2
 8002b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	3301      	adds	r3, #1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3750      	adds	r7, #80	@ 0x50
 8002b40:	46bd      	mov	sp, r7
 8002b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	007a1200 	.word	0x007a1200

08002b54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000000c 	.word	0x2000000c

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b70:	f7ff fff0 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	0a9b      	lsrs	r3, r3, #10
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08009418 	.word	0x08009418

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b98:	f7ff ffdc 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0b5b      	lsrs	r3, r3, #13
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	@ (8002bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08009418 	.word	0x08009418

08002bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	220f      	movs	r2, #15
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_RCC_GetClockConfig+0x5c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_RCC_GetClockConfig+0x5c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bfe:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <HAL_RCC_GetClockConfig+0x60>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d012      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c48:	4b69      	ldr	r3, [pc, #420]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c52:	6093      	str	r3, [r2, #8]
 8002c54:	4b66      	ldr	r3, [pc, #408]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5c:	4964      	ldr	r1, [pc, #400]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c88:	4959      	ldr	r1, [pc, #356]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d017      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	494a      	ldr	r1, [pc, #296]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd4:	d101      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 808b 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	4b3a      	ldr	r3, [pc, #232]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	4a39      	ldr	r2, [pc, #228]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d10:	4b37      	ldr	r3, [pc, #220]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d1c:	4b35      	ldr	r3, [pc, #212]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a34      	ldr	r2, [pc, #208]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe fdec 	bl	8001904 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe fde8 	bl	8001904 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e38f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4e:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d035      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d02e      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a1a      	ldr	r2, [pc, #104]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d8e:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d94:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d114      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fdb0 	bl	8001904 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe fdac 	bl	8001904 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e351      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ee      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002de6:	400b      	ands	r3, r1
 8002de8:	4901      	ldr	r1, [pc, #4]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
 8002df8:	0ffffcff 	.word	0x0ffffcff
 8002dfc:	4bac      	ldr	r3, [pc, #688]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4aab      	ldr	r2, [pc, #684]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e06:	6093      	str	r3, [r2, #8]
 8002e08:	4ba9      	ldr	r3, [pc, #676]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	49a6      	ldr	r1, [pc, #664]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e26:	4ba2      	ldr	r3, [pc, #648]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e2c:	4aa0      	ldr	r2, [pc, #640]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e36:	4b9e      	ldr	r3, [pc, #632]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	499b      	ldr	r1, [pc, #620]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e54:	4b96      	ldr	r3, [pc, #600]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e62:	4993      	ldr	r1, [pc, #588]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e76:	4b8e      	ldr	r3, [pc, #568]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e84:	498a      	ldr	r1, [pc, #552]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e98:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea6:	4982      	ldr	r1, [pc, #520]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eba:	4b7d      	ldr	r3, [pc, #500]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4979      	ldr	r1, [pc, #484]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002edc:	4b74      	ldr	r3, [pc, #464]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	4971      	ldr	r1, [pc, #452]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efe:	4b6c      	ldr	r3, [pc, #432]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f04:	f023 020c 	bic.w	r2, r3, #12
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	4968      	ldr	r1, [pc, #416]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f20:	4b63      	ldr	r3, [pc, #396]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	4960      	ldr	r1, [pc, #384]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f42:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f50:	4957      	ldr	r1, [pc, #348]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f64:	4b52      	ldr	r3, [pc, #328]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	494f      	ldr	r1, [pc, #316]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	4946      	ldr	r1, [pc, #280]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fa8:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	493e      	ldr	r1, [pc, #248]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fca:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd8:	4935      	ldr	r1, [pc, #212]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fec:	4b30      	ldr	r3, [pc, #192]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ffa:	492d      	ldr	r1, [pc, #180]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d011      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800300e:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003014:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800301c:	4924      	ldr	r1, [pc, #144]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800304e:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003054:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305c:	4914      	ldr	r1, [pc, #80]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003070:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003076:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003080:	490b      	ldr	r1, [pc, #44]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a4:	4902      	ldr	r1, [pc, #8]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030ac:	e002      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c0:	4b8a      	ldr	r3, [pc, #552]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d0:	4986      	ldr	r1, [pc, #536]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030e4:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030f4:	497d      	ldr	r1, [pc, #500]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d006      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80d6 	beq.w	80032bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003110:	4b76      	ldr	r3, [pc, #472]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a75      	ldr	r2, [pc, #468]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800311a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fe fbf2 	bl	8001904 <HAL_GetTick>
 8003120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003124:	f7fe fbee 	bl	8001904 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	@ 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e195      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003136:	4b6d      	ldr	r3, [pc, #436]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d021      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11d      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003156:	4b65      	ldr	r3, [pc, #404]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003164:	4b61      	ldr	r3, [pc, #388]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800316a:	0e1b      	lsrs	r3, r3, #24
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	019a      	lsls	r2, r3, #6
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	071b      	lsls	r3, r3, #28
 800318a:	4958      	ldr	r1, [pc, #352]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d02e      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031bc:	d129      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031be:	4b4b      	ldr	r3, [pc, #300]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031cc:	4b47      	ldr	r3, [pc, #284]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	0f1b      	lsrs	r3, r3, #28
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	019a      	lsls	r2, r3, #6
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	071b      	lsls	r3, r3, #28
 80031f2:	493e      	ldr	r1, [pc, #248]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031fa:	4b3c      	ldr	r3, [pc, #240]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003200:	f023 021f 	bic.w	r2, r3, #31
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	3b01      	subs	r3, #1
 800320a:	4938      	ldr	r1, [pc, #224]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01d      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800321e:	4b33      	ldr	r3, [pc, #204]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003224:	0e1b      	lsrs	r3, r3, #24
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800322c:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003232:	0f1b      	lsrs	r3, r3, #28
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	019a      	lsls	r2, r3, #6
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	071b      	lsls	r3, r3, #28
 8003252:	4926      	ldr	r1, [pc, #152]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d011      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	019a      	lsls	r2, r3, #6
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	491a      	ldr	r1, [pc, #104]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800328a:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003290:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003296:	f7fe fb35 	bl	8001904 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800329e:	f7fe fb31 	bl	8001904 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b64      	cmp	r3, #100	@ 0x64
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0d8      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	f040 80ce 	bne.w	8003460 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe fb18 	bl	8001904 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032d6:	e00b      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032d8:	f7fe fb14 	bl	8001904 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d904      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0bb      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f0:	4b5e      	ldr	r3, [pc, #376]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032fc:	d0ec      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800331a:	2b00      	cmp	r3, #0
 800331c:	d02e      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d12a      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003326:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003334:	4b4d      	ldr	r3, [pc, #308]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333a:	0f1b      	lsrs	r3, r3, #28
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	019a      	lsls	r2, r3, #6
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	4944      	ldr	r1, [pc, #272]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003362:	4b42      	ldr	r3, [pc, #264]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003368:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	493d      	ldr	r1, [pc, #244]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d022      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800338c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003390:	d11d      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003392:	4b36      	ldr	r3, [pc, #216]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	0e1b      	lsrs	r3, r3, #24
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033a0:	4b32      	ldr	r3, [pc, #200]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	0f1b      	lsrs	r3, r3, #28
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	019a      	lsls	r2, r3, #6
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	071b      	lsls	r3, r3, #28
 80033c6:	4929      	ldr	r1, [pc, #164]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d028      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033da:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	0e1b      	lsrs	r3, r3, #24
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033e8:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	019a      	lsls	r2, r3, #6
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	071b      	lsls	r3, r3, #28
 800340e:	4917      	ldr	r1, [pc, #92]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800341c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	4911      	ldr	r1, [pc, #68]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800342c:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0e      	ldr	r2, [pc, #56]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003438:	f7fe fa64 	bl	8001904 <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003440:	f7fe fa60 	bl	8001904 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e007      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800345a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800345e:	d1ef      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e09d      	b.n	80035be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003492:	d009      	beq.n	80034a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
 800349a:	e005      	b.n	80034a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd ffaa 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034e8:	d902      	bls.n	80034f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e002      	b.n	80034f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034fe:	d007      	beq.n	8003510 <HAL_SPI_Init+0xa0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003508:	d002      	beq.n	8003510 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003552:	ea42 0103 	orr.w	r1, r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	f003 0204 	and.w	r2, r3, #4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800358c:	ea42 0103 	orr.w	r1, r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b088      	sub	sp, #32
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_SPI_Transmit+0x22>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e158      	b.n	800389a <HAL_SPI_Transmit+0x2d4>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f0:	f7fe f988 	bl	8001904 <HAL_GetTick>
 80035f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d002      	beq.n	800360c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003606:	2302      	movs	r3, #2
 8003608:	77fb      	strb	r3, [r7, #31]
    goto error;
 800360a:	e13d      	b.n	8003888 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_Transmit+0x52>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800361c:	e134      	b.n	8003888 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003668:	d10f      	bne.n	800368a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003688:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b40      	cmp	r3, #64	@ 0x40
 8003696:	d007      	beq.n	80036a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036b0:	d94b      	bls.n	800374a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_SPI_Transmit+0xfa>
 80036ba:	8afb      	ldrh	r3, [r7, #22]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d13e      	bne.n	800373e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036e4:	e02b      	b.n	800373e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d112      	bne.n	800371a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003718:	e011      	b.n	800373e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371a:	f7fe f8f3 	bl	8001904 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d803      	bhi.n	8003732 <HAL_SPI_Transmit+0x16c>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d102      	bne.n	8003738 <HAL_SPI_Transmit+0x172>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800373c:	e0a4      	b.n	8003888 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ce      	bne.n	80036e6 <HAL_SPI_Transmit+0x120>
 8003748:	e07c      	b.n	8003844 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SPI_Transmit+0x192>
 8003752:	8afb      	ldrh	r3, [r7, #22]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d170      	bne.n	800383a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d912      	bls.n	8003788 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b02      	subs	r3, #2
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003786:	e058      	b.n	800383a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	7812      	ldrb	r2, [r2, #0]
 8003794:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037ae:	e044      	b.n	800383a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d12b      	bne.n	8003816 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d912      	bls.n	80037ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b02      	subs	r3, #2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037ec:	e025      	b.n	800383a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003814:	e011      	b.n	800383a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003816:	f7fe f875 	bl	8001904 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d803      	bhi.n	800382e <HAL_SPI_Transmit+0x268>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d102      	bne.n	8003834 <HAL_SPI_Transmit+0x26e>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003838:	e026      	b.n	8003888 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1b5      	bne.n	80037b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	6839      	ldr	r1, [r7, #0]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fd07 	bl	800425c <SPI_EndRxTxTransaction>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e000      	b.n	8003888 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003898:	7ffb      	ldrb	r3, [r7, #31]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b088      	sub	sp, #32
 80038a6:	af02      	add	r7, sp, #8
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038be:	d112      	bne.n	80038e6 <HAL_SPI_Receive+0x44>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2204      	movs	r2, #4
 80038cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038d0:	88fa      	ldrh	r2, [r7, #6]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f910 	bl	8003b02 <HAL_SPI_TransmitReceive>
 80038e2:	4603      	mov	r3, r0
 80038e4:	e109      	b.n	8003afa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_SPI_Receive+0x52>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e102      	b.n	8003afa <HAL_SPI_Receive+0x258>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038fc:	f7fe f802 	bl	8001904 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003912:	e0e9      	b.n	8003ae8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Receive+0x7e>
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003924:	e0e0      	b.n	8003ae8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2204      	movs	r2, #4
 800392a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003970:	d908      	bls.n	8003984 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	e007      	b.n	8003994 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800399c:	d10f      	bne.n	80039be <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d007      	beq.n	80039dc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039e4:	d867      	bhi.n	8003ab6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039e6:	e030      	b.n	8003a4a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d117      	bne.n	8003a26 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f103 020c 	add.w	r2, r3, #12
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a24:	e011      	b.n	8003a4a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a26:	f7fd ff6d 	bl	8001904 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d803      	bhi.n	8003a3e <HAL_SPI_Receive+0x19c>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Receive+0x1a2>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a48:	e04e      	b.n	8003ae8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1c8      	bne.n	80039e8 <HAL_SPI_Receive+0x146>
 8003a56:	e034      	b.n	8003ac2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d115      	bne.n	8003a92 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	b292      	uxth	r2, r2
 8003a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a90:	e011      	b.n	8003ab6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a92:	f7fd ff37 	bl	8001904 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d803      	bhi.n	8003aaa <HAL_SPI_Receive+0x208>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Receive+0x20e>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ab4:	e018      	b.n	8003ae8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ca      	bne.n	8003a58 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fb4c 	bl	8004164 <SPI_EndRxTransaction>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
 8003ae4:	e000      	b.n	8003ae8 <HAL_SPI_Receive+0x246>
  }

error :
 8003ae6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b08a      	sub	sp, #40	@ 0x28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x26>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e1fb      	b.n	8003f20 <HAL_SPI_TransmitReceive+0x41e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b30:	f7fd fee8 	bl	8001904 <HAL_GetTick>
 8003b34:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b3c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b4c:	7efb      	ldrb	r3, [r7, #27]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d00e      	beq.n	8003b70 <HAL_SPI_TransmitReceive+0x6e>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b58:	d106      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x66>
 8003b62:	7efb      	ldrb	r3, [r7, #27]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d003      	beq.n	8003b70 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b6e:	e1cd      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x80>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x80>
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b88:	e1c0      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d003      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2205      	movs	r2, #5
 8003b9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	887a      	ldrh	r2, [r7, #2]
 8003bae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	887a      	ldrh	r2, [r7, #2]
 8003bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003be0:	d802      	bhi.n	8003be8 <HAL_SPI_TransmitReceive+0xe6>
 8003be2:	8a3b      	ldrh	r3, [r7, #16]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d908      	bls.n	8003bfa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	e007      	b.n	8003c0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b40      	cmp	r3, #64	@ 0x40
 8003c16:	d007      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c30:	d97c      	bls.n	8003d2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x13e>
 8003c3a:	8a7b      	ldrh	r3, [r7, #18]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d169      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c64:	e056      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d11b      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x1aa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x1aa>
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d113      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c94:	1c9a      	adds	r2, r3, #2
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x1f2>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	1c9a      	adds	r2, r3, #2
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cf4:	f7fd fe06 	bl	8001904 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d807      	bhi.n	8003d14 <HAL_SPI_TransmitReceive+0x212>
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d003      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003d12:	e0fb      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1a3      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x164>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d19d      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x164>
 8003d2a:	e0df      	b.n	8003eec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_SPI_TransmitReceive+0x23a>
 8003d34:	8a7b      	ldrh	r3, [r7, #18]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	f040 80cb 	bne.w	8003ed2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d912      	bls.n	8003d6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	881a      	ldrh	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b02      	subs	r3, #2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d6a:	e0b2      	b.n	8003ed2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	7812      	ldrb	r2, [r2, #0]
 8003d78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d92:	e09e      	b.n	8003ed2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d134      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x30a>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02f      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x30a>
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d12c      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d912      	bls.n	8003de2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b02      	subs	r3, #2
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003de0:	e012      	b.n	8003e08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d148      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x3aa>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d042      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d923      	bls.n	8003e7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b02      	subs	r3, #2
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d81f      	bhi.n	8003ea8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	e016      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f103 020c 	add.w	r2, r3, #12
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eac:	f7fd fd2a 	bl	8001904 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d803      	bhi.n	8003ec4 <HAL_SPI_TransmitReceive+0x3c2>
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x3c8>
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003ed0:	e01c      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f af5b 	bne.w	8003d94 <HAL_SPI_TransmitReceive+0x292>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f47f af54 	bne.w	8003d94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f9b3 	bl	800425c <SPI_EndRxTxTransaction>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f08:	e000      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3728      	adds	r7, #40	@ 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f38:	f7fd fce4 	bl	8001904 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f48:	f7fd fcdc 	bl	8001904 <HAL_GetTick>
 8003f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f4e:	4b39      	ldr	r3, [pc, #228]	@ (8004034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	015b      	lsls	r3, r3, #5
 8003f54:	0d1b      	lsrs	r3, r3, #20
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	e054      	b.n	800400a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d050      	beq.n	800400a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f68:	f7fd fccc 	bl	8001904 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d902      	bls.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d13d      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f96:	d111      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa0:	d004      	beq.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d107      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc4:	d10f      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e017      	b.n	800402a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3b01      	subs	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	429a      	cmp	r2, r3
 8004026:	d19b      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c

08004038 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	@ 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800404a:	f7fd fc5b 	bl	8001904 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	4413      	add	r3, r2
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800405a:	f7fd fc53 	bl	8001904 <HAL_GetTick>
 800405e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004068:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	00da      	lsls	r2, r3, #3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	0d1b      	lsrs	r3, r3, #20
 8004078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004080:	e060      	b.n	8004144 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004088:	d107      	bne.n	800409a <SPI_WaitFifoStateUntilTimeout+0x62>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004098:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d050      	beq.n	8004144 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040a2:	f7fd fc2f 	bl	8001904 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d902      	bls.n	80040b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d13d      	bne.n	8004134 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d0:	d111      	bne.n	80040f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040da:	d004      	beq.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d107      	bne.n	80040f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fe:	d10f      	bne.n	8004120 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800411e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e010      	b.n	8004156 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3b01      	subs	r3, #1
 8004142:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d196      	bne.n	8004082 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	@ 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004178:	d111      	bne.n	800419e <SPI_EndRxTransaction+0x3a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004182:	d004      	beq.n	800418e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d107      	bne.n	800419e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a6:	d112      	bne.n	80041ce <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	@ 0x80
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff feb8 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d021      	beq.n	8004202 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e03d      	b.n	800424a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041ce:	4b21      	ldr	r3, [pc, #132]	@ (8004254 <SPI_EndRxTransaction+0xf0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <SPI_EndRxTransaction+0xf4>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0d5b      	lsrs	r3, r3, #21
 80041da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b80      	cmp	r3, #128	@ 0x80
 80041fc:	d0f2      	beq.n	80041e4 <SPI_EndRxTransaction+0x80>
 80041fe:	e000      	b.n	8004202 <SPI_EndRxTransaction+0x9e>
        break;
 8004200:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800420a:	d11d      	bne.n	8004248 <SPI_EndRxTransaction+0xe4>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004214:	d004      	beq.n	8004220 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421e:	d113      	bne.n	8004248 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2200      	movs	r2, #0
 8004228:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff03 	bl	8004038 <SPI_WaitFifoStateUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e000      	b.n	800424a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c
 8004258:	165e9f81 	.word	0x165e9f81

0800425c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fedf 	bl	8004038 <SPI_WaitFifoStateUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e046      	b.n	800431e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004290:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <SPI_EndRxTxTransaction+0xcc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a25      	ldr	r2, [pc, #148]	@ (800432c <SPI_EndRxTxTransaction+0xd0>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0d5b      	lsrs	r3, r3, #21
 800429c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ae:	d112      	bne.n	80042d6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2180      	movs	r1, #128	@ 0x80
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff fe34 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e023      	b.n	800431e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3b01      	subs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d0f2      	beq.n	80042d6 <SPI_EndRxTxTransaction+0x7a>
 80042f0:	e000      	b.n	80042f4 <SPI_EndRxTxTransaction+0x98>
        break;
 80042f2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fe99 	bl	8004038 <SPI_WaitFifoStateUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e000      	b.n	800431e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000000c 	.word	0x2000000c
 800432c:	165e9f81 	.word	0x165e9f81

08004330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e049      	b.n	80043d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f841 	bl	80043de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 fa00 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e054      	b.n	80044b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a26      	ldr	r2, [pc, #152]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004436:	d01d      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a21      	ldr	r2, [pc, #132]	@ (80044cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1f      	ldr	r2, [pc, #124]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1c      	ldr	r2, [pc, #112]	@ (80044d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1b      	ldr	r2, [pc, #108]	@ (80044dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d115      	bne.n	80044a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <HAL_TIM_Base_Start_IT+0xec>)
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d015      	beq.n	80044b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d011      	beq.n	80044b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	e008      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e000      	b.n	80044b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40010400 	.word	0x40010400
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40001800 	.word	0x40001800
 80044e0:	00010007 	.word	0x00010007

080044e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0202 	mvn.w	r2, #2
 8004510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f905 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8f7 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f908 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0204 	mvn.w	r2, #4
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8db 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8cd 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8de 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0208 	mvn.w	r2, #8
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8b1 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8a3 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8b4 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b10      	cmp	r3, #16
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0210 	mvn.w	r2, #16
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2208      	movs	r2, #8
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f887 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f879 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f88a 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0201 	mvn.w	r2, #1
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc fe7c 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004672:	2b80      	cmp	r3, #128	@ 0x80
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	2b80      	cmp	r3, #128	@ 0x80
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f91a 	bl	80048c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a2:	d10e      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ae:	2b80      	cmp	r3, #128	@ 0x80
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f90d 	bl	80048dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	d10e      	bne.n	80046ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f838 	bl	800475e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d10e      	bne.n	800471a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b20      	cmp	r3, #32
 8004708:	d107      	bne.n	800471a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f06f 0220 	mvn.w	r2, #32
 8004712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8cd 	bl	80048b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a40      	ldr	r2, [pc, #256]	@ (8004888 <TIM_Base_SetConfig+0x114>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d00f      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3d      	ldr	r2, [pc, #244]	@ (800488c <TIM_Base_SetConfig+0x118>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3c      	ldr	r2, [pc, #240]	@ (8004890 <TIM_Base_SetConfig+0x11c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004894 <TIM_Base_SetConfig+0x120>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3a      	ldr	r2, [pc, #232]	@ (8004898 <TIM_Base_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004888 <TIM_Base_SetConfig+0x114>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d4:	d027      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2c      	ldr	r2, [pc, #176]	@ (800488c <TIM_Base_SetConfig+0x118>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d023      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004890 <TIM_Base_SetConfig+0x11c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01f      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <TIM_Base_SetConfig+0x120>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a29      	ldr	r2, [pc, #164]	@ (8004898 <TIM_Base_SetConfig+0x124>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d017      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a28      	ldr	r2, [pc, #160]	@ (800489c <TIM_Base_SetConfig+0x128>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a27      	ldr	r2, [pc, #156]	@ (80048a0 <TIM_Base_SetConfig+0x12c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a26      	ldr	r2, [pc, #152]	@ (80048a4 <TIM_Base_SetConfig+0x130>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a25      	ldr	r2, [pc, #148]	@ (80048a8 <TIM_Base_SetConfig+0x134>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <TIM_Base_SetConfig+0x138>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <TIM_Base_SetConfig+0x13c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <TIM_Base_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0xf8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0c      	ldr	r2, [pc, #48]	@ (8004898 <TIM_Base_SetConfig+0x124>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40010400 	.word	0x40010400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800
 80048a8:	40001800 	.word	0x40001800
 80048ac:	40001c00 	.word	0x40001c00
 80048b0:	40002000 	.word	0x40002000

080048b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e040      	b.n	8004984 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc fdf8 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	@ 0x24
 800491c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f82c 	bl	800498c <UART_SetConfig>
 8004934:	4603      	mov	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e022      	b.n	8004984 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fa84 	bl	8004e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800495a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800496a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb0b 	bl	8004f98 <UART_CheckIdleState>
 8004982:	4603      	mov	r3, r0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4ba6      	ldr	r3, [pc, #664]	@ (8004c50 <UART_SetConfig+0x2c4>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a94      	ldr	r2, [pc, #592]	@ (8004c54 <UART_SetConfig+0x2c8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d120      	bne.n	8004a4a <UART_SetConfig+0xbe>
 8004a08:	4b93      	ldr	r3, [pc, #588]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d816      	bhi.n	8004a44 <UART_SetConfig+0xb8>
 8004a16:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <UART_SetConfig+0x90>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a39 	.word	0x08004a39
 8004a24:	08004a33 	.word	0x08004a33
 8004a28:	08004a3f 	.word	0x08004a3f
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e150      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004a32:	2302      	movs	r3, #2
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e14d      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e14a      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e147      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004a44:	2310      	movs	r3, #16
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e144      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a83      	ldr	r2, [pc, #524]	@ (8004c5c <UART_SetConfig+0x2d0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d132      	bne.n	8004aba <UART_SetConfig+0x12e>
 8004a54:	4b80      	ldr	r3, [pc, #512]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d828      	bhi.n	8004ab4 <UART_SetConfig+0x128>
 8004a62:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <UART_SetConfig+0xdc>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004ab5 	.word	0x08004ab5
 8004a70:	08004ab5 	.word	0x08004ab5
 8004a74:	08004ab5 	.word	0x08004ab5
 8004a78:	08004aa9 	.word	0x08004aa9
 8004a7c:	08004ab5 	.word	0x08004ab5
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004ab5 	.word	0x08004ab5
 8004a88:	08004aa3 	.word	0x08004aa3
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004ab5 	.word	0x08004ab5
 8004a98:	08004aaf 	.word	0x08004aaf
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e118      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e115      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e112      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e10f      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e10c      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a68      	ldr	r2, [pc, #416]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d120      	bne.n	8004b06 <UART_SetConfig+0x17a>
 8004ac4:	4b64      	ldr	r3, [pc, #400]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ace:	2b30      	cmp	r3, #48	@ 0x30
 8004ad0:	d013      	beq.n	8004afa <UART_SetConfig+0x16e>
 8004ad2:	2b30      	cmp	r3, #48	@ 0x30
 8004ad4:	d814      	bhi.n	8004b00 <UART_SetConfig+0x174>
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d009      	beq.n	8004aee <UART_SetConfig+0x162>
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d810      	bhi.n	8004b00 <UART_SetConfig+0x174>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <UART_SetConfig+0x15c>
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d006      	beq.n	8004af4 <UART_SetConfig+0x168>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x174>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e0f2      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e0ef      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e0ec      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e0e9      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e0e6      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a56      	ldr	r2, [pc, #344]	@ (8004c64 <UART_SetConfig+0x2d8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d120      	bne.n	8004b52 <UART_SetConfig+0x1c6>
 8004b10:	4b51      	ldr	r3, [pc, #324]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b1c:	d013      	beq.n	8004b46 <UART_SetConfig+0x1ba>
 8004b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b20:	d814      	bhi.n	8004b4c <UART_SetConfig+0x1c0>
 8004b22:	2b80      	cmp	r3, #128	@ 0x80
 8004b24:	d009      	beq.n	8004b3a <UART_SetConfig+0x1ae>
 8004b26:	2b80      	cmp	r3, #128	@ 0x80
 8004b28:	d810      	bhi.n	8004b4c <UART_SetConfig+0x1c0>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <UART_SetConfig+0x1a8>
 8004b2e:	2b40      	cmp	r3, #64	@ 0x40
 8004b30:	d006      	beq.n	8004b40 <UART_SetConfig+0x1b4>
 8004b32:	e00b      	b.n	8004b4c <UART_SetConfig+0x1c0>
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e0cc      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e0c9      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b40:	2304      	movs	r3, #4
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e0c6      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b46:	2308      	movs	r3, #8
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e0c3      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e0c0      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a44      	ldr	r2, [pc, #272]	@ (8004c68 <UART_SetConfig+0x2dc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d125      	bne.n	8004ba8 <UART_SetConfig+0x21c>
 8004b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b6a:	d017      	beq.n	8004b9c <UART_SetConfig+0x210>
 8004b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b70:	d817      	bhi.n	8004ba2 <UART_SetConfig+0x216>
 8004b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b76:	d00b      	beq.n	8004b90 <UART_SetConfig+0x204>
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7c:	d811      	bhi.n	8004ba2 <UART_SetConfig+0x216>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <UART_SetConfig+0x1fe>
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b86:	d006      	beq.n	8004b96 <UART_SetConfig+0x20a>
 8004b88:	e00b      	b.n	8004ba2 <UART_SetConfig+0x216>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e0a1      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b90:	2302      	movs	r3, #2
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e09e      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b96:	2304      	movs	r3, #4
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e09b      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e098      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e095      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2f      	ldr	r2, [pc, #188]	@ (8004c6c <UART_SetConfig+0x2e0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d125      	bne.n	8004bfe <UART_SetConfig+0x272>
 8004bb2:	4b29      	ldr	r3, [pc, #164]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bc0:	d017      	beq.n	8004bf2 <UART_SetConfig+0x266>
 8004bc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bc6:	d817      	bhi.n	8004bf8 <UART_SetConfig+0x26c>
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bcc:	d00b      	beq.n	8004be6 <UART_SetConfig+0x25a>
 8004bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bd2:	d811      	bhi.n	8004bf8 <UART_SetConfig+0x26c>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <UART_SetConfig+0x254>
 8004bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bdc:	d006      	beq.n	8004bec <UART_SetConfig+0x260>
 8004bde:	e00b      	b.n	8004bf8 <UART_SetConfig+0x26c>
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e076      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e073      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e070      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e06d      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e06a      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <UART_SetConfig+0x2e4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d138      	bne.n	8004c7a <UART_SetConfig+0x2ee>
 8004c08:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c16:	d017      	beq.n	8004c48 <UART_SetConfig+0x2bc>
 8004c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c1c:	d82a      	bhi.n	8004c74 <UART_SetConfig+0x2e8>
 8004c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c22:	d00b      	beq.n	8004c3c <UART_SetConfig+0x2b0>
 8004c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c28:	d824      	bhi.n	8004c74 <UART_SetConfig+0x2e8>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <UART_SetConfig+0x2aa>
 8004c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c32:	d006      	beq.n	8004c42 <UART_SetConfig+0x2b6>
 8004c34:	e01e      	b.n	8004c74 <UART_SetConfig+0x2e8>
 8004c36:	2300      	movs	r3, #0
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e04b      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e048      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004c42:	2304      	movs	r3, #4
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e045      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e042      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004c4e:	bf00      	nop
 8004c50:	efff69f3 	.word	0xefff69f3
 8004c54:	40011000 	.word	0x40011000
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40004400 	.word	0x40004400
 8004c60:	40004800 	.word	0x40004800
 8004c64:	40004c00 	.word	0x40004c00
 8004c68:	40005000 	.word	0x40005000
 8004c6c:	40011400 	.word	0x40011400
 8004c70:	40007800 	.word	0x40007800
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e02c      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a72      	ldr	r2, [pc, #456]	@ (8004e48 <UART_SetConfig+0x4bc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d125      	bne.n	8004cd0 <UART_SetConfig+0x344>
 8004c84:	4b71      	ldr	r3, [pc, #452]	@ (8004e4c <UART_SetConfig+0x4c0>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004c8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c92:	d017      	beq.n	8004cc4 <UART_SetConfig+0x338>
 8004c94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c98:	d817      	bhi.n	8004cca <UART_SetConfig+0x33e>
 8004c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c9e:	d00b      	beq.n	8004cb8 <UART_SetConfig+0x32c>
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca4:	d811      	bhi.n	8004cca <UART_SetConfig+0x33e>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <UART_SetConfig+0x326>
 8004caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cae:	d006      	beq.n	8004cbe <UART_SetConfig+0x332>
 8004cb0:	e00b      	b.n	8004cca <UART_SetConfig+0x33e>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e00d      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e00a      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e007      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e004      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004cca:	2310      	movs	r3, #16
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e001      	b.n	8004cd4 <UART_SetConfig+0x348>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cdc:	d15b      	bne.n	8004d96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d828      	bhi.n	8004d36 <UART_SetConfig+0x3aa>
 8004ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <UART_SetConfig+0x360>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	08004d37 	.word	0x08004d37
 8004cfc:	08004d27 	.word	0x08004d27
 8004d00:	08004d37 	.word	0x08004d37
 8004d04:	08004d37 	.word	0x08004d37
 8004d08:	08004d37 	.word	0x08004d37
 8004d0c:	08004d2f 	.word	0x08004d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d10:	f7fd ff2c 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8004d14:	61b8      	str	r0, [r7, #24]
        break;
 8004d16:	e013      	b.n	8004d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d18:	f7fd ff3c 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8004d1c:	61b8      	str	r0, [r7, #24]
        break;
 8004d1e:	e00f      	b.n	8004d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d20:	4b4b      	ldr	r3, [pc, #300]	@ (8004e50 <UART_SetConfig+0x4c4>)
 8004d22:	61bb      	str	r3, [r7, #24]
        break;
 8004d24:	e00c      	b.n	8004d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d26:	f7fd fe0f 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8004d2a:	61b8      	str	r0, [r7, #24]
        break;
 8004d2c:	e008      	b.n	8004d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d32:	61bb      	str	r3, [r7, #24]
        break;
 8004d34:	e004      	b.n	8004d40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d074      	beq.n	8004e30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	005a      	lsls	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	d916      	bls.n	8004d90 <UART_SetConfig+0x404>
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d68:	d212      	bcs.n	8004d90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f023 030f 	bic.w	r3, r3, #15
 8004d72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	89fa      	ldrh	r2, [r7, #14]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e04f      	b.n	8004e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	77bb      	strb	r3, [r7, #30]
 8004d94:	e04c      	b.n	8004e30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d828      	bhi.n	8004dee <UART_SetConfig+0x462>
 8004d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0x418>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd9 	.word	0x08004dd9
 8004db0:	08004def 	.word	0x08004def
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004def 	.word	0x08004def
 8004dbc:	08004def 	.word	0x08004def
 8004dc0:	08004def 	.word	0x08004def
 8004dc4:	08004de7 	.word	0x08004de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fd fed0 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8004dcc:	61b8      	str	r0, [r7, #24]
        break;
 8004dce:	e013      	b.n	8004df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7fd fee0 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8004dd4:	61b8      	str	r0, [r7, #24]
        break;
 8004dd6:	e00f      	b.n	8004df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <UART_SetConfig+0x4c4>)
 8004dda:	61bb      	str	r3, [r7, #24]
        break;
 8004ddc:	e00c      	b.n	8004df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fd fdb3 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8004de2:	61b8      	str	r0, [r7, #24]
        break;
 8004de4:	e008      	b.n	8004df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	61bb      	str	r3, [r7, #24]
        break;
 8004dec:	e004      	b.n	8004df8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	77bb      	strb	r3, [r7, #30]
        break;
 8004df6:	bf00      	nop
    }

    if (pclk != 0U)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	085a      	lsrs	r2, r3, #1
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	441a      	add	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b0f      	cmp	r3, #15
 8004e16:	d909      	bls.n	8004e2c <UART_SetConfig+0x4a0>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1e:	d205      	bcs.n	8004e2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	e001      	b.n	8004e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40007c00 	.word	0x40007c00
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f52:	d10a      	bne.n	8004f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa8:	f7fc fcac 	bl	8001904 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d10e      	bne.n	8004fda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f831 	bl	8005032 <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e027      	b.n	800502a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d10e      	bne.n	8005006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f81b 	bl	8005032 <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e011      	b.n	800502a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b09c      	sub	sp, #112	@ 0x70
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	e0a7      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	f000 80a3 	beq.w	8005194 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fc fc59 	bl	8001904 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <UART_WaitOnFlagUntilTimeout+0x32>
 800505e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005060:	2b00      	cmp	r3, #0
 8005062:	d13f      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005074:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005078:	667b      	str	r3, [r7, #100]	@ 0x64
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005082:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005084:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005088:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3308      	adds	r3, #8
 800509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3308      	adds	r3, #8
 80050b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80050b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80050c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e068      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d050      	beq.n	8005194 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005100:	d148      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800510a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005120:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800512a:	637b      	str	r3, [r7, #52]	@ 0x34
 800512c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	613b      	str	r3, [r7, #16]
   return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800515e:	623a      	str	r2, [r7, #32]
 8005160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	69f9      	ldr	r1, [r7, #28]
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	61bb      	str	r3, [r7, #24]
   return(result);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e010      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f43f af48 	beq.w	8005044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3770      	adds	r7, #112	@ 0x70
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c0:	b084      	sub	sp, #16
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	f107 001c 	add.w	r0, r7, #28
 80051ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d120      	bne.n	800521a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	4b20      	ldr	r3, [pc, #128]	@ (800526c <USB_CoreInit+0xac>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d105      	bne.n	800520e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa96 	bl	8005740 <USB_CoreReset>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
 8005218:	e010      	b.n	800523c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa8a 	bl	8005740 <USB_CoreReset>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	2b01      	cmp	r3, #1
 8005240:	d10b      	bne.n	800525a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f043 0206 	orr.w	r2, r3, #6
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800525a:	7bfb      	ldrb	r3, [r7, #15]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005266:	b004      	add	sp, #16
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	ffbdffbf 	.word	0xffbdffbf

08005270 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 0201 	bic.w	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d115      	bne.n	80052e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052c0:	2001      	movs	r0, #1
 80052c2:	f7fc fb2b 	bl	800191c <HAL_Delay>
      ms++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3301      	adds	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa29 	bl	8005724 <USB_GetMode>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d01e      	beq.n	8005316 <USB_SetCurrentMode+0x84>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b31      	cmp	r3, #49	@ 0x31
 80052dc:	d9f0      	bls.n	80052c0 <USB_SetCurrentMode+0x2e>
 80052de:	e01a      	b.n	8005316 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d115      	bne.n	8005312 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052f2:	2001      	movs	r0, #1
 80052f4:	f7fc fb12 	bl	800191c <HAL_Delay>
      ms++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa10 	bl	8005724 <USB_GetMode>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <USB_SetCurrentMode+0x84>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b31      	cmp	r3, #49	@ 0x31
 800530e:	d9f0      	bls.n	80052f2 <USB_SetCurrentMode+0x60>
 8005310:	e001      	b.n	8005316 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e005      	b.n	8005322 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b32      	cmp	r3, #50	@ 0x32
 800531a:	d101      	bne.n	8005320 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800532c:	b084      	sub	sp, #16
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800533a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e009      	b.n	8005360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3340      	adds	r3, #64	@ 0x40
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	2200      	movs	r2, #0
 8005358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3301      	adds	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b0e      	cmp	r3, #14
 8005364:	d9f2      	bls.n	800534c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d11c      	bne.n	80053a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537a:	f043 0302 	orr.w	r3, r3, #2
 800537e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e005      	b.n	80053b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053b8:	461a      	mov	r2, r3
 80053ba:	2300      	movs	r3, #0
 80053bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c4:	4619      	mov	r1, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053cc:	461a      	mov	r2, r3
 80053ce:	680b      	ldr	r3, [r1, #0]
 80053d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d10c      	bne.n	80053f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053de:	2100      	movs	r1, #0
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f965 	bl	80056b0 <USB_SetDevSpeed>
 80053e6:	e008      	b.n	80053fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053e8:	2101      	movs	r1, #1
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f960 	bl	80056b0 <USB_SetDevSpeed>
 80053f0:	e003      	b.n	80053fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053f2:	2103      	movs	r1, #3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f95b 	bl	80056b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053fa:	2110      	movs	r1, #16
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8f3 	bl	80055e8 <USB_FlushTxFifo>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f91f 	bl	8005650 <USB_FlushRxFifo>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	461a      	mov	r2, r3
 8005430:	2300      	movs	r3, #0
 8005432:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543a:	461a      	mov	r2, r3
 800543c:	2300      	movs	r3, #0
 800543e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e043      	b.n	80054ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800545c:	d118      	bne.n	8005490 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e013      	b.n	80054a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	461a      	mov	r2, r3
 8005488:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e008      	b.n	80054a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c0:	461a      	mov	r2, r3
 80054c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	3301      	adds	r3, #1
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d3b7      	bcc.n	8005446 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e043      	b.n	8005564 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f2:	d118      	bne.n	8005526 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e013      	b.n	8005538 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551c:	461a      	mov	r2, r3
 800551e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e008      	b.n	8005538 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	2300      	movs	r3, #0
 8005536:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005556:	461a      	mov	r2, r3
 8005558:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800555c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3301      	adds	r3, #1
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d3b7      	bcc.n	80054dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800557a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800557e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800558c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	2b00      	cmp	r3, #0
 8005592:	d105      	bne.n	80055a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f043 0210 	orr.w	r2, r3, #16
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	4b0e      	ldr	r3, [pc, #56]	@ (80055e0 <USB_DevInit+0x2b4>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f043 0208 	orr.w	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <USB_DevInit+0x2b8>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr
 80055e0:	803c3800 	.word	0x803c3800
 80055e4:	40000004 	.word	0x40000004

080055e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a13      	ldr	r2, [pc, #76]	@ (800564c <USB_FlushTxFifo+0x64>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e01b      	b.n	8005640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	daf2      	bge.n	80055f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	019b      	lsls	r3, r3, #6
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4a08      	ldr	r2, [pc, #32]	@ (800564c <USB_FlushTxFifo+0x64>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e006      	b.n	8005640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b20      	cmp	r3, #32
 800563c:	d0f0      	beq.n	8005620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	00030d40 	.word	0x00030d40

08005650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <USB_FlushRxFifo+0x5c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e018      	b.n	80056a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	daf2      	bge.n	800565c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2210      	movs	r2, #16
 800567e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a08      	ldr	r2, [pc, #32]	@ (80056ac <USB_FlushRxFifo+0x5c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e006      	b.n	80056a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b10      	cmp	r3, #16
 800569c:	d0f0      	beq.n	8005680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	00030d40 	.word	0x00030d40

080056b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056fc:	f023 0303 	bic.w	r3, r3, #3
 8005700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0301 	and.w	r3, r3, #1
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a13      	ldr	r2, [pc, #76]	@ (80057a4 <USB_CoreReset+0x64>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e01b      	b.n	8005796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	daf2      	bge.n	800574c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f043 0201 	orr.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a09      	ldr	r2, [pc, #36]	@ (80057a4 <USB_CoreReset+0x64>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d901      	bls.n	8005788 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e006      	b.n	8005796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b01      	cmp	r3, #1
 8005792:	d0f0      	beq.n	8005776 <USB_CoreReset+0x36>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	00030d40 	.word	0x00030d40

080057a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057be:	f3ef 8305 	mrs	r3, IPSR
 80057c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80057c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10f      	bne.n	80057ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ca:	f3ef 8310 	mrs	r3, PRIMASK
 80057ce:	607b      	str	r3, [r7, #4]
  return(result);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057d6:	f3ef 8311 	mrs	r3, BASEPRI
 80057da:	603b      	str	r3, [r7, #0]
  return(result);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <osKernelInitialize+0x3a>
 80057e2:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <osKernelInitialize+0x64>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d103      	bne.n	80057f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80057ea:	f06f 0305 	mvn.w	r3, #5
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e00c      	b.n	800580c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057f2:	4b0a      	ldr	r3, [pc, #40]	@ (800581c <osKernelInitialize+0x64>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d105      	bne.n	8005806 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057fa:	4b08      	ldr	r3, [pc, #32]	@ (800581c <osKernelInitialize+0x64>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e002      	b.n	800580c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800580c:	68fb      	ldr	r3, [r7, #12]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	2000074c 	.word	0x2000074c

08005820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005826:	f3ef 8305 	mrs	r3, IPSR
 800582a:	60bb      	str	r3, [r7, #8]
  return(result);
 800582c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005832:	f3ef 8310 	mrs	r3, PRIMASK
 8005836:	607b      	str	r3, [r7, #4]
  return(result);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d105      	bne.n	800584a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800583e:	f3ef 8311 	mrs	r3, BASEPRI
 8005842:	603b      	str	r3, [r7, #0]
  return(result);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <osKernelStart+0x3a>
 800584a:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <osKernelStart+0x68>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d103      	bne.n	800585a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005852:	f06f 0305 	mvn.w	r3, #5
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e010      	b.n	800587c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800585a:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <osKernelStart+0x68>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d109      	bne.n	8005876 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005862:	f7ff ffa1 	bl	80057a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005866:	4b08      	ldr	r3, [pc, #32]	@ (8005888 <osKernelStart+0x68>)
 8005868:	2202      	movs	r2, #2
 800586a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800586c:	f001 fe4e 	bl	800750c <vTaskStartScheduler>
      stat = osOK;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e002      	b.n	800587c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005876:	f04f 33ff 	mov.w	r3, #4294967295
 800587a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800587c:	68fb      	ldr	r3, [r7, #12]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	2000074c 	.word	0x2000074c

0800588c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b090      	sub	sp, #64	@ 0x40
 8005890:	af04      	add	r7, sp, #16
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800589c:	f3ef 8305 	mrs	r3, IPSR
 80058a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f040 808f 	bne.w	80059c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058aa:	f3ef 8310 	mrs	r3, PRIMASK
 80058ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d105      	bne.n	80058c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058b6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ba:	617b      	str	r3, [r7, #20]
  return(result);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osThreadNew+0x3e>
 80058c2:	4b44      	ldr	r3, [pc, #272]	@ (80059d4 <osThreadNew+0x148>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d07e      	beq.n	80059c8 <osThreadNew+0x13c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d07b      	beq.n	80059c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80058d0:	2380      	movs	r3, #128	@ 0x80
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80058d4:	2318      	movs	r3, #24
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
 80058e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d045      	beq.n	8005974 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <osThreadNew+0x6a>
        name = attr->name;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <osThreadNew+0x90>
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	2b38      	cmp	r3, #56	@ 0x38
 800590e:	d805      	bhi.n	800591c <osThreadNew+0x90>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <osThreadNew+0x94>
        return (NULL);
 800591c:	2300      	movs	r3, #0
 800591e:	e054      	b.n	80059ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	089b      	lsrs	r3, r3, #2
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <osThreadNew+0xca>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2ba7      	cmp	r3, #167	@ 0xa7
 800593e:	d90a      	bls.n	8005956 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <osThreadNew+0xca>
        mem = 1;
 8005950:	2301      	movs	r3, #1
 8005952:	623b      	str	r3, [r7, #32]
 8005954:	e010      	b.n	8005978 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10c      	bne.n	8005978 <osThreadNew+0xec>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d108      	bne.n	8005978 <osThreadNew+0xec>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <osThreadNew+0xec>
          mem = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	e001      	b.n	8005978 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d110      	bne.n	80059a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005986:	9202      	str	r2, [sp, #8]
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f001 fbbb 	bl	8007110 <xTaskCreateStatic>
 800599a:	4603      	mov	r3, r0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e013      	b.n	80059c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d110      	bne.n	80059c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f001 fc0f 	bl	80071dc <xTaskCreate>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <osThreadNew+0x13c>
          hTask = NULL;
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059c8:	693b      	ldr	r3, [r7, #16]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3730      	adds	r7, #48	@ 0x30
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	2000074c 	.word	0x2000074c

080059d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e0:	f3ef 8305 	mrs	r3, IPSR
 80059e4:	613b      	str	r3, [r7, #16]
  return(result);
 80059e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10f      	bne.n	8005a0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ec:	f3ef 8310 	mrs	r3, PRIMASK
 80059f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f8:	f3ef 8311 	mrs	r3, BASEPRI
 80059fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <osDelay+0x3c>
 8005a04:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <osDelay+0x58>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d103      	bne.n	8005a14 <osDelay+0x3c>
    stat = osErrorISR;
 8005a0c:	f06f 0305 	mvn.w	r3, #5
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e007      	b.n	8005a24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f001 fd3c 	bl	800749c <vTaskDelay>
    }
  }

  return (stat);
 8005a24:	697b      	ldr	r3, [r7, #20]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2000074c 	.word	0x2000074c

08005a34 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	@ 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a40:	f3ef 8305 	mrs	r3, IPSR
 8005a44:	613b      	str	r3, [r7, #16]
  return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 8085 	bne.w	8005b58 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <osMutexNew+0x3a>
 8005a66:	4b3f      	ldr	r3, [pc, #252]	@ (8005b64 <osMutexNew+0x130>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d074      	beq.n	8005b58 <osMutexNew+0x124>
    if (attr != NULL) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e001      	b.n	8005a80 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <osMutexNew+0x5c>
      rmtx = 1U;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	e001      	b.n	8005a94 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d15c      	bne.n	8005b58 <osMutexNew+0x124>
      mem = -1;
 8005a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d015      	beq.n	8005ad6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <osMutexNew+0x8c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ab8:	d902      	bls.n	8005ac0 <osMutexNew+0x8c>
          mem = 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e00c      	b.n	8005ada <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <osMutexNew+0xa6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <osMutexNew+0xa6>
            mem = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	e001      	b.n	8005ada <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d112      	bne.n	8005b06 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4619      	mov	r1, r3
 8005aec:	2004      	movs	r0, #4
 8005aee:	f000 fcc8 	bl	8006482 <xQueueCreateMutexStatic>
 8005af2:	6278      	str	r0, [r7, #36]	@ 0x24
 8005af4:	e016      	b.n	8005b24 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4619      	mov	r1, r3
 8005afc:	2001      	movs	r0, #1
 8005afe:	f000 fcc0 	bl	8006482 <xQueueCreateMutexStatic>
 8005b02:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b04:	e00e      	b.n	8005b24 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b12:	2004      	movs	r0, #4
 8005b14:	f000 fc9d 	bl	8006452 <xQueueCreateMutex>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b1a:	e003      	b.n	8005b24 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f000 fc98 	bl	8006452 <xQueueCreateMutex>
 8005b22:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <osMutexNew+0x110>
        if (attr != NULL) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <osMutexNew+0x104>
          name = attr->name;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e001      	b.n	8005b3c <osMutexNew+0x108>
        } else {
          name = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b40:	f001 fa88 	bl	8007054 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d006      	beq.n	8005b58 <osMutexNew+0x124>
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3728      	adds	r7, #40	@ 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	2000074c 	.word	0x2000074c

08005b68 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	613b      	str	r3, [r7, #16]
  return(result);
 8005b8c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10f      	bne.n	8005bb2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b92:	f3ef 8310 	mrs	r3, PRIMASK
 8005b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <osMutexAcquire+0x52>
 8005baa:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <osMutexAcquire+0xb8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d103      	bne.n	8005bba <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005bb2:	f06f 0305 	mvn.w	r3, #5
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e02c      	b.n	8005c14 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005bc0:	f06f 0303 	mvn.w	r3, #3
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e025      	b.n	8005c14 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d011      	beq.n	8005bf2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	69b8      	ldr	r0, [r7, #24]
 8005bd2:	f000 fca8 	bl	8006526 <xQueueTakeMutexRecursive>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d01b      	beq.n	8005c14 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005be2:	f06f 0301 	mvn.w	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e014      	b.n	8005c14 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005bea:	f06f 0302 	mvn.w	r3, #2
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	e010      	b.n	8005c14 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	69b8      	ldr	r0, [r7, #24]
 8005bf6:	f000 ff65 	bl	8006ac4 <xQueueSemaphoreTake>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d009      	beq.n	8005c14 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005c06:	f06f 0301 	mvn.w	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	e002      	b.n	8005c14 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005c0e:	f06f 0302 	mvn.w	r3, #2
 8005c12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c14:	69fb      	ldr	r3, [r7, #28]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	2000074c 	.word	0x2000074c

08005c24 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f023 0301 	bic.w	r3, r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c40:	f3ef 8305 	mrs	r3, IPSR
 8005c44:	613b      	str	r3, [r7, #16]
  return(result);
 8005c46:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10f      	bne.n	8005c6c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d105      	bne.n	8005c64 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c58:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <osMutexRelease+0x50>
 8005c64:	4b16      	ldr	r3, [pc, #88]	@ (8005cc0 <osMutexRelease+0x9c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d103      	bne.n	8005c74 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005c6c:	f06f 0305 	mvn.w	r3, #5
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e01f      	b.n	8005cb4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005c7a:	f06f 0303 	mvn.w	r3, #3
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	e018      	b.n	8005cb4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005c88:	69b8      	ldr	r0, [r7, #24]
 8005c8a:	f000 fc15 	bl	80064b8 <xQueueGiveMutexRecursive>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d00f      	beq.n	8005cb4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005c94:	f06f 0302 	mvn.w	r3, #2
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e00b      	b.n	8005cb4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	69b8      	ldr	r0, [r7, #24]
 8005ca4:	f000 fc78 	bl	8006598 <xQueueGenericSend>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d002      	beq.n	8005cb4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005cae:	f06f 0302 	mvn.w	r3, #2
 8005cb2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000074c 	.word	0x2000074c

08005cc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	@ 0x30
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd4:	f3ef 8305 	mrs	r3, IPSR
 8005cd8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cda:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d16f      	bne.n	8005dc0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cec:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <osMessageQueueNew+0x3c>
 8005cf8:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <osMessageQueueNew+0x108>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d05f      	beq.n	8005dc0 <osMessageQueueNew+0xfc>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d05c      	beq.n	8005dc0 <osMessageQueueNew+0xfc>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d059      	beq.n	8005dc0 <osMessageQueueNew+0xfc>
    mem = -1;
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d029      	beq.n	8005d6c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d012      	beq.n	8005d46 <osMessageQueueNew+0x82>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d26:	d90e      	bls.n	8005d46 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695a      	ldr	r2, [r3, #20]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d302      	bcc.n	8005d46 <osMessageQueueNew+0x82>
        mem = 1;
 8005d40:	2301      	movs	r3, #1
 8005d42:	623b      	str	r3, [r7, #32]
 8005d44:	e014      	b.n	8005d70 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <osMessageQueueNew+0xac>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d108      	bne.n	8005d70 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <osMessageQueueNew+0xac>
          mem = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	e001      	b.n	8005d70 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10b      	bne.n	8005d8e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	9100      	str	r1, [sp, #0]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fa5d 	bl	8006244 <xQueueGenericCreateStatic>
 8005d8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d8c:	e008      	b.n	8005da0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005d94:	2200      	movs	r2, #0
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fada 	bl	8006352 <xQueueGenericCreate>
 8005d9e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00c      	beq.n	8005dc0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e001      	b.n	8005db8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005db8:	69f9      	ldr	r1, [r7, #28]
 8005dba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dbc:	f001 f94a 	bl	8007054 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3728      	adds	r7, #40	@ 0x28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2000074c 	.word	0x2000074c

08005dd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	@ 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de8:	f3ef 8305 	mrs	r3, IPSR
 8005dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dee:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df4:	f3ef 8310 	mrs	r3, PRIMASK
 8005df8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e00:	f3ef 8311 	mrs	r3, BASEPRI
 8005e04:	617b      	str	r3, [r7, #20]
  return(result);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02c      	beq.n	8005e66 <osMessageQueuePut+0x96>
 8005e0c:	4b28      	ldr	r3, [pc, #160]	@ (8005eb0 <osMessageQueuePut+0xe0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d128      	bne.n	8005e66 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <osMessageQueuePut+0x56>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <osMessageQueuePut+0x56>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005e26:	f06f 0303 	mvn.w	r3, #3
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e2c:	e039      	b.n	8005ea2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005e32:	f107 0210 	add.w	r2, r7, #16
 8005e36:	2300      	movs	r3, #0
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	6a38      	ldr	r0, [r7, #32]
 8005e3c:	f000 fcb6 	bl	80067ac <xQueueGenericSendFromISR>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d003      	beq.n	8005e4e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005e46:	f06f 0302 	mvn.w	r3, #2
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e4c:	e029      	b.n	8005ea2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d026      	beq.n	8005ea2 <osMessageQueuePut+0xd2>
 8005e54:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <osMessageQueuePut+0xe4>)
 8005e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e64:	e01d      	b.n	8005ea2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <osMessageQueuePut+0xa2>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005e72:	f06f 0303 	mvn.w	r3, #3
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	e014      	b.n	8005ea4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	6a38      	ldr	r0, [r7, #32]
 8005e82:	f000 fb89 	bl	8006598 <xQueueGenericSend>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d00b      	beq.n	8005ea4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005e92:	f06f 0301 	mvn.w	r3, #1
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e98:	e004      	b.n	8005ea4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005e9a:	f06f 0302 	mvn.w	r3, #2
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea0:	e000      	b.n	8005ea4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ea2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3728      	adds	r7, #40	@ 0x28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	2000074c 	.word	0x2000074c
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	@ 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ece:	f3ef 8305 	mrs	r3, IPSR
 8005ed2:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ed4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eda:	f3ef 8310 	mrs	r3, PRIMASK
 8005ede:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eea:	617b      	str	r3, [r7, #20]
  return(result);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02c      	beq.n	8005f4c <osMessageQueueGet+0x94>
 8005ef2:	4b28      	ldr	r3, [pc, #160]	@ (8005f94 <osMessageQueueGet+0xdc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d128      	bne.n	8005f4c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <osMessageQueueGet+0x54>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <osMessageQueueGet+0x54>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005f0c:	f06f 0303 	mvn.w	r3, #3
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f12:	e038      	b.n	8005f86 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	6a38      	ldr	r0, [r7, #32]
 8005f22:	f000 fee7 	bl	8006cf4 <xQueueReceiveFromISR>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d003      	beq.n	8005f34 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005f2c:	f06f 0302 	mvn.w	r3, #2
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f32:	e028      	b.n	8005f86 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d025      	beq.n	8005f86 <osMessageQueueGet+0xce>
 8005f3a:	4b17      	ldr	r3, [pc, #92]	@ (8005f98 <osMessageQueueGet+0xe0>)
 8005f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f4a:	e01c      	b.n	8005f86 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <osMessageQueueGet+0xa0>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005f58:	f06f 0303 	mvn.w	r3, #3
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f5e:	e013      	b.n	8005f88 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	6a38      	ldr	r0, [r7, #32]
 8005f66:	f000 fcc5 	bl	80068f4 <xQueueReceive>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d00b      	beq.n	8005f88 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005f76:	f06f 0301 	mvn.w	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7c:	e004      	b.n	8005f88 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005f7e:	f06f 0302 	mvn.w	r3, #2
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f84:	e000      	b.n	8005f88 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f86:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3728      	adds	r7, #40	@ 0x28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	2000074c 	.word	0x2000074c
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a07      	ldr	r2, [pc, #28]	@ (8005fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a06      	ldr	r2, [pc, #24]	@ (8005fcc <vApplicationGetIdleTaskMemory+0x30>)
 8005fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2280      	movs	r2, #128	@ 0x80
 8005fb8:	601a      	str	r2, [r3, #0]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	20000750 	.word	0x20000750
 8005fcc:	200007f8 	.word	0x200007f8

08005fd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a07      	ldr	r2, [pc, #28]	@ (8005ffc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fe0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4a06      	ldr	r2, [pc, #24]	@ (8006000 <vApplicationGetTimerTaskMemory+0x30>)
 8005fe6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fee:	601a      	str	r2, [r3, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	200009f8 	.word	0x200009f8
 8006000:	20000aa0 	.word	0x20000aa0

08006004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f103 0208 	add.w	r2, r3, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f103 0208 	add.w	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f103 0208 	add.w	r2, r3, #8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d103      	bne.n	80060c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e00c      	b.n	80060e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3308      	adds	r3, #8
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e002      	b.n	80060d4 <vListInsert+0x2e>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d2f6      	bcs.n	80060ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6892      	ldr	r2, [r2, #8]
 800612e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6852      	ldr	r2, [r2, #4]
 8006138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d103      	bne.n	800614c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	1e5a      	subs	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10d      	bne.n	800619c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	b672      	cpsid	i
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	b662      	cpsie	i
 8006194:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800619c:	f002 fc9e 	bl	8008adc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061cc:	3b01      	subs	r3, #1
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	441a      	add	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	22ff      	movs	r2, #255	@ 0xff
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	22ff      	movs	r2, #255	@ 0xff
 80061e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d114      	bne.n	800621c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01a      	beq.n	8006230 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3310      	adds	r3, #16
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 fc30 	bl	8007a64 <xTaskRemoveFromEventList>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d012      	beq.n	8006230 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800620a:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <xQueueGenericReset+0xd4>)
 800620c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	e009      	b.n	8006230 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3310      	adds	r3, #16
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff feef 	bl	8006004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3324      	adds	r3, #36	@ 0x24
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff feea 	bl	8006004 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006230:	f002 fc8a 	bl	8008b48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006234:	2301      	movs	r3, #1
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	@ 0x38
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10d      	bne.n	8006274 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627e:	b672      	cpsid	i
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	b662      	cpsie	i
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	e7fd      	b.n	8006292 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <xQueueGenericCreateStatic+0x5e>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <xQueueGenericCreateStatic+0x62>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <xQueueGenericCreateStatic+0x64>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	b672      	cpsid	i
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	b662      	cpsie	i
 80062c0:	623b      	str	r3, [r7, #32]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <xQueueGenericCreateStatic+0x90>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <xQueueGenericCreateStatic+0x94>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <xQueueGenericCreateStatic+0x96>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	b672      	cpsid	i
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	b662      	cpsie	i
 80062f2:	61fb      	str	r3, [r7, #28]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062fa:	2350      	movs	r3, #80	@ 0x50
 80062fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b50      	cmp	r3, #80	@ 0x50
 8006302:	d00d      	beq.n	8006320 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	61bb      	str	r3, [r7, #24]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006320:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00d      	beq.n	8006348 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006334:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f848 	bl	80063d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800634a:	4618      	mov	r0, r3
 800634c:	3730      	adds	r7, #48	@ 0x30
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006352:	b580      	push	{r7, lr}
 8006354:	b08a      	sub	sp, #40	@ 0x28
 8006356:	af02      	add	r7, sp, #8
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	4613      	mov	r3, r2
 800635e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10d      	bne.n	8006382 <xQueueGenericCreate+0x30>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	613b      	str	r3, [r7, #16]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	e004      	b.n	8006398 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3350      	adds	r3, #80	@ 0x50
 800639c:	4618      	mov	r0, r3
 800639e:	f002 fccb 	bl	8008d38 <pvPortMalloc>
 80063a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d011      	beq.n	80063ce <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	3350      	adds	r3, #80	@ 0x50
 80063b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063bc:	79fa      	ldrb	r2, [r7, #7]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f805 	bl	80063d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063ce:	69bb      	ldr	r3, [r7, #24]
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3720      	adds	r7, #32
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d103      	bne.n	80063f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e002      	b.n	80063fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006406:	2101      	movs	r1, #1
 8006408:	69b8      	ldr	r0, [r7, #24]
 800640a:	f7ff feaf 	bl	800616c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800643e:	2300      	movs	r3, #0
 8006440:	2200      	movs	r2, #0
 8006442:	2100      	movs	r1, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8a7 	bl	8006598 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	4603      	mov	r3, r0
 800645a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	461a      	mov	r2, r3
 8006468:	6939      	ldr	r1, [r7, #16]
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff ff71 	bl	8006352 <xQueueGenericCreate>
 8006470:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff ffd3 	bl	800641e <prvInitialiseMutex>

		return xNewQueue;
 8006478:	68fb      	ldr	r3, [r7, #12]
	}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006482:	b580      	push	{r7, lr}
 8006484:	b088      	sub	sp, #32
 8006486:	af02      	add	r7, sp, #8
 8006488:	4603      	mov	r3, r0
 800648a:	6039      	str	r1, [r7, #0]
 800648c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	6939      	ldr	r1, [r7, #16]
 80064a0:	6978      	ldr	r0, [r7, #20]
 80064a2:	f7ff fecf 	bl	8006244 <xQueueGenericCreateStatic>
 80064a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff ffb8 	bl	800641e <prvInitialiseMutex>

		return xNewQueue;
 80064ae:	68fb      	ldr	r3, [r7, #12]
	}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ce:	b672      	cpsid	i
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	b662      	cpsie	i
 80064de:	60fb      	str	r3, [r7, #12]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	689c      	ldr	r4, [r3, #8]
 80064ea:	f001 fc89 	bl	8007e00 <xTaskGetCurrentTaskHandle>
 80064ee:	4603      	mov	r3, r0
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d111      	bne.n	8006518 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	1e5a      	subs	r2, r3, #1
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006506:	2300      	movs	r3, #0
 8006508:	2200      	movs	r2, #0
 800650a:	2100      	movs	r1, #0
 800650c:	6938      	ldr	r0, [r7, #16]
 800650e:	f000 f843 	bl	8006598 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006512:	2301      	movs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e001      	b.n	800651c <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800651c:	697b      	ldr	r3, [r7, #20]
	}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd90      	pop	{r4, r7, pc}

08006526 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006526:	b590      	push	{r4, r7, lr}
 8006528:	b087      	sub	sp, #28
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10d      	bne.n	8006556 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	b672      	cpsid	i
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	b662      	cpsie	i
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	689c      	ldr	r4, [r3, #8]
 800655a:	f001 fc51 	bl	8007e00 <xTaskGetCurrentTaskHandle>
 800655e:	4603      	mov	r3, r0
 8006560:	429c      	cmp	r4, r3
 8006562:	d107      	bne.n	8006574 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800656e:	2301      	movs	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e00c      	b.n	800658e <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6938      	ldr	r0, [r7, #16]
 8006578:	f000 faa4 	bl	8006ac4 <xQueueSemaphoreTake>
 800657c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800658e:	697b      	ldr	r3, [r7, #20]
	}
 8006590:	4618      	mov	r0, r3
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd90      	pop	{r4, r7, pc}

08006598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08e      	sub	sp, #56	@ 0x38
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065a6:	2300      	movs	r3, #0
 80065a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10d      	bne.n	80065d0 <xQueueGenericSend+0x38>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <xQueueGenericSend+0x46>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSend+0x4a>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericSend+0x4c>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10d      	bne.n	8006604 <xQueueGenericSend+0x6c>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	b672      	cpsid	i
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	b662      	cpsie	i
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d103      	bne.n	8006612 <xQueueGenericSend+0x7a>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <xQueueGenericSend+0x7e>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <xQueueGenericSend+0x80>
 8006616:	2300      	movs	r3, #0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <xQueueGenericSend+0xa0>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	b672      	cpsid	i
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	b662      	cpsie	i
 8006630:	623b      	str	r3, [r7, #32]
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	e7fd      	b.n	8006634 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006638:	f001 fbf2 	bl	8007e20 <xTaskGetSchedulerState>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <xQueueGenericSend+0xb0>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <xQueueGenericSend+0xb4>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <xQueueGenericSend+0xb6>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <xQueueGenericSend+0xd6>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	b672      	cpsid	i
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	b662      	cpsie	i
 8006666:	61fb      	str	r3, [r7, #28]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800666e:	f002 fa35 	bl	8008adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <xQueueGenericSend+0xec>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d129      	bne.n	80066d8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800668a:	f000 fbd3 	bl	8006e34 <prvCopyDataToQueue>
 800668e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	3324      	adds	r3, #36	@ 0x24
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f9e1 	bl	8007a64 <xTaskRemoveFromEventList>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d013      	beq.n	80066d0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80066a8:	4b3f      	ldr	r3, [pc, #252]	@ (80067a8 <xQueueGenericSend+0x210>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	e00a      	b.n	80066d0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066c0:	4b39      	ldr	r3, [pc, #228]	@ (80067a8 <xQueueGenericSend+0x210>)
 80066c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066d0:	f002 fa3a 	bl	8008b48 <vPortExitCritical>
				return pdPASS;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e063      	b.n	80067a0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066de:	f002 fa33 	bl	8008b48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e05c      	b.n	80067a0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fa1d 	bl	8007b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066f6:	2301      	movs	r3, #1
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066fa:	f002 fa25 	bl	8008b48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066fe:	f000 ff79 	bl	80075f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006702:	f002 f9eb 	bl	8008adc <vPortEnterCritical>
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800670c:	b25b      	sxtb	r3, r3
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d103      	bne.n	800671c <xQueueGenericSend+0x184>
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006722:	b25b      	sxtb	r3, r3
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d103      	bne.n	8006732 <xQueueGenericSend+0x19a>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006732:	f002 fa09 	bl	8008b48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006736:	1d3a      	adds	r2, r7, #4
 8006738:	f107 0314 	add.w	r3, r7, #20
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fa0c 	bl	8007b5c <xTaskCheckForTimeOut>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d124      	bne.n	8006794 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800674a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800674c:	f000 fc6a 	bl	8007024 <prvIsQueueFull>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d018      	beq.n	8006788 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	3310      	adds	r3, #16
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	4611      	mov	r1, r2
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f92a 	bl	80079b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006766:	f000 fbf5 	bl	8006f54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800676a:	f000 ff51 	bl	8007610 <xTaskResumeAll>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f af7c 	bne.w	800666e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006776:	4b0c      	ldr	r3, [pc, #48]	@ (80067a8 <xQueueGenericSend+0x210>)
 8006778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	e772      	b.n	800666e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800678a:	f000 fbe3 	bl	8006f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800678e:	f000 ff3f 	bl	8007610 <xTaskResumeAll>
 8006792:	e76c      	b.n	800666e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006796:	f000 fbdd 	bl	8006f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800679a:	f000 ff39 	bl	8007610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800679e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3738      	adds	r7, #56	@ 0x38
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08e      	sub	sp, #56	@ 0x38
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	b672      	cpsid	i
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	b662      	cpsie	i
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
 80067de:	e7fd      	b.n	80067dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <xQueueGenericSendFromISR+0x42>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <xQueueGenericSendFromISR+0x46>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueGenericSendFromISR+0x48>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10d      	bne.n	8006814 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	b672      	cpsid	i
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	b662      	cpsie	i
 800680c:	623b      	str	r3, [r7, #32]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d103      	bne.n	8006822 <xQueueGenericSendFromISR+0x76>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <xQueueGenericSendFromISR+0x7a>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <xQueueGenericSendFromISR+0x7c>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10d      	bne.n	8006848 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	b672      	cpsid	i
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	b662      	cpsie	i
 8006840:	61fb      	str	r3, [r7, #28]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006848:	f002 fa30 	bl	8008cac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800684c:	f3ef 8211 	mrs	r2, BASEPRI
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	b672      	cpsid	i
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	b662      	cpsie	i
 8006864:	61ba      	str	r2, [r7, #24]
 8006866:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006868:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800686a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <xQueueGenericSendFromISR+0xd2>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d12c      	bne.n	80068d8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800688e:	f000 fad1 	bl	8006e34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006892:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d112      	bne.n	80068c2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d016      	beq.n	80068d2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	3324      	adds	r3, #36	@ 0x24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f8db 	bl	8007a64 <xTaskRemoveFromEventList>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00e      	beq.n	80068d2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e007      	b.n	80068d2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	b25a      	sxtb	r2, r3
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80068d2:	2301      	movs	r3, #1
 80068d4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80068d6:	e001      	b.n	80068dc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
 80068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3738      	adds	r7, #56	@ 0x38
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	@ 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006900:	2300      	movs	r3, #0
 8006902:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <xQueueReceive+0x36>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	b672      	cpsid	i
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	b662      	cpsie	i
 8006922:	623b      	str	r3, [r7, #32]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d103      	bne.n	8006938 <xQueueReceive+0x44>
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <xQueueReceive+0x48>
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <xQueueReceive+0x4a>
 800693c:	2300      	movs	r3, #0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10d      	bne.n	800695e <xQueueReceive+0x6a>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	b672      	cpsid	i
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	b662      	cpsie	i
 8006956:	61fb      	str	r3, [r7, #28]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800695e:	f001 fa5f 	bl	8007e20 <xTaskGetSchedulerState>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <xQueueReceive+0x7a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <xQueueReceive+0x7e>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <xQueueReceive+0x80>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <xQueueReceive+0xa0>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	b672      	cpsid	i
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	b662      	cpsie	i
 800698c:	61bb      	str	r3, [r7, #24]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006994:	f002 f8a2 	bl	8008adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01f      	beq.n	80069e4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069a8:	f000 faae 	bl	8006f08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	1e5a      	subs	r2, r3, #1
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00f      	beq.n	80069dc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	3310      	adds	r3, #16
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f84f 	bl	8007a64 <xTaskRemoveFromEventList>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069cc:	4b3c      	ldr	r3, [pc, #240]	@ (8006ac0 <xQueueReceive+0x1cc>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069dc:	f002 f8b4 	bl	8008b48 <vPortExitCritical>
				return pdPASS;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e069      	b.n	8006ab8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069ea:	f002 f8ad 	bl	8008b48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e062      	b.n	8006ab8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069f8:	f107 0310 	add.w	r3, r7, #16
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 f897 	bl	8007b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a02:	2301      	movs	r3, #1
 8006a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a06:	f002 f89f 	bl	8008b48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a0a:	f000 fdf3 	bl	80075f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a0e:	f002 f865 	bl	8008adc <vPortEnterCritical>
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d103      	bne.n	8006a28 <xQueueReceive+0x134>
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a2e:	b25b      	sxtb	r3, r3
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d103      	bne.n	8006a3e <xQueueReceive+0x14a>
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a3e:	f002 f883 	bl	8008b48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a42:	1d3a      	adds	r2, r7, #4
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 f886 	bl	8007b5c <xTaskCheckForTimeOut>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d123      	bne.n	8006a9e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a58:	f000 face 	bl	8006ff8 <prvIsQueueEmpty>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d017      	beq.n	8006a92 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	3324      	adds	r3, #36	@ 0x24
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 ffa4 	bl	80079b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a72:	f000 fa6f 	bl	8006f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a76:	f000 fdcb 	bl	8007610 <xTaskResumeAll>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d189      	bne.n	8006994 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006a80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <xQueueReceive+0x1cc>)
 8006a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	e780      	b.n	8006994 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a94:	f000 fa5e 	bl	8006f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a98:	f000 fdba 	bl	8007610 <xTaskResumeAll>
 8006a9c:	e77a      	b.n	8006994 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aa0:	f000 fa58 	bl	8006f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aa4:	f000 fdb4 	bl	8007610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aaa:	f000 faa5 	bl	8006ff8 <prvIsQueueEmpty>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f43f af6f 	beq.w	8006994 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ab6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3730      	adds	r7, #48	@ 0x30
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08e      	sub	sp, #56	@ 0x38
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10d      	bne.n	8006afc <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae4:	b672      	cpsid	i
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	b662      	cpsie	i
 8006af4:	623b      	str	r3, [r7, #32]
}
 8006af6:	bf00      	nop
 8006af8:	bf00      	nop
 8006afa:	e7fd      	b.n	8006af8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	b672      	cpsid	i
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	b662      	cpsie	i
 8006b18:	61fb      	str	r3, [r7, #28]
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b20:	f001 f97e 	bl	8007e20 <xTaskGetSchedulerState>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <xQueueSemaphoreTake+0x6c>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <xQueueSemaphoreTake+0x70>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <xQueueSemaphoreTake+0x72>
 8006b34:	2300      	movs	r3, #0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	b672      	cpsid	i
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	b662      	cpsie	i
 8006b4e:	61bb      	str	r3, [r7, #24]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b56:	f001 ffc1 	bl	8008adc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d024      	beq.n	8006bb0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	1e5a      	subs	r2, r3, #1
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b76:	f001 fad5 	bl	8008124 <pvTaskIncrementMutexHeldCount>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	3310      	adds	r3, #16
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 ff69 	bl	8007a64 <xTaskRemoveFromEventList>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b98:	4b55      	ldr	r3, [pc, #340]	@ (8006cf0 <xQueueSemaphoreTake+0x22c>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ba8:	f001 ffce 	bl	8008b48 <vPortExitCritical>
				return pdPASS;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e09a      	b.n	8006ce6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d114      	bne.n	8006be0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00d      	beq.n	8006bd8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	b672      	cpsid	i
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	b662      	cpsie	i
 8006bd0:	617b      	str	r3, [r7, #20]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bd8:	f001 ffb6 	bl	8008b48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e082      	b.n	8006ce6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 ffa0 	bl	8007b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bf4:	f001 ffa8 	bl	8008b48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bf8:	f000 fcfc 	bl	80075f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bfc:	f001 ff6e 	bl	8008adc <vPortEnterCritical>
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d103      	bne.n	8006c16 <xQueueSemaphoreTake+0x152>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d103      	bne.n	8006c2c <xQueueSemaphoreTake+0x168>
 8006c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c2c:	f001 ff8c 	bl	8008b48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c30:	463a      	mov	r2, r7
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 ff8f 	bl	8007b5c <xTaskCheckForTimeOut>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d132      	bne.n	8006caa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c46:	f000 f9d7 	bl	8006ff8 <prvIsQueueEmpty>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d026      	beq.n	8006c9e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006c58:	f001 ff40 	bl	8008adc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 f8fb 	bl	8007e5c <xTaskPriorityInherit>
 8006c66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006c68:	f001 ff6e 	bl	8008b48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	3324      	adds	r3, #36	@ 0x24
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fe9f 	bl	80079b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c7c:	f000 f96a 	bl	8006f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c80:	f000 fcc6 	bl	8007610 <xTaskResumeAll>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f af65 	bne.w	8006b56 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006c8c:	4b18      	ldr	r3, [pc, #96]	@ (8006cf0 <xQueueSemaphoreTake+0x22c>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	e75b      	b.n	8006b56 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ca0:	f000 f958 	bl	8006f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca4:	f000 fcb4 	bl	8007610 <xTaskResumeAll>
 8006ca8:	e755      	b.n	8006b56 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cac:	f000 f952 	bl	8006f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cb0:	f000 fcae 	bl	8007610 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cb6:	f000 f99f 	bl	8006ff8 <prvIsQueueEmpty>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f43f af4a 	beq.w	8006b56 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006cc8:	f001 ff08 	bl	8008adc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cce:	f000 f899 	bl	8006e04 <prvGetDisinheritPriorityAfterTimeout>
 8006cd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f99a 	bl	8008014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ce0:	f001 ff32 	bl	8008b48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3738      	adds	r7, #56	@ 0x38
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	@ 0x38
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10d      	bne.n	8006d26 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	b672      	cpsid	i
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	b662      	cpsie	i
 8006d1e:	623b      	str	r3, [r7, #32]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <xQueueReceiveFromISR+0x40>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <xQueueReceiveFromISR+0x44>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <xQueueReceiveFromISR+0x46>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	b672      	cpsid	i
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	b662      	cpsie	i
 8006d52:	61fb      	str	r3, [r7, #28]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5a:	f001 ffa7 	bl	8008cac <vPortValidateInterruptPriority>
	__asm volatile
 8006d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	b672      	cpsid	i
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	b662      	cpsie	i
 8006d76:	61ba      	str	r2, [r7, #24]
 8006d78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d02f      	beq.n	8006dea <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d98:	f000 f8b6 	bl	8006f08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9e:	1e5a      	subs	r2, r3, #1
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d112      	bne.n	8006dd4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d016      	beq.n	8006de4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	3310      	adds	r3, #16
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fe52 	bl	8007a64 <xTaskRemoveFromEventList>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e007      	b.n	8006de4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dd8:	3301      	adds	r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	b25a      	sxtb	r2, r3
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006de4:	2301      	movs	r3, #1
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de8:	e001      	b.n	8006dee <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f383 8811 	msr	BASEPRI, r3
}
 8006df8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3738      	adds	r7, #56	@ 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d006      	beq.n	8006e22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e001      	b.n	8006e26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e26:	68fb      	ldr	r3, [r7, #12]
	}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10d      	bne.n	8006e6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d14d      	bne.n	8006ef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 f864 	bl	8007f2c <xTaskPriorityDisinherit>
 8006e64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	609a      	str	r2, [r3, #8]
 8006e6c:	e043      	b.n	8006ef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d119      	bne.n	8006ea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6858      	ldr	r0, [r3, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	f002 f9c8 	bl	8009214 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d32b      	bcc.n	8006ef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	e026      	b.n	8006ef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68d8      	ldr	r0, [r3, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	f002 f9ae 	bl	8009214 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d207      	bcs.n	8006ee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	425b      	negs	r3, r3
 8006ede:	441a      	add	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d105      	bne.n	8006ef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006efe:	697b      	ldr	r3, [r7, #20]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d018      	beq.n	8006f4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	441a      	add	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d303      	bcc.n	8006f3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68d9      	ldr	r1, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f44:	461a      	mov	r2, r3
 8006f46:	6838      	ldr	r0, [r7, #0]
 8006f48:	f002 f964 	bl	8009214 <memcpy>
	}
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f5c:	f001 fdbe 	bl	8008adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f68:	e011      	b.n	8006f8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d012      	beq.n	8006f98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3324      	adds	r3, #36	@ 0x24
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fd74 	bl	8007a64 <xTaskRemoveFromEventList>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f82:	f000 fe53 	bl	8007c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	dce9      	bgt.n	8006f6a <prvUnlockQueue+0x16>
 8006f96:	e000      	b.n	8006f9a <prvUnlockQueue+0x46>
					break;
 8006f98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	22ff      	movs	r2, #255	@ 0xff
 8006f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006fa2:	f001 fdd1 	bl	8008b48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fa6:	f001 fd99 	bl	8008adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fb2:	e011      	b.n	8006fd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d012      	beq.n	8006fe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3310      	adds	r3, #16
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fd4f 	bl	8007a64 <xTaskRemoveFromEventList>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fcc:	f000 fe2e 	bl	8007c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dce9      	bgt.n	8006fb4 <prvUnlockQueue+0x60>
 8006fe0:	e000      	b.n	8006fe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	22ff      	movs	r2, #255	@ 0xff
 8006fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006fec:	f001 fdac 	bl	8008b48 <vPortExitCritical>
}
 8006ff0:	bf00      	nop
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007000:	f001 fd6c 	bl	8008adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e001      	b.n	8007016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007016:	f001 fd97 	bl	8008b48 <vPortExitCritical>

	return xReturn;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800702c:	f001 fd56 	bl	8008adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007038:	429a      	cmp	r2, r3
 800703a:	d102      	bne.n	8007042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e001      	b.n	8007046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007046:	f001 fd7f 	bl	8008b48 <vPortExitCritical>

	return xReturn;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e014      	b.n	800708e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007064:	4a0f      	ldr	r2, [pc, #60]	@ (80070a4 <vQueueAddToRegistry+0x50>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007070:	490c      	ldr	r1, [pc, #48]	@ (80070a4 <vQueueAddToRegistry+0x50>)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800707a:	4a0a      	ldr	r2, [pc, #40]	@ (80070a4 <vQueueAddToRegistry+0x50>)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007086:	e006      	b.n	8007096 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b07      	cmp	r3, #7
 8007092:	d9e7      	bls.n	8007064 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000ea0 	.word	0x20000ea0

080070a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070b8:	f001 fd10 	bl	8008adc <vPortEnterCritical>
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070c2:	b25b      	sxtb	r3, r3
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d103      	bne.n	80070d2 <vQueueWaitForMessageRestricted+0x2a>
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d103      	bne.n	80070e8 <vQueueWaitForMessageRestricted+0x40>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070e8:	f001 fd2e 	bl	8008b48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	3324      	adds	r3, #36	@ 0x24
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fc83 	bl	8007a08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007102:	6978      	ldr	r0, [r7, #20]
 8007104:	f7ff ff26 	bl	8006f54 <prvUnlockQueue>
	}
 8007108:	bf00      	nop
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08e      	sub	sp, #56	@ 0x38
 8007114:	af04      	add	r7, sp, #16
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800711e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10d      	bne.n	8007140 <xTaskCreateStatic+0x30>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	b672      	cpsid	i
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	b662      	cpsie	i
 8007138:	623b      	str	r3, [r7, #32]
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10d      	bne.n	8007162 <xTaskCreateStatic+0x52>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714a:	b672      	cpsid	i
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	b662      	cpsie	i
 800715a:	61fb      	str	r3, [r7, #28]
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007162:	23a8      	movs	r3, #168	@ 0xa8
 8007164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2ba8      	cmp	r3, #168	@ 0xa8
 800716a:	d00d      	beq.n	8007188 <xTaskCreateStatic+0x78>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007170:	b672      	cpsid	i
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	b662      	cpsie	i
 8007180:	61bb      	str	r3, [r7, #24]
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	e7fd      	b.n	8007184 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007188:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01e      	beq.n	80071ce <xTaskCreateStatic+0xbe>
 8007190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d01b      	beq.n	80071ce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800719e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071a8:	2300      	movs	r3, #0
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	9302      	str	r3, [sp, #8]
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f851 	bl	8007268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071c8:	f000 f8f8 	bl	80073bc <prvAddNewTaskToReadyList>
 80071cc:	e001      	b.n	80071d2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071d2:	697b      	ldr	r3, [r7, #20]
	}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	@ 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	@ 0x30
 80071e0:	af04      	add	r7, sp, #16
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 fda1 	bl	8008d38 <pvPortMalloc>
 80071f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00e      	beq.n	800721c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071fe:	20a8      	movs	r0, #168	@ 0xa8
 8007200:	f001 fd9a 	bl	8008d38 <pvPortMalloc>
 8007204:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	631a      	str	r2, [r3, #48]	@ 0x30
 8007212:	e005      	b.n	8007220 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	f001 fe5d 	bl	8008ed4 <vPortFree>
 800721a:	e001      	b.n	8007220 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d017      	beq.n	8007256 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	2300      	movs	r3, #0
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	9302      	str	r3, [sp, #8]
 8007238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f80f 	bl	8007268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800724a:	69f8      	ldr	r0, [r7, #28]
 800724c:	f000 f8b6 	bl	80073bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007250:	2301      	movs	r3, #1
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	e002      	b.n	800725c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007256:	f04f 33ff 	mov.w	r3, #4294967295
 800725a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800725c:	69bb      	ldr	r3, [r7, #24]
	}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	461a      	mov	r2, r3
 8007280:	21a5      	movs	r1, #165	@ 0xa5
 8007282:	f001 ff43 	bl	800910c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007290:	440b      	add	r3, r1
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	b672      	cpsid	i
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	b662      	cpsie	i
 80072be:	617b      	str	r3, [r7, #20]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01f      	beq.n	800730c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e012      	b.n	80072f8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	4413      	add	r3, r2
 80072d8:	7819      	ldrb	r1, [r3, #0]
 80072da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	3334      	adds	r3, #52	@ 0x34
 80072e2:	460a      	mov	r2, r1
 80072e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d006      	beq.n	8007300 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3301      	adds	r3, #1
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	d9e9      	bls.n	80072d2 <prvInitialiseNewTask+0x6a>
 80072fe:	e000      	b.n	8007302 <prvInitialiseNewTask+0x9a>
			{
				break;
 8007300:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800730a:	e003      	b.n	8007314 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	2b37      	cmp	r3, #55	@ 0x37
 8007318:	d901      	bls.n	800731e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800731a:	2337      	movs	r3, #55	@ 0x37
 800731c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007328:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	2200      	movs	r2, #0
 800732e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	3304      	adds	r3, #4
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe fe85 	bl	8006044 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	3318      	adds	r3, #24
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fe80 	bl	8006044 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007348:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007358:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	2200      	movs	r2, #0
 800735e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	2200      	movs	r2, #0
 8007366:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	3354      	adds	r3, #84	@ 0x54
 800736e:	224c      	movs	r2, #76	@ 0x4c
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f001 feca 	bl	800910c <memset>
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	4a0d      	ldr	r2, [pc, #52]	@ (80073b0 <prvInitialiseNewTask+0x148>)
 800737c:	659a      	str	r2, [r3, #88]	@ 0x58
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	4a0c      	ldr	r2, [pc, #48]	@ (80073b4 <prvInitialiseNewTask+0x14c>)
 8007382:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	4a0c      	ldr	r2, [pc, #48]	@ (80073b8 <prvInitialiseNewTask+0x150>)
 8007388:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	68f9      	ldr	r1, [r7, #12]
 800738e:	69b8      	ldr	r0, [r7, #24]
 8007390:	f001 fa98 	bl	80088c4 <pxPortInitialiseStack>
 8007394:	4602      	mov	r2, r0
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a6:	bf00      	nop
 80073a8:	3720      	adds	r7, #32
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	2000512c 	.word	0x2000512c
 80073b4:	20005194 	.word	0x20005194
 80073b8:	200051fc 	.word	0x200051fc

080073bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073c4:	f001 fb8a 	bl	8008adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007480 <prvAddNewTaskToReadyList+0xc4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007480 <prvAddNewTaskToReadyList+0xc4>)
 80073d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007484 <prvAddNewTaskToReadyList+0xc8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073da:	4a2a      	ldr	r2, [pc, #168]	@ (8007484 <prvAddNewTaskToReadyList+0xc8>)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e0:	4b27      	ldr	r3, [pc, #156]	@ (8007480 <prvAddNewTaskToReadyList+0xc4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d110      	bne.n	800740a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073e8:	f000 fc44 	bl	8007c74 <prvInitialiseTaskLists>
 80073ec:	e00d      	b.n	800740a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ee:	4b26      	ldr	r3, [pc, #152]	@ (8007488 <prvAddNewTaskToReadyList+0xcc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073f6:	4b23      	ldr	r3, [pc, #140]	@ (8007484 <prvAddNewTaskToReadyList+0xc8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	429a      	cmp	r2, r3
 8007402:	d802      	bhi.n	800740a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007404:	4a1f      	ldr	r2, [pc, #124]	@ (8007484 <prvAddNewTaskToReadyList+0xc8>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800740a:	4b20      	ldr	r3, [pc, #128]	@ (800748c <prvAddNewTaskToReadyList+0xd0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	4a1e      	ldr	r2, [pc, #120]	@ (800748c <prvAddNewTaskToReadyList+0xd0>)
 8007412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007414:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <prvAddNewTaskToReadyList+0xd0>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007420:	4b1b      	ldr	r3, [pc, #108]	@ (8007490 <prvAddNewTaskToReadyList+0xd4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d903      	bls.n	8007430 <prvAddNewTaskToReadyList+0x74>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <prvAddNewTaskToReadyList+0xd4>)
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4a15      	ldr	r2, [pc, #84]	@ (8007494 <prvAddNewTaskToReadyList+0xd8>)
 800743e:	441a      	add	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7fe fe09 	bl	800605e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800744c:	f001 fb7c 	bl	8008b48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007450:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <prvAddNewTaskToReadyList+0xcc>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00e      	beq.n	8007476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <prvAddNewTaskToReadyList+0xc8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	429a      	cmp	r2, r3
 8007464:	d207      	bcs.n	8007476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <prvAddNewTaskToReadyList+0xdc>)
 8007468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200013b4 	.word	0x200013b4
 8007484:	20000ee0 	.word	0x20000ee0
 8007488:	200013c0 	.word	0x200013c0
 800748c:	200013d0 	.word	0x200013d0
 8007490:	200013bc 	.word	0x200013bc
 8007494:	20000ee4 	.word	0x20000ee4
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01a      	beq.n	80074e4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074ae:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <vTaskDelay+0x68>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00d      	beq.n	80074d2 <vTaskDelay+0x36>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	b672      	cpsid	i
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	b662      	cpsie	i
 80074ca:	60bb      	str	r3, [r7, #8]
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80074d2:	f000 f88f 	bl	80075f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fe37 	bl	800814c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074de:	f000 f897 	bl	8007610 <xTaskResumeAll>
 80074e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <vTaskDelay+0x6c>)
 80074ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200013dc 	.word	0x200013dc
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	@ 0x28
 8007510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800751a:	463a      	mov	r2, r7
 800751c:	1d39      	adds	r1, r7, #4
 800751e:	f107 0308 	add.w	r3, r7, #8
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fd3a 	bl	8005f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2300      	movs	r3, #0
 8007538:	460a      	mov	r2, r1
 800753a:	4926      	ldr	r1, [pc, #152]	@ (80075d4 <vTaskStartScheduler+0xc8>)
 800753c:	4826      	ldr	r0, [pc, #152]	@ (80075d8 <vTaskStartScheduler+0xcc>)
 800753e:	f7ff fde7 	bl	8007110 <xTaskCreateStatic>
 8007542:	4603      	mov	r3, r0
 8007544:	4a25      	ldr	r2, [pc, #148]	@ (80075dc <vTaskStartScheduler+0xd0>)
 8007546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007548:	4b24      	ldr	r3, [pc, #144]	@ (80075dc <vTaskStartScheduler+0xd0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	e001      	b.n	800755a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d102      	bne.n	8007566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007560:	f000 fe48 	bl	80081f4 <xTimerCreateTimerTask>
 8007564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d11d      	bne.n	80075a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007570:	b672      	cpsid	i
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	b662      	cpsie	i
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007584:	4b16      	ldr	r3, [pc, #88]	@ (80075e0 <vTaskStartScheduler+0xd4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3354      	adds	r3, #84	@ 0x54
 800758a:	4a16      	ldr	r2, [pc, #88]	@ (80075e4 <vTaskStartScheduler+0xd8>)
 800758c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800758e:	4b16      	ldr	r3, [pc, #88]	@ (80075e8 <vTaskStartScheduler+0xdc>)
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007596:	4b15      	ldr	r3, [pc, #84]	@ (80075ec <vTaskStartScheduler+0xe0>)
 8007598:	2201      	movs	r2, #1
 800759a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800759c:	4b14      	ldr	r3, [pc, #80]	@ (80075f0 <vTaskStartScheduler+0xe4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075a2:	f001 fa1d 	bl	80089e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075a6:	e011      	b.n	80075cc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	d10d      	bne.n	80075cc <vTaskStartScheduler+0xc0>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <vTaskStartScheduler+0xbc>
}
 80075cc:	bf00      	nop
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	08009374 	.word	0x08009374
 80075d8:	08007c45 	.word	0x08007c45
 80075dc:	200013d8 	.word	0x200013d8
 80075e0:	20000ee0 	.word	0x20000ee0
 80075e4:	2000001c 	.word	0x2000001c
 80075e8:	200013d4 	.word	0x200013d4
 80075ec:	200013c0 	.word	0x200013c0
 80075f0:	200013b8 	.word	0x200013b8

080075f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <vTaskSuspendAll+0x18>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	4a03      	ldr	r2, [pc, #12]	@ (800760c <vTaskSuspendAll+0x18>)
 8007600:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	200013dc 	.word	0x200013dc

08007610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800761e:	4b43      	ldr	r3, [pc, #268]	@ (800772c <xTaskResumeAll+0x11c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <xTaskResumeAll+0x32>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	b672      	cpsid	i
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	b662      	cpsie	i
 800763a:	603b      	str	r3, [r7, #0]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007642:	f001 fa4b 	bl	8008adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007646:	4b39      	ldr	r3, [pc, #228]	@ (800772c <xTaskResumeAll+0x11c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	4a37      	ldr	r2, [pc, #220]	@ (800772c <xTaskResumeAll+0x11c>)
 800764e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007650:	4b36      	ldr	r3, [pc, #216]	@ (800772c <xTaskResumeAll+0x11c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d162      	bne.n	800771e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007658:	4b35      	ldr	r3, [pc, #212]	@ (8007730 <xTaskResumeAll+0x120>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d05e      	beq.n	800771e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007660:	e02f      	b.n	80076c2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007662:	4b34      	ldr	r3, [pc, #208]	@ (8007734 <xTaskResumeAll+0x124>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3318      	adds	r3, #24
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fd52 	bl	8006118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fd4d 	bl	8006118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007682:	4b2d      	ldr	r3, [pc, #180]	@ (8007738 <xTaskResumeAll+0x128>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d903      	bls.n	8007692 <xTaskResumeAll+0x82>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768e:	4a2a      	ldr	r2, [pc, #168]	@ (8007738 <xTaskResumeAll+0x128>)
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4a27      	ldr	r2, [pc, #156]	@ (800773c <xTaskResumeAll+0x12c>)
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f7fe fcd8 	bl	800605e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	4b23      	ldr	r3, [pc, #140]	@ (8007740 <xTaskResumeAll+0x130>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80076bc:	4b21      	ldr	r3, [pc, #132]	@ (8007744 <xTaskResumeAll+0x134>)
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007734 <xTaskResumeAll+0x124>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1cb      	bne.n	8007662 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076d0:	f000 fb76 	bl	8007dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007748 <xTaskResumeAll+0x138>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d010      	beq.n	8007702 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076e0:	f000 f846 	bl	8007770 <xTaskIncrementTick>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80076ea:	4b16      	ldr	r3, [pc, #88]	@ (8007744 <xTaskResumeAll+0x134>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f1      	bne.n	80076e0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80076fc:	4b12      	ldr	r3, [pc, #72]	@ (8007748 <xTaskResumeAll+0x138>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007702:	4b10      	ldr	r3, [pc, #64]	@ (8007744 <xTaskResumeAll+0x134>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800770e:	4b0f      	ldr	r3, [pc, #60]	@ (800774c <xTaskResumeAll+0x13c>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800771e:	f001 fa13 	bl	8008b48 <vPortExitCritical>

	return xAlreadyYielded;
 8007722:	68bb      	ldr	r3, [r7, #8]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	200013dc 	.word	0x200013dc
 8007730:	200013b4 	.word	0x200013b4
 8007734:	20001374 	.word	0x20001374
 8007738:	200013bc 	.word	0x200013bc
 800773c:	20000ee4 	.word	0x20000ee4
 8007740:	20000ee0 	.word	0x20000ee0
 8007744:	200013c8 	.word	0x200013c8
 8007748:	200013c4 	.word	0x200013c4
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007756:	4b05      	ldr	r3, [pc, #20]	@ (800776c <xTaskGetTickCount+0x1c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800775c:	687b      	ldr	r3, [r7, #4]
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	200013b8 	.word	0x200013b8

08007770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800777a:	4b50      	ldr	r3, [pc, #320]	@ (80078bc <xTaskIncrementTick+0x14c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 808c 	bne.w	800789c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007784:	4b4e      	ldr	r3, [pc, #312]	@ (80078c0 <xTaskIncrementTick+0x150>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800778c:	4a4c      	ldr	r2, [pc, #304]	@ (80078c0 <xTaskIncrementTick+0x150>)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d123      	bne.n	80077e0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007798:	4b4a      	ldr	r3, [pc, #296]	@ (80078c4 <xTaskIncrementTick+0x154>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00d      	beq.n	80077be <xTaskIncrementTick+0x4e>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	603b      	str	r3, [r7, #0]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <xTaskIncrementTick+0x4a>
 80077be:	4b41      	ldr	r3, [pc, #260]	@ (80078c4 <xTaskIncrementTick+0x154>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	4b40      	ldr	r3, [pc, #256]	@ (80078c8 <xTaskIncrementTick+0x158>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3e      	ldr	r2, [pc, #248]	@ (80078c4 <xTaskIncrementTick+0x154>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	4a3e      	ldr	r2, [pc, #248]	@ (80078c8 <xTaskIncrementTick+0x158>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4b3e      	ldr	r3, [pc, #248]	@ (80078cc <xTaskIncrementTick+0x15c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	4a3c      	ldr	r2, [pc, #240]	@ (80078cc <xTaskIncrementTick+0x15c>)
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	f000 faf0 	bl	8007dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077e0:	4b3b      	ldr	r3, [pc, #236]	@ (80078d0 <xTaskIncrementTick+0x160>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d349      	bcc.n	800787e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077ea:	4b36      	ldr	r3, [pc, #216]	@ (80078c4 <xTaskIncrementTick+0x154>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077f4:	4b36      	ldr	r3, [pc, #216]	@ (80078d0 <xTaskIncrementTick+0x160>)
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295
 80077fa:	601a      	str	r2, [r3, #0]
					break;
 80077fc:	e03f      	b.n	800787e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fe:	4b31      	ldr	r3, [pc, #196]	@ (80078c4 <xTaskIncrementTick+0x154>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	429a      	cmp	r2, r3
 8007814:	d203      	bcs.n	800781e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007816:	4a2e      	ldr	r2, [pc, #184]	@ (80078d0 <xTaskIncrementTick+0x160>)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800781c:	e02f      	b.n	800787e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	3304      	adds	r3, #4
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fc78 	bl	8006118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	3318      	adds	r3, #24
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fc6f 	bl	8006118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783e:	4b25      	ldr	r3, [pc, #148]	@ (80078d4 <xTaskIncrementTick+0x164>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d903      	bls.n	800784e <xTaskIncrementTick+0xde>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	4a22      	ldr	r2, [pc, #136]	@ (80078d4 <xTaskIncrementTick+0x164>)
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a1f      	ldr	r2, [pc, #124]	@ (80078d8 <xTaskIncrementTick+0x168>)
 800785c:	441a      	add	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3304      	adds	r3, #4
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f7fe fbfa 	bl	800605e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786e:	4b1b      	ldr	r3, [pc, #108]	@ (80078dc <xTaskIncrementTick+0x16c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	429a      	cmp	r2, r3
 8007876:	d3b8      	bcc.n	80077ea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800787c:	e7b5      	b.n	80077ea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800787e:	4b17      	ldr	r3, [pc, #92]	@ (80078dc <xTaskIncrementTick+0x16c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007884:	4914      	ldr	r1, [pc, #80]	@ (80078d8 <xTaskIncrementTick+0x168>)
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d907      	bls.n	80078a6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	e004      	b.n	80078a6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800789c:	4b10      	ldr	r3, [pc, #64]	@ (80078e0 <xTaskIncrementTick+0x170>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	4a0f      	ldr	r2, [pc, #60]	@ (80078e0 <xTaskIncrementTick+0x170>)
 80078a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078a6:	4b0f      	ldr	r3, [pc, #60]	@ (80078e4 <xTaskIncrementTick+0x174>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80078ae:	2301      	movs	r3, #1
 80078b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078b2:	697b      	ldr	r3, [r7, #20]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200013dc 	.word	0x200013dc
 80078c0:	200013b8 	.word	0x200013b8
 80078c4:	2000136c 	.word	0x2000136c
 80078c8:	20001370 	.word	0x20001370
 80078cc:	200013cc 	.word	0x200013cc
 80078d0:	200013d4 	.word	0x200013d4
 80078d4:	200013bc 	.word	0x200013bc
 80078d8:	20000ee4 	.word	0x20000ee4
 80078dc:	20000ee0 	.word	0x20000ee0
 80078e0:	200013c4 	.word	0x200013c4
 80078e4:	200013c8 	.word	0x200013c8

080078e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078ee:	4b2c      	ldr	r3, [pc, #176]	@ (80079a0 <vTaskSwitchContext+0xb8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078f6:	4b2b      	ldr	r3, [pc, #172]	@ (80079a4 <vTaskSwitchContext+0xbc>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078fc:	e049      	b.n	8007992 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80078fe:	4b29      	ldr	r3, [pc, #164]	@ (80079a4 <vTaskSwitchContext+0xbc>)
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007904:	4b28      	ldr	r3, [pc, #160]	@ (80079a8 <vTaskSwitchContext+0xc0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	e013      	b.n	8007934 <vTaskSwitchContext+0x4c>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10d      	bne.n	800792e <vTaskSwitchContext+0x46>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	b672      	cpsid	i
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	b662      	cpsie	i
 8007926:	607b      	str	r3, [r7, #4]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <vTaskSwitchContext+0x42>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3b01      	subs	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	491d      	ldr	r1, [pc, #116]	@ (80079ac <vTaskSwitchContext+0xc4>)
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	440b      	add	r3, r1
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0e1      	beq.n	800790c <vTaskSwitchContext+0x24>
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <vTaskSwitchContext+0xc4>)
 8007954:	4413      	add	r3, r2
 8007956:	60bb      	str	r3, [r7, #8]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	3308      	adds	r3, #8
 800796a:	429a      	cmp	r2, r3
 800796c:	d104      	bne.n	8007978 <vTaskSwitchContext+0x90>
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	605a      	str	r2, [r3, #4]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	4a0c      	ldr	r2, [pc, #48]	@ (80079b0 <vTaskSwitchContext+0xc8>)
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	4a09      	ldr	r2, [pc, #36]	@ (80079a8 <vTaskSwitchContext+0xc0>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007988:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <vTaskSwitchContext+0xc8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3354      	adds	r3, #84	@ 0x54
 800798e:	4a09      	ldr	r2, [pc, #36]	@ (80079b4 <vTaskSwitchContext+0xcc>)
 8007990:	6013      	str	r3, [r2, #0]
}
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	200013dc 	.word	0x200013dc
 80079a4:	200013c8 	.word	0x200013c8
 80079a8:	200013bc 	.word	0x200013bc
 80079ac:	20000ee4 	.word	0x20000ee4
 80079b0:	20000ee0 	.word	0x20000ee0
 80079b4:	2000001c 	.word	0x2000001c

080079b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10d      	bne.n	80079e4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	b672      	cpsid	i
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	b662      	cpsie	i
 80079dc:	60fb      	str	r3, [r7, #12]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079e4:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <vTaskPlaceOnEventList+0x4c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3318      	adds	r3, #24
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fe fb5a 	bl	80060a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079f2:	2101      	movs	r1, #1
 80079f4:	6838      	ldr	r0, [r7, #0]
 80079f6:	f000 fba9 	bl	800814c <prvAddCurrentTaskToDelayedList>
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000ee0 	.word	0x20000ee0

08007a08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10d      	bne.n	8007a36 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	b672      	cpsid	i
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	b662      	cpsie	i
 8007a2e:	617b      	str	r3, [r7, #20]
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	e7fd      	b.n	8007a32 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a36:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <vTaskPlaceOnEventListRestricted+0x58>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7fe fb0d 	bl	800605e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	68b8      	ldr	r0, [r7, #8]
 8007a54:	f000 fb7a 	bl	800814c <prvAddCurrentTaskToDelayedList>
	}
 8007a58:	bf00      	nop
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000ee0 	.word	0x20000ee0

08007a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	b672      	cpsid	i
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	b662      	cpsie	i
 8007a8e:	60fb      	str	r3, [r7, #12]
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	e7fd      	b.n	8007a92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	3318      	adds	r3, #24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fb3c 	bl	8006118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <xTaskRemoveFromEventList+0xb4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11d      	bne.n	8007ae4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe fb33 	bl	8006118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab6:	4b19      	ldr	r3, [pc, #100]	@ (8007b1c <xTaskRemoveFromEventList+0xb8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d903      	bls.n	8007ac6 <xTaskRemoveFromEventList+0x62>
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	4a16      	ldr	r2, [pc, #88]	@ (8007b1c <xTaskRemoveFromEventList+0xb8>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a13      	ldr	r2, [pc, #76]	@ (8007b20 <xTaskRemoveFromEventList+0xbc>)
 8007ad4:	441a      	add	r2, r3
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fe fabe 	bl	800605e <vListInsertEnd>
 8007ae2:	e005      	b.n	8007af0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4619      	mov	r1, r3
 8007aea:	480e      	ldr	r0, [pc, #56]	@ (8007b24 <xTaskRemoveFromEventList+0xc0>)
 8007aec:	f7fe fab7 	bl	800605e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b28 <xTaskRemoveFromEventList+0xc4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d905      	bls.n	8007b0a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007afe:	2301      	movs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b02:	4b0a      	ldr	r3, [pc, #40]	@ (8007b2c <xTaskRemoveFromEventList+0xc8>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	e001      	b.n	8007b0e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b0e:	697b      	ldr	r3, [r7, #20]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	200013dc 	.word	0x200013dc
 8007b1c:	200013bc 	.word	0x200013bc
 8007b20:	20000ee4 	.word	0x20000ee4
 8007b24:	20001374 	.word	0x20001374
 8007b28:	20000ee0 	.word	0x20000ee0
 8007b2c:	200013c8 	.word	0x200013c8

08007b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b38:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <vTaskInternalSetTimeOutState+0x24>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b40:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <vTaskInternalSetTimeOutState+0x28>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	605a      	str	r2, [r3, #4]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	200013cc 	.word	0x200013cc
 8007b58:	200013b8 	.word	0x200013b8

08007b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10d      	bne.n	8007b88 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	b672      	cpsid	i
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	b662      	cpsie	i
 8007b80:	613b      	str	r3, [r7, #16]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10d      	bne.n	8007baa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	b672      	cpsid	i
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	b662      	cpsie	i
 8007ba2:	60fb      	str	r3, [r7, #12]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007baa:	f000 ff97 	bl	8008adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bae:	4b1d      	ldr	r3, [pc, #116]	@ (8007c24 <xTaskCheckForTimeOut+0xc8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	d102      	bne.n	8007bce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
 8007bcc:	e023      	b.n	8007c16 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b15      	ldr	r3, [pc, #84]	@ (8007c28 <xTaskCheckForTimeOut+0xcc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d007      	beq.n	8007bea <xTaskCheckForTimeOut+0x8e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e015      	b.n	8007c16 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d20b      	bcs.n	8007c0c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	1ad2      	subs	r2, r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff95 	bl	8007b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	e004      	b.n	8007c16 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c16:	f000 ff97 	bl	8008b48 <vPortExitCritical>

	return xReturn;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	200013b8 	.word	0x200013b8
 8007c28:	200013cc 	.word	0x200013cc

08007c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c30:	4b03      	ldr	r3, [pc, #12]	@ (8007c40 <vTaskMissedYield+0x14>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	601a      	str	r2, [r3, #0]
}
 8007c36:	bf00      	nop
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	200013c8 	.word	0x200013c8

08007c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c4c:	f000 f852 	bl	8007cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <prvIdleTask+0x28>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d9f9      	bls.n	8007c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c58:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <prvIdleTask+0x2c>)
 8007c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c68:	e7f0      	b.n	8007c4c <prvIdleTask+0x8>
 8007c6a:	bf00      	nop
 8007c6c:	20000ee4 	.word	0x20000ee4
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	e00c      	b.n	8007c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4a12      	ldr	r2, [pc, #72]	@ (8007cd4 <prvInitialiseTaskLists+0x60>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe f9b8 	bl	8006004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3301      	adds	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b37      	cmp	r3, #55	@ 0x37
 8007c9e:	d9ef      	bls.n	8007c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ca0:	480d      	ldr	r0, [pc, #52]	@ (8007cd8 <prvInitialiseTaskLists+0x64>)
 8007ca2:	f7fe f9af 	bl	8006004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ca6:	480d      	ldr	r0, [pc, #52]	@ (8007cdc <prvInitialiseTaskLists+0x68>)
 8007ca8:	f7fe f9ac 	bl	8006004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cac:	480c      	ldr	r0, [pc, #48]	@ (8007ce0 <prvInitialiseTaskLists+0x6c>)
 8007cae:	f7fe f9a9 	bl	8006004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cb2:	480c      	ldr	r0, [pc, #48]	@ (8007ce4 <prvInitialiseTaskLists+0x70>)
 8007cb4:	f7fe f9a6 	bl	8006004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cb8:	480b      	ldr	r0, [pc, #44]	@ (8007ce8 <prvInitialiseTaskLists+0x74>)
 8007cba:	f7fe f9a3 	bl	8006004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <prvInitialiseTaskLists+0x78>)
 8007cc0:	4a05      	ldr	r2, [pc, #20]	@ (8007cd8 <prvInitialiseTaskLists+0x64>)
 8007cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf0 <prvInitialiseTaskLists+0x7c>)
 8007cc6:	4a05      	ldr	r2, [pc, #20]	@ (8007cdc <prvInitialiseTaskLists+0x68>)
 8007cc8:	601a      	str	r2, [r3, #0]
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20000ee4 	.word	0x20000ee4
 8007cd8:	20001344 	.word	0x20001344
 8007cdc:	20001358 	.word	0x20001358
 8007ce0:	20001374 	.word	0x20001374
 8007ce4:	20001388 	.word	0x20001388
 8007ce8:	200013a0 	.word	0x200013a0
 8007cec:	2000136c 	.word	0x2000136c
 8007cf0:	20001370 	.word	0x20001370

08007cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cfa:	e019      	b.n	8007d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cfc:	f000 feee 	bl	8008adc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d00:	4b10      	ldr	r3, [pc, #64]	@ (8007d44 <prvCheckTasksWaitingTermination+0x50>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fa03 	bl	8006118 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <prvCheckTasksWaitingTermination+0x54>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4a0b      	ldr	r2, [pc, #44]	@ (8007d48 <prvCheckTasksWaitingTermination+0x54>)
 8007d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d4c <prvCheckTasksWaitingTermination+0x58>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4a0a      	ldr	r2, [pc, #40]	@ (8007d4c <prvCheckTasksWaitingTermination+0x58>)
 8007d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d26:	f000 ff0f 	bl	8008b48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f810 	bl	8007d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d30:	4b06      	ldr	r3, [pc, #24]	@ (8007d4c <prvCheckTasksWaitingTermination+0x58>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e1      	bne.n	8007cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001388 	.word	0x20001388
 8007d48:	200013b4 	.word	0x200013b4
 8007d4c:	2000139c 	.word	0x2000139c

08007d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3354      	adds	r3, #84	@ 0x54
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 f9dd 	bl	800911c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d108      	bne.n	8007d7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f8af 	bl	8008ed4 <vPortFree>
				vPortFree( pxTCB );
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 f8ac 	bl	8008ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d7c:	e01b      	b.n	8007db6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d103      	bne.n	8007d90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 f8a3 	bl	8008ed4 <vPortFree>
	}
 8007d8e:	e012      	b.n	8007db6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d00d      	beq.n	8007db6 <prvDeleteTCB+0x66>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	b672      	cpsid	i
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	b662      	cpsie	i
 8007dae:	60fb      	str	r3, [r7, #12]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <prvDeleteTCB+0x62>
	}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <prvResetNextTaskUnblockTime+0x38>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dfc <prvResetNextTaskUnblockTime+0x3c>)
 8007dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dd8:	e008      	b.n	8007dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dda:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <prvResetNextTaskUnblockTime+0x38>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	4a04      	ldr	r2, [pc, #16]	@ (8007dfc <prvResetNextTaskUnblockTime+0x3c>)
 8007dea:	6013      	str	r3, [r2, #0]
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	2000136c 	.word	0x2000136c
 8007dfc:	200013d4 	.word	0x200013d4

08007e00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007e06:	4b05      	ldr	r3, [pc, #20]	@ (8007e1c <xTaskGetCurrentTaskHandle+0x1c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007e0c:	687b      	ldr	r3, [r7, #4]
	}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000ee0 	.word	0x20000ee0

08007e20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e26:	4b0b      	ldr	r3, [pc, #44]	@ (8007e54 <xTaskGetSchedulerState+0x34>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	e008      	b.n	8007e46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e34:	4b08      	ldr	r3, [pc, #32]	@ (8007e58 <xTaskGetSchedulerState+0x38>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	607b      	str	r3, [r7, #4]
 8007e40:	e001      	b.n	8007e46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e46:	687b      	ldr	r3, [r7, #4]
	}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	200013c0 	.word	0x200013c0
 8007e58:	200013dc 	.word	0x200013dc

08007e5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d051      	beq.n	8007f16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e76:	4b2a      	ldr	r3, [pc, #168]	@ (8007f20 <xTaskPriorityInherit+0xc4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d241      	bcs.n	8007f04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	db06      	blt.n	8007e96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e88:	4b25      	ldr	r3, [pc, #148]	@ (8007f20 <xTaskPriorityInherit+0xc4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6959      	ldr	r1, [r3, #20]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f24 <xTaskPriorityInherit+0xc8>)
 8007ea8:	4413      	add	r3, r2
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d122      	bne.n	8007ef4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe f930 	bl	8006118 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007eb8:	4b19      	ldr	r3, [pc, #100]	@ (8007f20 <xTaskPriorityInherit+0xc4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec6:	4b18      	ldr	r3, [pc, #96]	@ (8007f28 <xTaskPriorityInherit+0xcc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d903      	bls.n	8007ed6 <xTaskPriorityInherit+0x7a>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed2:	4a15      	ldr	r2, [pc, #84]	@ (8007f28 <xTaskPriorityInherit+0xcc>)
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4a10      	ldr	r2, [pc, #64]	@ (8007f24 <xTaskPriorityInherit+0xc8>)
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4619      	mov	r1, r3
 8007eec:	4610      	mov	r0, r2
 8007eee:	f7fe f8b6 	bl	800605e <vListInsertEnd>
 8007ef2:	e004      	b.n	8007efe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <xTaskPriorityInherit+0xc4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007efe:	2301      	movs	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	e008      	b.n	8007f16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f08:	4b05      	ldr	r3, [pc, #20]	@ (8007f20 <xTaskPriorityInherit+0xc4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d201      	bcs.n	8007f16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f16:	68fb      	ldr	r3, [r7, #12]
	}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000ee0 	.word	0x20000ee0
 8007f24:	20000ee4 	.word	0x20000ee4
 8007f28:	200013bc 	.word	0x200013bc

08007f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d05c      	beq.n	8007ffc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f42:	4b31      	ldr	r3, [pc, #196]	@ (8008008 <xTaskPriorityDisinherit+0xdc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d00d      	beq.n	8007f68 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	b672      	cpsid	i
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	b662      	cpsie	i
 8007f60:	60fb      	str	r3, [r7, #12]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10d      	bne.n	8007f8c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	b672      	cpsid	i
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	b662      	cpsie	i
 8007f84:	60bb      	str	r3, [r7, #8]
}
 8007f86:	bf00      	nop
 8007f88:	bf00      	nop
 8007f8a:	e7fd      	b.n	8007f88 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f90:	1e5a      	subs	r2, r3, #1
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d02c      	beq.n	8007ffc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d128      	bne.n	8007ffc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	3304      	adds	r3, #4
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe f8b2 	bl	8006118 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800800c <xTaskPriorityDisinherit+0xe0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d903      	bls.n	8007fdc <xTaskPriorityDisinherit+0xb0>
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800800c <xTaskPriorityDisinherit+0xe0>)
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4a09      	ldr	r2, [pc, #36]	@ (8008010 <xTaskPriorityDisinherit+0xe4>)
 8007fea:	441a      	add	r2, r3
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3304      	adds	r3, #4
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f7fe f833 	bl	800605e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ffc:	697b      	ldr	r3, [r7, #20]
	}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000ee0 	.word	0x20000ee0
 800800c:	200013bc 	.word	0x200013bc
 8008010:	20000ee4 	.word	0x20000ee4

08008014 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d070      	beq.n	800810e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10d      	bne.n	8008050 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	b672      	cpsid	i
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	b662      	cpsie	i
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	e7fd      	b.n	800804c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d902      	bls.n	8008060 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	e002      	b.n	8008066 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008064:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	429a      	cmp	r2, r3
 800806e:	d04e      	beq.n	800810e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	429a      	cmp	r2, r3
 8008078:	d149      	bne.n	800810e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800807a:	4b27      	ldr	r3, [pc, #156]	@ (8008118 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	429a      	cmp	r2, r3
 8008082:	d10d      	bne.n	80080a0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	b672      	cpsid	i
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	b662      	cpsie	i
 8008098:	60bb      	str	r3, [r7, #8]
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	db04      	blt.n	80080be <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	6959      	ldr	r1, [r3, #20]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4a13      	ldr	r2, [pc, #76]	@ (800811c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80080ce:	4413      	add	r3, r2
 80080d0:	4299      	cmp	r1, r3
 80080d2:	d11c      	bne.n	800810e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe f81d 	bl	8006118 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008120 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008120 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a07      	ldr	r2, [pc, #28]	@ (800811c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008100:	441a      	add	r2, r3
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fd ffa8 	bl	800605e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800810e:	bf00      	nop
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000ee0 	.word	0x20000ee0
 800811c:	20000ee4 	.word	0x20000ee4
 8008120:	200013bc 	.word	0x200013bc

08008124 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008128:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <pvTaskIncrementMutexHeldCount+0x24>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008130:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <pvTaskIncrementMutexHeldCount+0x24>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008136:	3201      	adds	r2, #1
 8008138:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800813a:	4b03      	ldr	r3, [pc, #12]	@ (8008148 <pvTaskIncrementMutexHeldCount+0x24>)
 800813c:	681b      	ldr	r3, [r3, #0]
	}
 800813e:	4618      	mov	r0, r3
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20000ee0 	.word	0x20000ee0

0800814c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008156:	4b21      	ldr	r3, [pc, #132]	@ (80081dc <prvAddCurrentTaskToDelayedList+0x90>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815c:	4b20      	ldr	r3, [pc, #128]	@ (80081e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7fd ffd8 	bl	8006118 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d10a      	bne.n	8008186 <prvAddCurrentTaskToDelayedList+0x3a>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008176:	4b1a      	ldr	r3, [pc, #104]	@ (80081e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3304      	adds	r3, #4
 800817c:	4619      	mov	r1, r3
 800817e:	4819      	ldr	r0, [pc, #100]	@ (80081e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008180:	f7fd ff6d 	bl	800605e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008184:	e026      	b.n	80081d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4413      	add	r3, r2
 800818c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800818e:	4b14      	ldr	r3, [pc, #80]	@ (80081e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	429a      	cmp	r2, r3
 800819c:	d209      	bcs.n	80081b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800819e:	4b12      	ldr	r3, [pc, #72]	@ (80081e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fd ff7b 	bl	80060a6 <vListInsert>
}
 80081b0:	e010      	b.n	80081d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b2:	4b0e      	ldr	r3, [pc, #56]	@ (80081ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4b0a      	ldr	r3, [pc, #40]	@ (80081e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3304      	adds	r3, #4
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f7fd ff71 	bl	80060a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081c4:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d202      	bcs.n	80081d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081ce:	4a08      	ldr	r2, [pc, #32]	@ (80081f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6013      	str	r3, [r2, #0]
}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200013b8 	.word	0x200013b8
 80081e0:	20000ee0 	.word	0x20000ee0
 80081e4:	200013a0 	.word	0x200013a0
 80081e8:	20001370 	.word	0x20001370
 80081ec:	2000136c 	.word	0x2000136c
 80081f0:	200013d4 	.word	0x200013d4

080081f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08a      	sub	sp, #40	@ 0x28
 80081f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081fe:	f000 fb21 	bl	8008844 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008202:	4b1e      	ldr	r3, [pc, #120]	@ (800827c <xTimerCreateTimerTask+0x88>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d021      	beq.n	800824e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008212:	1d3a      	adds	r2, r7, #4
 8008214:	f107 0108 	add.w	r1, r7, #8
 8008218:	f107 030c 	add.w	r3, r7, #12
 800821c:	4618      	mov	r0, r3
 800821e:	f7fd fed7 	bl	8005fd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	9202      	str	r2, [sp, #8]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	2302      	movs	r3, #2
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2300      	movs	r3, #0
 8008232:	460a      	mov	r2, r1
 8008234:	4912      	ldr	r1, [pc, #72]	@ (8008280 <xTimerCreateTimerTask+0x8c>)
 8008236:	4813      	ldr	r0, [pc, #76]	@ (8008284 <xTimerCreateTimerTask+0x90>)
 8008238:	f7fe ff6a 	bl	8007110 <xTaskCreateStatic>
 800823c:	4603      	mov	r3, r0
 800823e:	4a12      	ldr	r2, [pc, #72]	@ (8008288 <xTimerCreateTimerTask+0x94>)
 8008240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008242:	4b11      	ldr	r3, [pc, #68]	@ (8008288 <xTimerCreateTimerTask+0x94>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800824a:	2301      	movs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10d      	bne.n	8008270 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008258:	b672      	cpsid	i
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	b662      	cpsie	i
 8008268:	613b      	str	r3, [r7, #16]
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	e7fd      	b.n	800826c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008270:	697b      	ldr	r3, [r7, #20]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20001410 	.word	0x20001410
 8008280:	0800937c 	.word	0x0800937c
 8008284:	080083cd 	.word	0x080083cd
 8008288:	20001414 	.word	0x20001414

0800828c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	@ 0x28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <xTimerGenericCommand+0x34>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a8:	b672      	cpsid	i
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	b662      	cpsie	i
 80082b8:	623b      	str	r3, [r7, #32]
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082c0:	4b19      	ldr	r3, [pc, #100]	@ (8008328 <xTimerGenericCommand+0x9c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d02a      	beq.n	800831e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b05      	cmp	r3, #5
 80082d8:	dc18      	bgt.n	800830c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082da:	f7ff fda1 	bl	8007e20 <xTaskGetSchedulerState>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d109      	bne.n	80082f8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082e4:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <xTimerGenericCommand+0x9c>)
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	f107 0110 	add.w	r1, r7, #16
 80082ec:	2300      	movs	r3, #0
 80082ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f0:	f7fe f952 	bl	8006598 <xQueueGenericSend>
 80082f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80082f6:	e012      	b.n	800831e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008328 <xTimerGenericCommand+0x9c>)
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	f107 0110 	add.w	r1, r7, #16
 8008300:	2300      	movs	r3, #0
 8008302:	2200      	movs	r2, #0
 8008304:	f7fe f948 	bl	8006598 <xQueueGenericSend>
 8008308:	6278      	str	r0, [r7, #36]	@ 0x24
 800830a:	e008      	b.n	800831e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800830c:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <xTimerGenericCommand+0x9c>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	f107 0110 	add.w	r1, r7, #16
 8008314:	2300      	movs	r3, #0
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	f7fe fa48 	bl	80067ac <xQueueGenericSendFromISR>
 800831c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008320:	4618      	mov	r0, r3
 8008322:	3728      	adds	r7, #40	@ 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20001410 	.word	0x20001410

0800832c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af02      	add	r7, sp, #8
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008336:	4b24      	ldr	r3, [pc, #144]	@ (80083c8 <prvProcessExpiredTimer+0x9c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	3304      	adds	r3, #4
 8008344:	4618      	mov	r0, r3
 8008346:	f7fd fee7 	bl	8006118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d025      	beq.n	80083a4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	699a      	ldr	r2, [r3, #24]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	18d1      	adds	r1, r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	6978      	ldr	r0, [r7, #20]
 8008366:	f000 f8d7 	bl	8008518 <prvInsertTimerInActiveList>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d022      	beq.n	80083b6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	2100      	movs	r1, #0
 800837a:	6978      	ldr	r0, [r7, #20]
 800837c:	f7ff ff86 	bl	800828c <xTimerGenericCommand>
 8008380:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d116      	bne.n	80083b6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	b672      	cpsid	i
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	b662      	cpsie	i
 800839c:	60fb      	str	r3, [r7, #12]
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	4798      	blx	r3
}
 80083be:	bf00      	nop
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20001408 	.word	0x20001408

080083cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083d4:	f107 0308 	add.w	r3, r7, #8
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 f859 	bl	8008490 <prvGetNextExpireTime>
 80083de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f805 	bl	80083f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083ea:	f000 f8d7 	bl	800859c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083ee:	bf00      	nop
 80083f0:	e7f0      	b.n	80083d4 <prvTimerTask+0x8>
	...

080083f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083fe:	f7ff f8f9 	bl	80075f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f866 	bl	80084d8 <prvSampleTimeNow>
 800840c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d130      	bne.n	8008476 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <prvProcessTimerOrBlockTask+0x3c>
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	429a      	cmp	r2, r3
 8008420:	d806      	bhi.n	8008430 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008422:	f7ff f8f5 	bl	8007610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ff7f 	bl	800832c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800842e:	e024      	b.n	800847a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008436:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <prvProcessTimerOrBlockTask+0x90>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <prvProcessTimerOrBlockTask+0x50>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <prvProcessTimerOrBlockTask+0x52>
 8008444:	2300      	movs	r3, #0
 8008446:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008448:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <prvProcessTimerOrBlockTask+0x94>)
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4619      	mov	r1, r3
 8008456:	f7fe fe27 	bl	80070a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800845a:	f7ff f8d9 	bl	8007610 <xTaskResumeAll>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008464:	4b09      	ldr	r3, [pc, #36]	@ (800848c <prvProcessTimerOrBlockTask+0x98>)
 8008466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	f3bf 8f6f 	isb	sy
}
 8008474:	e001      	b.n	800847a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008476:	f7ff f8cb 	bl	8007610 <xTaskResumeAll>
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	2000140c 	.word	0x2000140c
 8008488:	20001410 	.word	0x20001410
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008498:	4b0e      	ldr	r3, [pc, #56]	@ (80084d4 <prvGetNextExpireTime+0x44>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <prvGetNextExpireTime+0x16>
 80084a2:	2201      	movs	r2, #1
 80084a4:	e000      	b.n	80084a8 <prvGetNextExpireTime+0x18>
 80084a6:	2200      	movs	r2, #0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d105      	bne.n	80084c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084b4:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <prvGetNextExpireTime+0x44>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	e001      	b.n	80084c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084c4:	68fb      	ldr	r3, [r7, #12]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20001408 	.word	0x20001408

080084d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084e0:	f7ff f936 	bl	8007750 <xTaskGetTickCount>
 80084e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <prvSampleTimeNow+0x3c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d205      	bcs.n	80084fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084f0:	f000 f940 	bl	8008774 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e002      	b.n	8008502 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008502:	4a04      	ldr	r2, [pc, #16]	@ (8008514 <prvSampleTimeNow+0x3c>)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20001418 	.word	0x20001418

08008518 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	429a      	cmp	r2, r3
 800853c:	d812      	bhi.n	8008564 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	429a      	cmp	r2, r3
 800854a:	d302      	bcc.n	8008552 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800854c:	2301      	movs	r3, #1
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e01b      	b.n	800858a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008552:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <prvInsertTimerInActiveList+0x7c>)
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3304      	adds	r3, #4
 800855a:	4619      	mov	r1, r3
 800855c:	4610      	mov	r0, r2
 800855e:	f7fd fda2 	bl	80060a6 <vListInsert>
 8008562:	e012      	b.n	800858a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d206      	bcs.n	800857a <prvInsertTimerInActiveList+0x62>
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d302      	bcc.n	800857a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	e007      	b.n	800858a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800857a:	4b07      	ldr	r3, [pc, #28]	@ (8008598 <prvInsertTimerInActiveList+0x80>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3304      	adds	r3, #4
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7fd fd8e 	bl	80060a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800858a:	697b      	ldr	r3, [r7, #20]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	2000140c 	.word	0x2000140c
 8008598:	20001408 	.word	0x20001408

0800859c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	@ 0x38
 80085a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085a2:	e0d4      	b.n	800874e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	da1b      	bge.n	80085e2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085aa:	1d3b      	adds	r3, r7, #4
 80085ac:	3304      	adds	r3, #4
 80085ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10d      	bne.n	80085d2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	b672      	cpsid	i
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	b662      	cpsie	i
 80085ca:	61fb      	str	r3, [r7, #28]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d8:	6850      	ldr	r0, [r2, #4]
 80085da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085dc:	6892      	ldr	r2, [r2, #8]
 80085de:	4611      	mov	r1, r2
 80085e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f2c0 80b2 	blt.w	800874e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	3304      	adds	r3, #4
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fd fd8c 	bl	8006118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008600:	463b      	mov	r3, r7
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff ff68 	bl	80084d8 <prvSampleTimeNow>
 8008608:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b09      	cmp	r3, #9
 800860e:	f200 809b 	bhi.w	8008748 <prvProcessReceivedCommands+0x1ac>
 8008612:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <prvProcessReceivedCommands+0x7c>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008641 	.word	0x08008641
 800861c:	08008641 	.word	0x08008641
 8008620:	08008641 	.word	0x08008641
 8008624:	080086bb 	.word	0x080086bb
 8008628:	080086cf 	.word	0x080086cf
 800862c:	0800871f 	.word	0x0800871f
 8008630:	08008641 	.word	0x08008641
 8008634:	08008641 	.word	0x08008641
 8008638:	080086bb 	.word	0x080086bb
 800863c:	080086cf 	.word	0x080086cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	18d1      	adds	r1, r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800865e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008660:	f7ff ff5a 	bl	8008518 <prvInsertTimerInActiveList>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d070      	beq.n	800874c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d065      	beq.n	800874c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	441a      	add	r2, r3
 8008688:	2300      	movs	r3, #0
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	2100      	movs	r1, #0
 8008690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008692:	f7ff fdfb 	bl	800828c <xTimerGenericCommand>
 8008696:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d156      	bne.n	800874c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	61bb      	str	r3, [r7, #24]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086cc:	e03f      	b.n	800874e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10d      	bne.n	800870a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	b672      	cpsid	i
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	b662      	cpsie	i
 8008702:	617b      	str	r3, [r7, #20]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	18d1      	adds	r1, r2, r3
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008718:	f7ff fefe 	bl	8008518 <prvInsertTimerInActiveList>
					break;
 800871c:	e017      	b.n	800874e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d103      	bne.n	8008734 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800872c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800872e:	f000 fbd1 	bl	8008ed4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008732:	e00c      	b.n	800874e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008736:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008746:	e002      	b.n	800874e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <prvProcessReceivedCommands+0x1b2>
					break;
 800874c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800874e:	4b08      	ldr	r3, [pc, #32]	@ (8008770 <prvProcessReceivedCommands+0x1d4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	1d39      	adds	r1, r7, #4
 8008754:	2200      	movs	r2, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe f8cc 	bl	80068f4 <xQueueReceive>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	f47f af20 	bne.w	80085a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3730      	adds	r7, #48	@ 0x30
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20001410 	.word	0x20001410

08008774 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800877a:	e04b      	b.n	8008814 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800877c:	4b2f      	ldr	r3, [pc, #188]	@ (800883c <prvSwitchTimerLists+0xc8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008786:	4b2d      	ldr	r3, [pc, #180]	@ (800883c <prvSwitchTimerLists+0xc8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fd fcbf 	bl	8006118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d031      	beq.n	8008814 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d90e      	bls.n	80087e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087ce:	4b1b      	ldr	r3, [pc, #108]	@ (800883c <prvSwitchTimerLists+0xc8>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fd fc64 	bl	80060a6 <vListInsert>
 80087de:	e019      	b.n	8008814 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087e0:	2300      	movs	r3, #0
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	2100      	movs	r1, #0
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fd4e 	bl	800828c <xTimerGenericCommand>
 80087f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10d      	bne.n	8008814 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fc:	b672      	cpsid	i
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	b662      	cpsie	i
 800880c:	603b      	str	r3, [r7, #0]
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	e7fd      	b.n	8008810 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008814:	4b09      	ldr	r3, [pc, #36]	@ (800883c <prvSwitchTimerLists+0xc8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ae      	bne.n	800877c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <prvSwitchTimerLists+0xc8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008824:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <prvSwitchTimerLists+0xcc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a04      	ldr	r2, [pc, #16]	@ (800883c <prvSwitchTimerLists+0xc8>)
 800882a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800882c:	4a04      	ldr	r2, [pc, #16]	@ (8008840 <prvSwitchTimerLists+0xcc>)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6013      	str	r3, [r2, #0]
}
 8008832:	bf00      	nop
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20001408 	.word	0x20001408
 8008840:	2000140c 	.word	0x2000140c

08008844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800884a:	f000 f947 	bl	8008adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800884e:	4b15      	ldr	r3, [pc, #84]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d120      	bne.n	8008898 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008856:	4814      	ldr	r0, [pc, #80]	@ (80088a8 <prvCheckForValidListAndQueue+0x64>)
 8008858:	f7fd fbd4 	bl	8006004 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800885c:	4813      	ldr	r0, [pc, #76]	@ (80088ac <prvCheckForValidListAndQueue+0x68>)
 800885e:	f7fd fbd1 	bl	8006004 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008862:	4b13      	ldr	r3, [pc, #76]	@ (80088b0 <prvCheckForValidListAndQueue+0x6c>)
 8008864:	4a10      	ldr	r2, [pc, #64]	@ (80088a8 <prvCheckForValidListAndQueue+0x64>)
 8008866:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <prvCheckForValidListAndQueue+0x70>)
 800886a:	4a10      	ldr	r2, [pc, #64]	@ (80088ac <prvCheckForValidListAndQueue+0x68>)
 800886c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800886e:	2300      	movs	r3, #0
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <prvCheckForValidListAndQueue+0x74>)
 8008874:	4a11      	ldr	r2, [pc, #68]	@ (80088bc <prvCheckForValidListAndQueue+0x78>)
 8008876:	2110      	movs	r1, #16
 8008878:	200a      	movs	r0, #10
 800887a:	f7fd fce3 	bl	8006244 <xQueueGenericCreateStatic>
 800887e:	4603      	mov	r3, r0
 8008880:	4a08      	ldr	r2, [pc, #32]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 8008882:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008884:	4b07      	ldr	r3, [pc, #28]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800888c:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	490b      	ldr	r1, [pc, #44]	@ (80088c0 <prvCheckForValidListAndQueue+0x7c>)
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fbde 	bl	8007054 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008898:	f000 f956 	bl	8008b48 <vPortExitCritical>
}
 800889c:	bf00      	nop
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20001410 	.word	0x20001410
 80088a8:	200013e0 	.word	0x200013e0
 80088ac:	200013f4 	.word	0x200013f4
 80088b0:	20001408 	.word	0x20001408
 80088b4:	2000140c 	.word	0x2000140c
 80088b8:	200014bc 	.word	0x200014bc
 80088bc:	2000141c 	.word	0x2000141c
 80088c0:	08009384 	.word	0x08009384

080088c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3b04      	subs	r3, #4
 80088d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80088dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f023 0201 	bic.w	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008928 <pxPortInitialiseStack+0x64>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3b14      	subs	r3, #20
 80088fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3b04      	subs	r3, #4
 800890a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f06f 0202 	mvn.w	r2, #2
 8008912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3b20      	subs	r3, #32
 8008918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	0800892d 	.word	0x0800892d

0800892c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008936:	4b15      	ldr	r3, [pc, #84]	@ (800898c <prvTaskExitError+0x60>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d00d      	beq.n	800895c <prvTaskExitError+0x30>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	b672      	cpsid	i
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	b662      	cpsie	i
 8008954:	60fb      	str	r3, [r7, #12]
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <prvTaskExitError+0x2c>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	b672      	cpsid	i
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	b662      	cpsie	i
 8008970:	60bb      	str	r3, [r7, #8]
}
 8008972:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008974:	bf00      	nop
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0fc      	beq.n	8008976 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000018 	.word	0x20000018

08008990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008990:	4b07      	ldr	r3, [pc, #28]	@ (80089b0 <pxCurrentTCBConst2>)
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	6808      	ldr	r0, [r1, #0]
 8008996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	f380 8809 	msr	PSP, r0
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f380 8811 	msr	BASEPRI, r0
 80089aa:	4770      	bx	lr
 80089ac:	f3af 8000 	nop.w

080089b0 <pxCurrentTCBConst2>:
 80089b0:	20000ee0 	.word	0x20000ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089b8:	4808      	ldr	r0, [pc, #32]	@ (80089dc <prvPortStartFirstTask+0x24>)
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	f380 8808 	msr	MSP, r0
 80089c2:	f04f 0000 	mov.w	r0, #0
 80089c6:	f380 8814 	msr	CONTROL, r0
 80089ca:	b662      	cpsie	i
 80089cc:	b661      	cpsie	f
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	df00      	svc	0
 80089d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089da:	bf00      	nop
 80089dc:	e000ed08 	.word	0xe000ed08

080089e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089e6:	4b37      	ldr	r3, [pc, #220]	@ (8008ac4 <xPortStartScheduler+0xe4>)
 80089e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	22ff      	movs	r2, #255	@ 0xff
 80089f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac8 <xPortStartScheduler+0xe8>)
 8008a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a14:	e009      	b.n	8008a2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a16:	4b2d      	ldr	r3, [pc, #180]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a32:	2b80      	cmp	r3, #128	@ 0x80
 8008a34:	d0ef      	beq.n	8008a16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a36:	4b25      	ldr	r3, [pc, #148]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f1c3 0307 	rsb	r3, r3, #7
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d00d      	beq.n	8008a5e <xPortStartScheduler+0x7e>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a46:	b672      	cpsid	i
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	b662      	cpsie	i
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	4a19      	ldr	r2, [pc, #100]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a68:	4b18      	ldr	r3, [pc, #96]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a70:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <xPortStartScheduler+0xec>)
 8008a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a7c:	4b14      	ldr	r3, [pc, #80]	@ (8008ad0 <xPortStartScheduler+0xf0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a13      	ldr	r2, [pc, #76]	@ (8008ad0 <xPortStartScheduler+0xf0>)
 8008a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a88:	4b11      	ldr	r3, [pc, #68]	@ (8008ad0 <xPortStartScheduler+0xf0>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a10      	ldr	r2, [pc, #64]	@ (8008ad0 <xPortStartScheduler+0xf0>)
 8008a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a94:	f000 f8dc 	bl	8008c50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <xPortStartScheduler+0xf4>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a9e:	f000 f8fb 	bl	8008c98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <xPortStartScheduler+0xf8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad8 <xPortStartScheduler+0xf8>)
 8008aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aae:	f7ff ff83 	bl	80089b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ab2:	f7fe ff19 	bl	80078e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ab6:	f7ff ff39 	bl	800892c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000e400 	.word	0xe000e400
 8008ac8:	2000150c 	.word	0x2000150c
 8008acc:	20001510 	.word	0x20001510
 8008ad0:	e000ed20 	.word	0xe000ed20
 8008ad4:	20000018 	.word	0x20000018
 8008ad8:	e000ef34 	.word	0xe000ef34

08008adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	b672      	cpsid	i
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	b662      	cpsie	i
 8008af6:	607b      	str	r3, [r7, #4]
}
 8008af8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008afa:	4b11      	ldr	r3, [pc, #68]	@ (8008b40 <vPortEnterCritical+0x64>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3301      	adds	r3, #1
 8008b00:	4a0f      	ldr	r2, [pc, #60]	@ (8008b40 <vPortEnterCritical+0x64>)
 8008b02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b04:	4b0e      	ldr	r3, [pc, #56]	@ (8008b40 <vPortEnterCritical+0x64>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d112      	bne.n	8008b32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <vPortEnterCritical+0x68>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00d      	beq.n	8008b32 <vPortEnterCritical+0x56>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	b672      	cpsid	i
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	b662      	cpsie	i
 8008b2a:	603b      	str	r3, [r7, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	e7fd      	b.n	8008b2e <vPortEnterCritical+0x52>
	}
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20000018 	.word	0x20000018
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b4e:	4b13      	ldr	r3, [pc, #76]	@ (8008b9c <vPortExitCritical+0x54>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10d      	bne.n	8008b72 <vPortExitCritical+0x2a>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	b672      	cpsid	i
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	b662      	cpsie	i
 8008b6a:	607b      	str	r3, [r7, #4]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008b72:	4b0a      	ldr	r3, [pc, #40]	@ (8008b9c <vPortExitCritical+0x54>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4a08      	ldr	r2, [pc, #32]	@ (8008b9c <vPortExitCritical+0x54>)
 8008b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <vPortExitCritical+0x54>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <vPortExitCritical+0x48>
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	20000018 	.word	0x20000018

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f01e 0f10 	tst.w	lr, #16
 8008bb0:	bf08      	it	eq
 8008bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bc4:	b672      	cpsid	i
 8008bc6:	f380 8811 	msr	BASEPRI, r0
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	b662      	cpsie	i
 8008bd4:	f7fe fe88 	bl	80078e8 <vTaskSwitchContext>
 8008bd8:	f04f 0000 	mov.w	r0, #0
 8008bdc:	f380 8811 	msr	BASEPRI, r0
 8008be0:	bc09      	pop	{r0, r3}
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	f01e 0f10 	tst.w	lr, #16
 8008bee:	bf08      	it	eq
 8008bf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bf4:	f380 8809 	msr	PSP, r0
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop

08008c00 <pxCurrentTCBConst>:
 8008c00:	20000ee0 	.word	0x20000ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c12:	b672      	cpsid	i
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	b662      	cpsie	i
 8008c22:	607b      	str	r3, [r7, #4]
}
 8008c24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c26:	f7fe fda3 	bl	8007770 <xTaskIncrementTick>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c30:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <SysTick_Handler+0x44>)
 8008c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f383 8811 	msr	BASEPRI, r3
}
 8008c42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c44:	bf00      	nop
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	e000ed04 	.word	0xe000ed04

08008c50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c54:	4b0b      	ldr	r3, [pc, #44]	@ (8008c84 <vPortSetupTimerInterrupt+0x34>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c88 <vPortSetupTimerInterrupt+0x38>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c60:	4b0a      	ldr	r3, [pc, #40]	@ (8008c8c <vPortSetupTimerInterrupt+0x3c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a0a      	ldr	r2, [pc, #40]	@ (8008c90 <vPortSetupTimerInterrupt+0x40>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	099b      	lsrs	r3, r3, #6
 8008c6c:	4a09      	ldr	r2, [pc, #36]	@ (8008c94 <vPortSetupTimerInterrupt+0x44>)
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c72:	4b04      	ldr	r3, [pc, #16]	@ (8008c84 <vPortSetupTimerInterrupt+0x34>)
 8008c74:	2207      	movs	r2, #7
 8008c76:	601a      	str	r2, [r3, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	e000e010 	.word	0xe000e010
 8008c88:	e000e018 	.word	0xe000e018
 8008c8c:	2000000c 	.word	0x2000000c
 8008c90:	10624dd3 	.word	0x10624dd3
 8008c94:	e000e014 	.word	0xe000e014

08008c98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ca8 <vPortEnableVFP+0x10>
 8008c9c:	6801      	ldr	r1, [r0, #0]
 8008c9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ca2:	6001      	str	r1, [r0, #0]
 8008ca4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ca6:	bf00      	nop
 8008ca8:	e000ed88 	.word	0xe000ed88

08008cac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cb2:	f3ef 8305 	mrs	r3, IPSR
 8008cb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b0f      	cmp	r3, #15
 8008cbc:	d917      	bls.n	8008cee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8008d28 <vPortValidateInterruptPriority+0x7c>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cc8:	4b18      	ldr	r3, [pc, #96]	@ (8008d2c <vPortValidateInterruptPriority+0x80>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	7afa      	ldrb	r2, [r7, #11]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d20d      	bcs.n	8008cee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd6:	b672      	cpsid	i
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	b662      	cpsie	i
 8008ce6:	607b      	str	r3, [r7, #4]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cee:	4b10      	ldr	r3, [pc, #64]	@ (8008d30 <vPortValidateInterruptPriority+0x84>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d34 <vPortValidateInterruptPriority+0x88>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d90d      	bls.n	8008d1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	b672      	cpsid	i
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	b662      	cpsie	i
 8008d12:	603b      	str	r3, [r7, #0]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <vPortValidateInterruptPriority+0x6a>
	}
 8008d1a:	bf00      	nop
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	e000e3f0 	.word	0xe000e3f0
 8008d2c:	2000150c 	.word	0x2000150c
 8008d30:	e000ed0c 	.word	0xe000ed0c
 8008d34:	20001510 	.word	0x20001510

08008d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	@ 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d44:	f7fe fc56 	bl	80075f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d48:	4b5d      	ldr	r3, [pc, #372]	@ (8008ec0 <pvPortMalloc+0x188>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d50:	f000 f920 	bl	8008f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d54:	4b5b      	ldr	r3, [pc, #364]	@ (8008ec4 <pvPortMalloc+0x18c>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 8094 	bne.w	8008e8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d020      	beq.n	8008daa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008d68:	2208      	movs	r2, #8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d017      	beq.n	8008daa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	3308      	adds	r3, #8
 8008d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00d      	beq.n	8008daa <pvPortMalloc+0x72>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	b672      	cpsid	i
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	b662      	cpsie	i
 8008da2:	617b      	str	r3, [r7, #20]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06c      	beq.n	8008e8a <pvPortMalloc+0x152>
 8008db0:	4b45      	ldr	r3, [pc, #276]	@ (8008ec8 <pvPortMalloc+0x190>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d867      	bhi.n	8008e8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dba:	4b44      	ldr	r3, [pc, #272]	@ (8008ecc <pvPortMalloc+0x194>)
 8008dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dbe:	4b43      	ldr	r3, [pc, #268]	@ (8008ecc <pvPortMalloc+0x194>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dc4:	e004      	b.n	8008dd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <pvPortMalloc+0xaa>
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f1      	bne.n	8008dc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008de2:	4b37      	ldr	r3, [pc, #220]	@ (8008ec0 <pvPortMalloc+0x188>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d04e      	beq.n	8008e8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2208      	movs	r2, #8
 8008df2:	4413      	add	r3, r2
 8008df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	2308      	movs	r3, #8
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d922      	bls.n	8008e54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <pvPortMalloc+0x104>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e24:	b672      	cpsid	i
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	b662      	cpsie	i
 8008e34:	613b      	str	r3, [r7, #16]
}
 8008e36:	bf00      	nop
 8008e38:	bf00      	nop
 8008e3a:	e7fd      	b.n	8008e38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e4e:	69b8      	ldr	r0, [r7, #24]
 8008e50:	f000 f902 	bl	8009058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec8 <pvPortMalloc+0x190>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec8 <pvPortMalloc+0x190>)
 8008e60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e62:	4b19      	ldr	r3, [pc, #100]	@ (8008ec8 <pvPortMalloc+0x190>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed0 <pvPortMalloc+0x198>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d203      	bcs.n	8008e76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e6e:	4b16      	ldr	r3, [pc, #88]	@ (8008ec8 <pvPortMalloc+0x190>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a17      	ldr	r2, [pc, #92]	@ (8008ed0 <pvPortMalloc+0x198>)
 8008e74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <pvPortMalloc+0x18c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e8a:	f7fe fbc1 	bl	8007610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00d      	beq.n	8008eb4 <pvPortMalloc+0x17c>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9c:	b672      	cpsid	i
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	b662      	cpsie	i
 8008eac:	60fb      	str	r3, [r7, #12]
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	e7fd      	b.n	8008eb0 <pvPortMalloc+0x178>
	return pvReturn;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3728      	adds	r7, #40	@ 0x28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	2000511c 	.word	0x2000511c
 8008ec4:	20005128 	.word	0x20005128
 8008ec8:	20005120 	.word	0x20005120
 8008ecc:	20005114 	.word	0x20005114
 8008ed0:	20005124 	.word	0x20005124

08008ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d04e      	beq.n	8008f84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ee6:	2308      	movs	r3, #8
 8008ee8:	425b      	negs	r3, r3
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4413      	add	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	4b24      	ldr	r3, [pc, #144]	@ (8008f8c <vPortFree+0xb8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4013      	ands	r3, r2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10d      	bne.n	8008f1e <vPortFree+0x4a>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f06:	b672      	cpsid	i
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	b662      	cpsie	i
 8008f16:	60fb      	str	r3, [r7, #12]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <vPortFree+0x6e>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	b672      	cpsid	i
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	b662      	cpsie	i
 8008f3a:	60bb      	str	r3, [r7, #8]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	4b11      	ldr	r3, [pc, #68]	@ (8008f8c <vPortFree+0xb8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d019      	beq.n	8008f84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d115      	bne.n	8008f84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f8c <vPortFree+0xb8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	43db      	mvns	r3, r3
 8008f62:	401a      	ands	r2, r3
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f68:	f7fe fb44 	bl	80075f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	4b07      	ldr	r3, [pc, #28]	@ (8008f90 <vPortFree+0xbc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4413      	add	r3, r2
 8008f76:	4a06      	ldr	r2, [pc, #24]	@ (8008f90 <vPortFree+0xbc>)
 8008f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f000 f86c 	bl	8009058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f80:	f7fe fb46 	bl	8007610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f84:	bf00      	nop
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20005128 	.word	0x20005128
 8008f90:	20005120 	.word	0x20005120

08008f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f9a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fa0:	4b27      	ldr	r3, [pc, #156]	@ (8009040 <prvHeapInit+0xac>)
 8008fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00c      	beq.n	8008fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3307      	adds	r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0307 	bic.w	r3, r3, #7
 8008fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8009040 <prvHeapInit+0xac>)
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8009044 <prvHeapInit+0xb0>)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8009044 <prvHeapInit+0xb0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fe0:	2208      	movs	r2, #8
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0307 	bic.w	r3, r3, #7
 8008fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a15      	ldr	r2, [pc, #84]	@ (8009048 <prvHeapInit+0xb4>)
 8008ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <prvHeapInit+0xb4>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ffe:	4b12      	ldr	r3, [pc, #72]	@ (8009048 <prvHeapInit+0xb4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009014:	4b0c      	ldr	r3, [pc, #48]	@ (8009048 <prvHeapInit+0xb4>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <prvHeapInit+0xb8>)
 8009022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	4a09      	ldr	r2, [pc, #36]	@ (8009050 <prvHeapInit+0xbc>)
 800902a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800902c:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <prvHeapInit+0xc0>)
 800902e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	20001514 	.word	0x20001514
 8009044:	20005114 	.word	0x20005114
 8009048:	2000511c 	.word	0x2000511c
 800904c:	20005124 	.word	0x20005124
 8009050:	20005120 	.word	0x20005120
 8009054:	20005128 	.word	0x20005128

08009058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009060:	4b28      	ldr	r3, [pc, #160]	@ (8009104 <prvInsertBlockIntoFreeList+0xac>)
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e002      	b.n	800906c <prvInsertBlockIntoFreeList+0x14>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	429a      	cmp	r2, r3
 8009074:	d8f7      	bhi.n	8009066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	4413      	add	r3, r2
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	429a      	cmp	r2, r3
 8009086:	d108      	bne.n	800909a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	441a      	add	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d118      	bne.n	80090e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b15      	ldr	r3, [pc, #84]	@ (8009108 <prvInsertBlockIntoFreeList+0xb0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d00d      	beq.n	80090d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	441a      	add	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	e008      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <prvInsertBlockIntoFreeList+0xb0>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e003      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d002      	beq.n	80090f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20005114 	.word	0x20005114
 8009108:	2000511c 	.word	0x2000511c

0800910c <memset>:
 800910c:	4402      	add	r2, r0
 800910e:	4603      	mov	r3, r0
 8009110:	4293      	cmp	r3, r2
 8009112:	d100      	bne.n	8009116 <memset+0xa>
 8009114:	4770      	bx	lr
 8009116:	f803 1b01 	strb.w	r1, [r3], #1
 800911a:	e7f9      	b.n	8009110 <memset+0x4>

0800911c <_reclaim_reent>:
 800911c:	4b29      	ldr	r3, [pc, #164]	@ (80091c4 <_reclaim_reent+0xa8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4283      	cmp	r3, r0
 8009122:	b570      	push	{r4, r5, r6, lr}
 8009124:	4604      	mov	r4, r0
 8009126:	d04b      	beq.n	80091c0 <_reclaim_reent+0xa4>
 8009128:	69c3      	ldr	r3, [r0, #28]
 800912a:	b1ab      	cbz	r3, 8009158 <_reclaim_reent+0x3c>
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	b16b      	cbz	r3, 800914c <_reclaim_reent+0x30>
 8009130:	2500      	movs	r5, #0
 8009132:	69e3      	ldr	r3, [r4, #28]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	5959      	ldr	r1, [r3, r5]
 8009138:	2900      	cmp	r1, #0
 800913a:	d13b      	bne.n	80091b4 <_reclaim_reent+0x98>
 800913c:	3504      	adds	r5, #4
 800913e:	2d80      	cmp	r5, #128	@ 0x80
 8009140:	d1f7      	bne.n	8009132 <_reclaim_reent+0x16>
 8009142:	69e3      	ldr	r3, [r4, #28]
 8009144:	4620      	mov	r0, r4
 8009146:	68d9      	ldr	r1, [r3, #12]
 8009148:	f000 f872 	bl	8009230 <_free_r>
 800914c:	69e3      	ldr	r3, [r4, #28]
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	b111      	cbz	r1, 8009158 <_reclaim_reent+0x3c>
 8009152:	4620      	mov	r0, r4
 8009154:	f000 f86c 	bl	8009230 <_free_r>
 8009158:	6961      	ldr	r1, [r4, #20]
 800915a:	b111      	cbz	r1, 8009162 <_reclaim_reent+0x46>
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f867 	bl	8009230 <_free_r>
 8009162:	69e1      	ldr	r1, [r4, #28]
 8009164:	b111      	cbz	r1, 800916c <_reclaim_reent+0x50>
 8009166:	4620      	mov	r0, r4
 8009168:	f000 f862 	bl	8009230 <_free_r>
 800916c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800916e:	b111      	cbz	r1, 8009176 <_reclaim_reent+0x5a>
 8009170:	4620      	mov	r0, r4
 8009172:	f000 f85d 	bl	8009230 <_free_r>
 8009176:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009178:	b111      	cbz	r1, 8009180 <_reclaim_reent+0x64>
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f858 	bl	8009230 <_free_r>
 8009180:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009182:	b111      	cbz	r1, 800918a <_reclaim_reent+0x6e>
 8009184:	4620      	mov	r0, r4
 8009186:	f000 f853 	bl	8009230 <_free_r>
 800918a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800918c:	b111      	cbz	r1, 8009194 <_reclaim_reent+0x78>
 800918e:	4620      	mov	r0, r4
 8009190:	f000 f84e 	bl	8009230 <_free_r>
 8009194:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009196:	b111      	cbz	r1, 800919e <_reclaim_reent+0x82>
 8009198:	4620      	mov	r0, r4
 800919a:	f000 f849 	bl	8009230 <_free_r>
 800919e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80091a0:	b111      	cbz	r1, 80091a8 <_reclaim_reent+0x8c>
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 f844 	bl	8009230 <_free_r>
 80091a8:	6a23      	ldr	r3, [r4, #32]
 80091aa:	b14b      	cbz	r3, 80091c0 <_reclaim_reent+0xa4>
 80091ac:	4620      	mov	r0, r4
 80091ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091b2:	4718      	bx	r3
 80091b4:	680e      	ldr	r6, [r1, #0]
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 f83a 	bl	8009230 <_free_r>
 80091bc:	4631      	mov	r1, r6
 80091be:	e7bb      	b.n	8009138 <_reclaim_reent+0x1c>
 80091c0:	bd70      	pop	{r4, r5, r6, pc}
 80091c2:	bf00      	nop
 80091c4:	2000001c 	.word	0x2000001c

080091c8 <__libc_init_array>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009200 <__libc_init_array+0x38>)
 80091cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009204 <__libc_init_array+0x3c>)
 80091ce:	1b64      	subs	r4, r4, r5
 80091d0:	10a4      	asrs	r4, r4, #2
 80091d2:	2600      	movs	r6, #0
 80091d4:	42a6      	cmp	r6, r4
 80091d6:	d109      	bne.n	80091ec <__libc_init_array+0x24>
 80091d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009208 <__libc_init_array+0x40>)
 80091da:	4c0c      	ldr	r4, [pc, #48]	@ (800920c <__libc_init_array+0x44>)
 80091dc:	f000 f87e 	bl	80092dc <_init>
 80091e0:	1b64      	subs	r4, r4, r5
 80091e2:	10a4      	asrs	r4, r4, #2
 80091e4:	2600      	movs	r6, #0
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	d105      	bne.n	80091f6 <__libc_init_array+0x2e>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f0:	4798      	blx	r3
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7ee      	b.n	80091d4 <__libc_init_array+0xc>
 80091f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fa:	4798      	blx	r3
 80091fc:	3601      	adds	r6, #1
 80091fe:	e7f2      	b.n	80091e6 <__libc_init_array+0x1e>
 8009200:	08009428 	.word	0x08009428
 8009204:	08009428 	.word	0x08009428
 8009208:	08009428 	.word	0x08009428
 800920c:	0800942c 	.word	0x0800942c

08009210 <__retarget_lock_acquire_recursive>:
 8009210:	4770      	bx	lr

08009212 <__retarget_lock_release_recursive>:
 8009212:	4770      	bx	lr

08009214 <memcpy>:
 8009214:	440a      	add	r2, r1
 8009216:	4291      	cmp	r1, r2
 8009218:	f100 33ff 	add.w	r3, r0, #4294967295
 800921c:	d100      	bne.n	8009220 <memcpy+0xc>
 800921e:	4770      	bx	lr
 8009220:	b510      	push	{r4, lr}
 8009222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800922a:	4291      	cmp	r1, r2
 800922c:	d1f9      	bne.n	8009222 <memcpy+0xe>
 800922e:	bd10      	pop	{r4, pc}

08009230 <_free_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4605      	mov	r5, r0
 8009234:	2900      	cmp	r1, #0
 8009236:	d041      	beq.n	80092bc <_free_r+0x8c>
 8009238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923c:	1f0c      	subs	r4, r1, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfb8      	it	lt
 8009242:	18e4      	addlt	r4, r4, r3
 8009244:	f000 f83e 	bl	80092c4 <__malloc_lock>
 8009248:	4a1d      	ldr	r2, [pc, #116]	@ (80092c0 <_free_r+0x90>)
 800924a:	6813      	ldr	r3, [r2, #0]
 800924c:	b933      	cbnz	r3, 800925c <_free_r+0x2c>
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	6014      	str	r4, [r2, #0]
 8009252:	4628      	mov	r0, r5
 8009254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009258:	f000 b83a 	b.w	80092d0 <__malloc_unlock>
 800925c:	42a3      	cmp	r3, r4
 800925e:	d908      	bls.n	8009272 <_free_r+0x42>
 8009260:	6820      	ldr	r0, [r4, #0]
 8009262:	1821      	adds	r1, r4, r0
 8009264:	428b      	cmp	r3, r1
 8009266:	bf01      	itttt	eq
 8009268:	6819      	ldreq	r1, [r3, #0]
 800926a:	685b      	ldreq	r3, [r3, #4]
 800926c:	1809      	addeq	r1, r1, r0
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	e7ed      	b.n	800924e <_free_r+0x1e>
 8009272:	461a      	mov	r2, r3
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	b10b      	cbz	r3, 800927c <_free_r+0x4c>
 8009278:	42a3      	cmp	r3, r4
 800927a:	d9fa      	bls.n	8009272 <_free_r+0x42>
 800927c:	6811      	ldr	r1, [r2, #0]
 800927e:	1850      	adds	r0, r2, r1
 8009280:	42a0      	cmp	r0, r4
 8009282:	d10b      	bne.n	800929c <_free_r+0x6c>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	4401      	add	r1, r0
 8009288:	1850      	adds	r0, r2, r1
 800928a:	4283      	cmp	r3, r0
 800928c:	6011      	str	r1, [r2, #0]
 800928e:	d1e0      	bne.n	8009252 <_free_r+0x22>
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	6053      	str	r3, [r2, #4]
 8009296:	4408      	add	r0, r1
 8009298:	6010      	str	r0, [r2, #0]
 800929a:	e7da      	b.n	8009252 <_free_r+0x22>
 800929c:	d902      	bls.n	80092a4 <_free_r+0x74>
 800929e:	230c      	movs	r3, #12
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	e7d6      	b.n	8009252 <_free_r+0x22>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	1821      	adds	r1, r4, r0
 80092a8:	428b      	cmp	r3, r1
 80092aa:	bf04      	itt	eq
 80092ac:	6819      	ldreq	r1, [r3, #0]
 80092ae:	685b      	ldreq	r3, [r3, #4]
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	bf04      	itt	eq
 80092b4:	1809      	addeq	r1, r1, r0
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	6054      	str	r4, [r2, #4]
 80092ba:	e7ca      	b.n	8009252 <_free_r+0x22>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	20005268 	.word	0x20005268

080092c4 <__malloc_lock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	@ (80092cc <__malloc_lock+0x8>)
 80092c6:	f7ff bfa3 	b.w	8009210 <__retarget_lock_acquire_recursive>
 80092ca:	bf00      	nop
 80092cc:	20005264 	.word	0x20005264

080092d0 <__malloc_unlock>:
 80092d0:	4801      	ldr	r0, [pc, #4]	@ (80092d8 <__malloc_unlock+0x8>)
 80092d2:	f7ff bf9e 	b.w	8009212 <__retarget_lock_release_recursive>
 80092d6:	bf00      	nop
 80092d8:	20005264 	.word	0x20005264

080092dc <_init>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr

080092e8 <_fini>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr
