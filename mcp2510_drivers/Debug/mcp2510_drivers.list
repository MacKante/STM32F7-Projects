
mcp2510_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080094b4  080094b4  0000a4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095dc  080095dc  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080095dc  080095dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e4  080095e4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  0000a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095e8  080095e8  0000a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080095ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005208  2000007c  08009668  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005284  08009668  0000b284  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bb7  00000000  00000000  0000b0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004701  00000000  00000000  0002dc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a7  00000000  00000000  00033df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b63e  00000000  00000000  00035297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c36  00000000  00000000  000608d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a68c  00000000  00000000  0008250b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cb97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072f4  00000000  00000000  0018cbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00193ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800949c 	.word	0x0800949c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800949c 	.word	0x0800949c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CAN_IC_READ_REGISTER>:
 * @param address: hex address of the register
 * 		  bufffer: to store value read
 * @retval None
 */
void CAN_IC_READ_REGISTER(uint8_t address, uint8_t* buffer, CANPeripheral *peripheral)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	73fb      	strb	r3, [r7, #15]
	// Packet includes 3 bytes
	// 1st byte: 0x03 (specifies as read instruction)
	// 2nd byte: address of register to read
	uint8_t packet[2] = {0x03, address};
 800053e:	2303      	movs	r3, #3
 8000540:	753b      	strb	r3, [r7, #20]
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	757b      	strb	r3, [r7, #21]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); // Initialize instruction by setting CS pin low
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	889b      	ldrh	r3, [r3, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f001 fd6f 	bl	8002034 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 2, 100U); //transmit
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6898      	ldr	r0, [r3, #8]
 800055a:	f107 0114 	add.w	r1, r7, #20
 800055e:	2364      	movs	r3, #100	@ 0x64
 8000560:	2202      	movs	r2, #2
 8000562:	f003 f90a 	bl	800377a <HAL_SPI_Transmit>
 8000566:	4603      	mov	r3, r0
 8000568:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(peripheral->hspi, buffer, 1, 100U); //receive register contents
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6898      	ldr	r0, [r3, #8]
 800056e:	2364      	movs	r3, #100	@ 0x64
 8000570:	2201      	movs	r2, #1
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	f003 fa6f 	bl	8003a56 <HAL_SPI_Receive>
 8000578:	4603      	mov	r3, r0
 800057a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); // Terminate instruction by setting CS pin high
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	889b      	ldrh	r3, [r3, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	f001 fd54 	bl	8002034 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <CAN_IC_WRITE_REGISTER>:
 * @param address: hex address of the register
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER(uint8_t address, uint8_t value, CANPeripheral *peripheral)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	603a      	str	r2, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	460b      	mov	r3, r1
 80005a2:	71bb      	strb	r3, [r7, #6]
	// Packet includes 3 bytes
	// 1st byte: 0x02 (specifies as write instruction)
	// 2nd byte: address of register to write to
	// 3rd byte: value to write
	uint8_t packet[3] = {0x02, address, value};
 80005a4:	2302      	movs	r3, #2
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	737b      	strb	r3, [r7, #13]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); //set CS pin low
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f001 fd3a 	bl	8002034 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 3, 100U);	//transmit
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	6898      	ldr	r0, [r3, #8]
 80005c4:	f107 010c 	add.w	r1, r7, #12
 80005c8:	2364      	movs	r3, #100	@ 0x64
 80005ca:	2203      	movs	r2, #3
 80005cc:	f003 f8d5 	bl	800377a <HAL_SPI_Transmit>
 80005d0:	4603      	mov	r3, r0
 80005d2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); //set CS pin high
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	f001 fd28 	bl	8002034 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <CAN_IC_WRITE_REGISTER_BITWISE>:
 * 		  mask: bit mask
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER_BITWISE(uint8_t address, uint8_t mask, uint8_t value, CANPeripheral *peripheral)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	460b      	mov	r3, r1
 80005fa:	71bb      	strb	r3, [r7, #6]
 80005fc:	4613      	mov	r3, r2
 80005fe:	717b      	strb	r3, [r7, #5]
	// 0x05 specifies bit-write instruction
	// mask specifies which bits can be modified (1 means bit can be modified)
	uint8_t packet[4] = {0x05, address, mask, value};
 8000600:	2305      	movs	r3, #5
 8000602:	723b      	strb	r3, [r7, #8]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	727b      	strb	r3, [r7, #9]
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	72bb      	strb	r3, [r7, #10]
 800060c:	797b      	ldrb	r3, [r7, #5]
 800060e:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); //set CS pin low
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	889b      	ldrh	r3, [r3, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f001 fd0a 	bl	8002034 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 4, 100U); //transmit
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	6898      	ldr	r0, [r3, #8]
 8000624:	f107 0108 	add.w	r1, r7, #8
 8000628:	2364      	movs	r3, #100	@ 0x64
 800062a:	2204      	movs	r2, #4
 800062c:	f003 f8a5 	bl	800377a <HAL_SPI_Transmit>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); //set CS pin high
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	889b      	ldrh	r3, [r3, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	f001 fcf8 	bl	8002034 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <CAN_IC_READ_STATUS>:
 * @brief read status of CAN IC
 * @param buffer: buffer to write status
 * @retval None
 */
void CAN_IC_READ_STATUS(uint8_t* buffer, CANPeripheral *peripheral)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	// Packet includes read status instruction
	uint8_t packet[1] = {0xA0};
 8000656:	23a0      	movs	r3, #160	@ 0xa0
 8000658:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); // Initialize instruction by setting CS pin low
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	f001 fce5 	bl	8002034 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 1, 100U); //transmit
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	6898      	ldr	r0, [r3, #8]
 800066e:	f107 010c 	add.w	r1, r7, #12
 8000672:	2364      	movs	r3, #100	@ 0x64
 8000674:	2201      	movs	r2, #1
 8000676:	f003 f880 	bl	800377a <HAL_SPI_Transmit>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive(peripheral->hspi, buffer, 1, 100U); //receive register contents
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	6898      	ldr	r0, [r3, #8]
 8000682:	2364      	movs	r3, #100	@ 0x64
 8000684:	2201      	movs	r2, #1
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f003 f9e5 	bl	8003a56 <HAL_SPI_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); // Terminate instruction by setting CS pin high
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 fcca 	bl	8002034 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <CAN_IC_RESET>:
/**
 * @brief Reset the CAN IC
 * @param None
 * @retval None
 */
void CAN_IC_RESET(CANPeripheral *peripheral) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// Packet includes reset instruction
	uint8_t packet[1] = {0xC0};
 80006b0:	23c0      	movs	r3, #192	@ 0xc0
 80006b2:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	f001 fcb8 	bl	8002034 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 1, 100U);  //reset IC to default
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6898      	ldr	r0, [r3, #8]
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2364      	movs	r3, #100	@ 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	f003 f853 	bl	800377a <HAL_SPI_Transmit>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	889b      	ldrh	r3, [r3, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 fca6 	bl	8002034 <HAL_GPIO_WritePin>

	osDelay(100);
 80006e8:	2064      	movs	r0, #100	@ 0x64
 80006ea:	f005 fa4f 	bl	8005b8c <osDelay>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <ConfigureCANSPI>:
  * @retval None
  * Configuration is as close to Elysia's CAN configuration whenever possible
  * TODO: add configuration verification and return value accordingly
  */
void ConfigureCANSPI(CANPeripheral *peripheral)
{	
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]

	// oof this is a mind fook
	// TODO: ask violet of this settings

	// Ensure IC is out of reset state (128 clock cycles)
	osDelay(100);
 80006fe:	2064      	movs	r0, #100	@ 0x64
 8000700:	f005 fa44 	bl	8005b8c <osDelay>

	// Tq = (2 x (BRP + 1)) / Fosc
	uint8_t CONFIG_CNF1 = 0x01; //BRP = 1 to make tq = 250ns and a SJW of 1Tq
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
	uint8_t CONFIG_CNF2 = 0x98; //PRSEG = 0, PHSEG1 = 3, SAM = 0, BTLMODE = 1
 8000708:	2398      	movs	r3, #152	@ 0x98
 800070a:	73bb      	strb	r3, [r7, #14]
	uint8_t CONFIG_CNF3 = 0x01; //WAFKIL disabled, PHSEG2 = 2 (BTL enabled) but PHSEG = 1 makes it backwards compatible???? wat
 800070c:	2301      	movs	r3, #1
 800070e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef status;

	// Reset CAN IC
	CAN_IC_RESET(peripheral);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ffc9 	bl	80006a8 <CAN_IC_RESET>

	// CANSTAT.OPMOD must read as config mode to be able to write to the registers (0x80)
	uint8_t CANSTAT_STATUS = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	733b      	strb	r3, [r7, #12]
	CAN_IC_READ_REGISTER(CANSTAT, &CANSTAT_STATUS, peripheral);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4619      	mov	r1, r3
 8000722:	200e      	movs	r0, #14
 8000724:	f7ff ff04 	bl	8000530 <CAN_IC_READ_REGISTER>

	// Ensure IC is in configuration mode
	if ((CANSTAT_STATUS & 0xE0) != 0x80) {
 8000728:	7b3b      	ldrb	r3, [r7, #12]
 800072a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800072e:	2b80      	cmp	r3, #128	@ 0x80
 8000730:	d008      	beq.n	8000744 <ConfigureCANSPI+0x4e>
		CAN_IC_WRITE_REGISTER_BITWISE(CANCTRL, 0xE0, 0x80, peripheral);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	21e0      	movs	r1, #224	@ 0xe0
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff ff57 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		osDelay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f005 fa24 	bl	8005b8c <osDelay>
	}

	// Base IC Configuration Registers
	CAN_IC_WRITE_REGISTER(CNF1, CONFIG_CNF1, peripheral); //configure CNF1
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	202a      	movs	r0, #42	@ 0x2a
 800074c:	f7ff ff22 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF2, CONFIG_CNF2, peripheral); //configure CNF2
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4619      	mov	r1, r3
 8000756:	2029      	movs	r0, #41	@ 0x29
 8000758:	f7ff ff1c 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF3, CONFIG_CNF3, peripheral); //configure CNF3
 800075c:	7b7b      	ldrb	r3, [r7, #13]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	2028      	movs	r0, #40	@ 0x28
 8000764:	f7ff ff16 	bl	8000594 <CAN_IC_WRITE_REGISTER>

	// Receive Buffer Configurations
	CAN_IC_WRITE_REGISTER_BITWISE(BFPCTRL, 0x0F, 0x0F, peripheral);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	220f      	movs	r2, #15
 800076c:	210f      	movs	r1, #15
 800076e:	200c      	movs	r0, #12
 8000770:	f7ff ff3c 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
	CAN_IC_WRITE_REGISTER_BITWISE(RXB0CTRL, 0x60, 0x60, peripheral);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2260      	movs	r2, #96	@ 0x60
 8000778:	2160      	movs	r1, #96	@ 0x60
 800077a:	2060      	movs	r0, #96	@ 0x60
 800077c:	f7ff ff36 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
	CAN_IC_WRITE_REGISTER_BITWISE(RXB1CTRL, 0x60, 0x60, peripheral);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2260      	movs	r2, #96	@ 0x60
 8000784:	2160      	movs	r1, #96	@ 0x60
 8000786:	2070      	movs	r0, #112	@ 0x70
 8000788:	f7ff ff30 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>

	CANSTAT_STATUS = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	733b      	strb	r3, [r7, #12]

	// Toggle CAN_TEST_SETUP to 1 for loopback mode, 0 for normal mode
	#if CAN_TEST_SETUP
		CAN_IC_WRITE_REGISTER_BITWISE(CANCTRL, 0xE7, 0x44, peripheral);	// Put IC in loop-back mode for testing as well as enable CLKOUT pin with 1:1 prescaler
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2244      	movs	r2, #68	@ 0x44
 8000794:	21e7      	movs	r1, #231	@ 0xe7
 8000796:	200f      	movs	r0, #15
 8000798:	f7ff ff28 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		osDelay(100);
 800079c:	2064      	movs	r0, #100	@ 0x64
 800079e:	f005 f9f5 	bl	8005b8c <osDelay>
		CAN_IC_READ_REGISTER(CANSTAT, &CANSTAT_STATUS, peripheral); // 0x44
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	200e      	movs	r0, #14
 80007ac:	f7ff fec0 	bl	8000530 <CAN_IC_READ_REGISTER>
		osDelay(100);
		CAN_IC_READ_REGISTER(CANSTAT, &CANSTAT_STATUS, peripheral);
	#endif

	// Reset and configure interrupts
	CAN_IC_WRITE_REGISTER(CANINTE, 0x20, peripheral); 	//configure interrupts, currently enable ERRIF
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	2120      	movs	r1, #32
 80007b4:	202b      	movs	r0, #43	@ 0x2b
 80007b6:	f7ff feed 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CANINTF, 0x00, peripheral); 	//clear INTE flags
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	2100      	movs	r1, #0
 80007be:	202c      	movs	r0, #44	@ 0x2c
 80007c0:	f7ff fee8 	bl	8000594 <CAN_IC_WRITE_REGISTER>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <checkAvailableTXChannel>:

/*-------------------------------------------------------------------------------------------*/

uint8_t checkAvailableTXChannel(CANPeripheral *peripheral)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
    uint32_t prevWakeTime = xTaskGetTickCount(); 	//Delay is fine if we have a CanTxGatekeeperTask
 80007d4:	f007 f896 	bl	8007904 <xTaskGetTickCount>
 80007d8:	60f8      	str	r0, [r7, #12]
			Use flags instead as it will be easier and faster...
		*/

		// Use "Read Status" command from IC to retrieve status of TXBnCTRL.TXREQ bits (remember to use mask, check datasheet for byte structure)
    	uint8_t CANStatus;
    	CAN_IC_READ_STATUS(&CANStatus, peripheral);
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff33 	bl	800064c <CAN_IC_READ_STATUS>

        uint8_t TXB0Status = CANStatus & 0b00000100;
 80007e6:	7a3b      	ldrb	r3, [r7, #8]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	72fb      	strb	r3, [r7, #11]
        uint8_t TXB1Status = CANStatus & 0b00010000;
 80007ee:	7a3b      	ldrb	r3, [r7, #8]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	72bb      	strb	r3, [r7, #10]
        uint8_t TXB2Status = CANStatus & 0b01000000;
 80007f6:	7a3b      	ldrb	r3, [r7, #8]
 80007f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007fc:	727b      	strb	r3, [r7, #9]

        // CAN_IC_READ_REGISTER(TXB0CTRL, &TXB0Status, peripheral);
        // TXB0Status = TXB0Status & 0x08; //Not masking out bits
        if (!TXB0Status) {
 80007fe:	7afb      	ldrb	r3, [r7, #11]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <checkAvailableTXChannel+0x3c>
            return 0;
 8000804:	2300      	movs	r3, #0
 8000806:	e008      	b.n	800081a <checkAvailableTXChannel+0x4e>
        }

        // CAN_IC_READ_REGISTER(TXB1CTRL, &TXB1Status, peripheral);
        // TXB1Status = TXB1Status & 0x08; //Not masking out bits
        if (!TXB1Status) {
 8000808:	7abb      	ldrb	r3, [r7, #10]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <checkAvailableTXChannel+0x46>
            return 1;
 800080e:	2301      	movs	r3, #1
 8000810:	e003      	b.n	800081a <checkAvailableTXChannel+0x4e>
        }

        // CAN_IC_READ_REGISTER(TXB2CTRL, &TXB2Status, peripheral);
        // TXB2Status = TXB2Status & 0x08; //Not masking out bits
        if (!TXB2Status) {
 8000812:	7a7b      	ldrb	r3, [r7, #9]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1e0      	bne.n	80007da <checkAvailableTXChannel+0xe>
            return 2;
 8000818:	2302      	movs	r3, #2
        }

        // prevWakeTime += TX_CHANNEL_CHECK_DELAY;
        // osDelayUntil(prevWakeTime);
    }
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <sendCANMessage>:
  * @brief send CAN message
  * @param None
  * @retval None
  */
uint8_t sendCANMessage(CANMsg *msg, CANPeripheral *peripheral)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
	// Find TxBuffer to use
	uint8_t channel = checkAvailableTXChannel(peripheral);
 800082c:	6838      	ldr	r0, [r7, #0]
 800082e:	f7ff ffcd 	bl	80007cc <checkAvailableTXChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	3303      	adds	r3, #3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	74bb      	strb	r3, [r7, #18]

	// Initializations
	uint8_t sendCommand = 0x80 + (0x01 < channel); 	   //instruction to send CAN message on buffer 1
 8000840:	7cfb      	ldrb	r3, [r7, #19]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d901      	bls.n	800084a <sendCANMessage+0x28>
 8000846:	2381      	movs	r3, #129	@ 0x81
 8000848:	e000      	b.n	800084c <sendCANMessage+0x2a>
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	737b      	strb	r3, [r7, #13]
	uint8_t TXBNSIDH = (msg->ID & 0b11111111000) >> 3; // mask upper ID register (SD 10-3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	10db      	asrs	r3, r3, #3
 8000854:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (msg->ID & 0b111) << 5; 	   	   // mask lower ID register (SD 2-0)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	015b      	lsls	r3, r3, #5
 800085c:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNDLC = msg->DLC & 0x0F;				   // mask DLC
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7a1b      	ldrb	r3, [r3, #8]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	73fb      	strb	r3, [r7, #15]

	// Set Standard Identifier and DLC
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH, peripheral); // SD 10-3
 8000868:	7cbb      	ldrb	r3, [r7, #18]
 800086a:	3301      	adds	r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	7c79      	ldrb	r1, [r7, #17]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe8e 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL, peripheral); // SD 2-0
 8000878:	7cbb      	ldrb	r3, [r7, #18]
 800087a:	3302      	adds	r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	7c39      	ldrb	r1, [r7, #16]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe86 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC, peripheral);  // DLC
 8000888:	7cbb      	ldrb	r3, [r7, #18]
 800088a:	3305      	adds	r3, #5
 800088c:	b2db      	uxtb	r3, r3
 800088e:	7bf9      	ldrb	r1, [r7, #15]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe7e 	bl	8000594 <CAN_IC_WRITE_REGISTER>

	// Set data to registers
	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 8000898:	7cbb      	ldrb	r3, [r7, #18]
 800089a:	3306      	adds	r3, #6
 800089c:	73bb      	strb	r3, [r7, #14]
	for(int i = 0; i < msg->DLC; i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e010      	b.n	80008c6 <sendCANMessage+0xa4>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i], peripheral); //write to relevant data registers
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4413      	add	r3, r2
 80008ac:	b2d8      	uxtb	r0, r3
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	4413      	add	r3, r2
 80008b4:	3309      	adds	r3, #9
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	f7ff fe6a 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a1b      	ldrb	r3, [r3, #8]
 80008ca:	461a      	mov	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	dbe8      	blt.n	80008a4 <sendCANMessage+0x82>
	}

	// set transmit buffer priority to 3 (max)
	// write to TXBNCTRL<1:0>
	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03, peripheral);
 80008d2:	7cb8      	ldrb	r0, [r7, #18]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2203      	movs	r2, #3
 80008d8:	2103      	movs	r1, #3
 80008da:	f7ff fe87 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>

	// Initiate message transmit
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	889b      	ldrh	r3, [r3, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	f001 fba3 	bl	8002034 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(peripheral->hspi, &sendCommand, 1, 100U);  // Send command to transmit
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	6898      	ldr	r0, [r3, #8]
 80008f2:	f107 010d 	add.w	r1, r7, #13
 80008f6:	2364      	movs	r3, #100	@ 0x64
 80008f8:	2201      	movs	r2, #1
 80008fa:	f002 ff3e 	bl	800377a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	f001 fb93 	bl	8002034 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <sendExtendedCANMessage>:
  * @brief send CAN message with extended identifier
  * @param None
  * @retval None
  */
uint8_t sendExtendedCANMessage(CANMsg *msg, CANPeripheral *peripheral)
{	
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	// Find TxBuffer to use
	// uint8_t initialBufferAddress = TXB0CTRL + 16*(channel); //TXB0CTRL for channel 1, TXB1CTRL for channel 2, TXB2CTRL for channel 3
    uint8_t channel = checkAvailableTXChannel(peripheral);
 8000922:	6838      	ldr	r0, [r7, #0]
 8000924:	f7ff ff52 	bl	80007cc <checkAvailableTXChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	74fb      	strb	r3, [r7, #19]
	uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 800092c:	7cfb      	ldrb	r3, [r7, #19]
 800092e:	3303      	adds	r3, #3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	74bb      	strb	r3, [r7, #18]

	// Initializations
	uint8_t sendCommand = 0x80 + (1 << channel); //instruction to send CAN message on channel
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	2201      	movs	r2, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b80      	subs	r3, #128	@ 0x80
 8000942:	b2db      	uxtb	r3, r3
 8000944:	72fb      	strb	r3, [r7, #11]
	uint8_t TXBNSIDH = (msg->extendedID >> 21) & 0xFF;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	0d5b      	lsrs	r3, r3, #21
 800094c:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (((msg->extendedID >> 18) & 0x07) << 5) | 0x08 | ((msg->ID >> 16) & 0x03);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	b2db      	uxtb	r3, r3
 8000956:	015b      	lsls	r3, r3, #5
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNEID8 = (msg->extendedID >> 8) & 0xFF;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	73fb      	strb	r3, [r7, #15]
	uint8_t TXBNEID0 = msg->extendedID & 0xFF;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	73bb      	strb	r3, [r7, #14]
	uint8_t TXBNDLC = msg->DLC & 0x0F;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7a1b      	ldrb	r3, [r3, #8]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	737b      	strb	r3, [r7, #13]

	// Set Extended Identifier and DLC
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH, peripheral); // SD 10-3
 8000978:	7cbb      	ldrb	r3, [r7, #18]
 800097a:	3301      	adds	r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	7c79      	ldrb	r1, [r7, #17]
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe06 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL, peripheral); // SD 2-0, ED 17-16
 8000988:	7cbb      	ldrb	r3, [r7, #18]
 800098a:	3302      	adds	r3, #2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	7c39      	ldrb	r1, [r7, #16]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fdfe 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 3, TXBNEID8, peripheral); // ED 15-8
 8000998:	7cbb      	ldrb	r3, [r7, #18]
 800099a:	3303      	adds	r3, #3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	7bf9      	ldrb	r1, [r7, #15]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fdf6 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 4, TXBNEID0, peripheral); // ED 7-0
 80009a8:	7cbb      	ldrb	r3, [r7, #18]
 80009aa:	3304      	adds	r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	7bb9      	ldrb	r1, [r7, #14]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdee 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC, peripheral);  // DLC
 80009b8:	7cbb      	ldrb	r3, [r7, #18]
 80009ba:	3305      	adds	r3, #5
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	7b79      	ldrb	r1, [r7, #13]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fde6 	bl	8000594 <CAN_IC_WRITE_REGISTER>

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 80009c8:	7cbb      	ldrb	r3, [r7, #18]
 80009ca:	3306      	adds	r3, #6
 80009cc:	733b      	strb	r3, [r7, #12]
	for(int i = 0; i < msg->DLC; i++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e010      	b.n	80009f6 <sendExtendedCANMessage+0xde>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i], peripheral); //write to relevant data registers
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	7b3b      	ldrb	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	b2d8      	uxtb	r0, r3
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	4413      	add	r3, r2
 80009e4:	3309      	adds	r3, #9
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	f7ff fdd2 	bl	8000594 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a1b      	ldrb	r3, [r3, #8]
 80009fa:	461a      	mov	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	dbe8      	blt.n	80009d4 <sendExtendedCANMessage+0xbc>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03, peripheral); //set transmit buffer priority to 3 (max)
 8000a02:	7cb8      	ldrb	r0, [r7, #18]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2203      	movs	r2, #3
 8000a08:	2103      	movs	r1, #3
 8000a0a:	f7ff fdef 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>

	// Initiate message transmit
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	889b      	ldrh	r3, [r3, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f001 fb0b 	bl	8002034 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(peripheral->hspi, &sendCommand, 1, 100U);  //Send command to transmit
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	6898      	ldr	r0, [r3, #8]
 8000a22:	f107 010b 	add.w	r1, r7, #11
 8000a26:	2364      	movs	r3, #100	@ 0x64
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f002 fea6 	bl	800377a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	889b      	ldrh	r3, [r3, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f001 fafb 	bl	8002034 <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <receiveCANMessage>:
  * @brief Receive CAN message
  * @param None
  * @retval None
  */
void receiveCANMessage(uint8_t channel, uint32_t* ID, uint8_t* DLC, uint8_t* data, CANPeripheral *peripheral)
{	
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]
	uint8_t initialBufferAddress = RXB0CTRL + 16*(channel); //RXB0CTRL for channel 0, RXB1CTRL for channel 1
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3306      	adds	r3, #6
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	76fb      	strb	r3, [r7, #27]

	uint8_t RXBNSIDH = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	767b      	strb	r3, [r7, #25]
	uint8_t RXBNSIDL = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	763b      	strb	r3, [r7, #24]
	uint8_t RXBDLC = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	75fb      	strb	r3, [r7, #23]

	CAN_IC_READ_REGISTER(initialBufferAddress + 1, &RXBNSIDH, peripheral); // SD 10-3
 8000a6e:	7efb      	ldrb	r3, [r7, #27]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f107 0119 	add.w	r1, r7, #25
 8000a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fd58 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 2, &RXBNSIDL, peripheral); //SD 2-0, IDE, ED 17-16
 8000a80:	7efb      	ldrb	r3, [r7, #27]
 8000a82:	3302      	adds	r3, #2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f107 0118 	add.w	r1, r7, #24
 8000a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd4f 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 5, &RXBDLC, peripheral);   //DLC
 8000a92:	7efb      	ldrb	r3, [r7, #27]
 8000a94:	3305      	adds	r3, #5
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f107 0117 	add.w	r1, r7, #23
 8000a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd46 	bl	8000530 <CAN_IC_READ_REGISTER>

	if(RXBNSIDL & 0x08)	// Check RXBmSIDL.IDE to verify if CAN message has extended identifier
 8000aa4:	7e3b      	ldrb	r3, [r7, #24]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d02c      	beq.n	8000b08 <receiveCANMessage+0xc0>
	{
		uint8_t RXBNEID8 = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	75bb      	strb	r3, [r7, #22]
		uint8_t RXBNEID0 = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	757b      	strb	r3, [r7, #21]
		CAN_IC_READ_REGISTER(initialBufferAddress + 3, &RXBNEID8, peripheral); // ED 15-8
 8000ab6:	7efb      	ldrb	r3, [r7, #27]
 8000ab8:	3303      	adds	r3, #3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f107 0116 	add.w	r1, r7, #22
 8000ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd34 	bl	8000530 <CAN_IC_READ_REGISTER>
		CAN_IC_READ_REGISTER(initialBufferAddress + 4, &RXBNEID0, peripheral); // ED 7-0
 8000ac8:	7efb      	ldrb	r3, [r7, #27]
 8000aca:	3304      	adds	r3, #4
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f107 0115 	add.w	r1, r7, #21
 8000ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd2b 	bl	8000530 <CAN_IC_READ_REGISTER>
		*ID = (RXBNSIDH << 21) | (((RXBNSIDL >> 5) & 0x07) << 18) | ((RXBNSIDL & 0x03) << 16) | (RXBNEID8 << 8) | (RXBNEID0);
 8000ada:	7e7b      	ldrb	r3, [r7, #25]
 8000adc:	055a      	lsls	r2, r3, #21
 8000ade:	7e3b      	ldrb	r3, [r7, #24]
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	049b      	lsls	r3, r3, #18
 8000ae6:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8000aea:	431a      	orrs	r2, r3
 8000aec:	7e3b      	ldrb	r3, [r7, #24]
 8000aee:	041b      	lsls	r3, r3, #16
 8000af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000af4:	431a      	orrs	r2, r3
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	4313      	orrs	r3, r2
 8000afc:	7d7a      	ldrb	r2, [r7, #21]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e008      	b.n	8000b1a <receiveCANMessage+0xd2>
	} else // CAN message is standard
	{
		*ID = (RXBNSIDH << 3) | (RXBNSIDL >> 5);
 8000b08:	7e7b      	ldrb	r3, [r7, #25]
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	7e3a      	ldrb	r2, [r7, #24]
 8000b0e:	0952      	lsrs	r2, r2, #5
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	4313      	orrs	r3, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	601a      	str	r2, [r3, #0]
	}

	// Check data length of CAN message
	*DLC = RXBDLC & 0x0F; 
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	701a      	strb	r2, [r3, #0]
	if(*DLC > 8){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d902      	bls.n	8000b34 <receiveCANMessage+0xec>
		*DLC = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
	}

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 8000b34:	7efb      	ldrb	r3, [r7, #27]
 8000b36:	3306      	adds	r3, #6
 8000b38:	76bb      	strb	r3, [r7, #26]
	for(int i = 0; i < *DLC; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e00e      	b.n	8000b5e <receiveCANMessage+0x116>
	{
		CAN_IC_READ_REGISTER(initialDataBufferAddress + i, &data[i], peripheral); //read from relevant data registers
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	7ebb      	ldrb	r3, [r7, #26]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fcec 	bl	8000530 <CAN_IC_READ_REGISTER>
	for(int i = 0; i < *DLC; i++)
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	4293      	cmp	r3, r2
 8000b68:	dbea      	blt.n	8000b40 <receiveCANMessage+0xf8>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, channel + 1, channel + 1, peripheral); //clear interrupts
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2d9      	uxtb	r1, r3
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b78:	202c      	movs	r0, #44	@ 0x2c
 8000b7a:	f7ff fd37 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
	return;
 8000b7e:	bf00      	nop
}
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <CANClearInterruptTask>:
 * TODO: Rename this to CANInterruptHandlerTask
 */

#include "CANClearInterruptTask.h"

void CANClearInterruptTask(void* arg) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	for(;;) {
		CAN_CLEAR_INTERRUPT(&peripheral1);
 8000b90:	4801      	ldr	r0, [pc, #4]	@ (8000b98 <CANClearInterruptTask+0x10>)
 8000b92:	f000 f803 	bl	8000b9c <CAN_CLEAR_INTERRUPT>
 8000b96:	e7fb      	b.n	8000b90 <CANClearInterruptTask+0x8>
 8000b98:	20000000 	.word	0x20000000

08000b9c <CAN_CLEAR_INTERRUPT>:
	}
}

void CAN_CLEAR_INTERRUPT(CANPeripheral* peripheral) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    /* Receive interrupt to clear from queue */
    // CAN_INTERRUPT CANInterruptType;
    // osStatus_t status = osMessageQueueGet(CANInterruptQueue, &CANInterruptType, NULL, osWaitForever);
    
	// Check if interrupt flag has been set
	if (CANReadInterruptFlag == 0) {
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8000c98 <CAN_CLEAR_INTERRUPT+0xfc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d070      	beq.n	8000c8e <CAN_CLEAR_INTERRUPT+0xf2>
		return;
	}

	// TODO this is messed up, figure out best way to read interrupt register
	uint8_t CANINTF_STATUS = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	737b      	strb	r3, [r7, #13]
	CAN_IC_READ_REGISTER(CANINTF, &CANINTF_STATUS, peripheral);
 8000bb0:	f107 030d 	add.w	r3, r7, #13
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	202c      	movs	r0, #44	@ 0x2c
 8000bba:	f7ff fcb9 	bl	8000530 <CAN_IC_READ_REGISTER>

	for (uint8_t i = 7; i >  1; i--) {
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e060      	b.n	8000c86 <CAN_CLEAR_INTERRUPT+0xea>
		CAN_INTERRUPT CANInterruptType;
		// Go through each flag
		if ( (1 << i) & CANINTF_STATUS ) {
 8000bc4:	7b7b      	ldrb	r3, [r7, #13]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	fa42 f303 	asr.w	r3, r2, r3
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <CAN_CLEAR_INTERRUPT+0x42>
			CANInterruptType = (CAN_INTERRUPT)(i + 1);
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	73bb      	strb	r3, [r7, #14]
 8000bdc:	e001      	b.n	8000be2 <CAN_CLEAR_INTERRUPT+0x46>
		} else {
			CANInterruptType = INVALID_INT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73bb      	strb	r3, [r7, #14]
		}

		// Perform action based on interrupt
		if( osMutexWait(SPIMutexHandle, 0) == osOK ) {
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <CAN_CLEAR_INTERRUPT+0x100>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 f897 	bl	8005d1c <osMutexAcquire>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d145      	bne.n	8000c80 <CAN_CLEAR_INTERRUPT+0xe4>
		        switch(CANInterruptType) {
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	3b03      	subs	r3, #3
 8000bf8:	2b05      	cmp	r3, #5
 8000bfa:	d836      	bhi.n	8000c6a <CAN_CLEAR_INTERRUPT+0xce>
 8000bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000c04 <CAN_CLEAR_INTERRUPT+0x68>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c47 	.word	0x08000c47
 8000c08:	08000c53 	.word	0x08000c53
 8000c0c:	08000c5f 	.word	0x08000c5f
 8000c10:	08000c1d 	.word	0x08000c1d
 8000c14:	08000c3b 	.word	0x08000c3b
 8000c18:	08000c2f 	.word	0x08000c2f
		        	case ERRIF:
		                // overflow condition occured or if the error state of transmitter or receiver has changed
						// check ELFG register - TODO
		        		CAN_CLEAR_EFLG(peripheral);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 f83f 	bl	8000ca0 <CAN_CLEAR_EFLG>
						// clear bit
						CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0x20, 0x00, peripheral);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	2120      	movs	r1, #32
 8000c28:	202c      	movs	r0, #44	@ 0x2c
 8000c2a:	f7ff fcdf 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		        	case MERRF:
						/* Message failed to send in one of the buffers, check all of TXBnCTRL registers - TODO */
		        		// CASE 1 (TXBnCTRL.TXERR): Error occured after message started to transmit
		                // TODO: either reset the TXBnCTRL.TXREQ to cancel transmitting the message, or to leave it alone and it will attempt to resend itself
						// clear bit
						CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0x80, 0x00, peripheral);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	202c      	movs	r0, #44	@ 0x2c
 8000c36:	f7ff fcd9 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		        	case WAKIF:
						// do nothing? Get out of sleep mode by clearing bit... Read more on this
						// For now clear bit
						CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0x40, 0x00, peripheral);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2140      	movs	r1, #64	@ 0x40
 8000c40:	202c      	movs	r0, #44	@ 0x2c
 8000c42:	f7ff fcd3 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		            case TX0IF:
		                // Optional: Enable flag to let MCU know that TXBuffer is free
		                // clear bit
		                CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0x04, 0x00, peripheral);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	202c      	movs	r0, #44	@ 0x2c
 8000c4e:	f7ff fccd 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		            case TX1IF:
		                // Optional: Enable flag to let MCU know that TXBuffer is free
		                // clear bit
		                CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0x08, 0x00, peripheral);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	202c      	movs	r0, #44	@ 0x2c
 8000c5a:	f7ff fcc7 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		            case TX2IF:
		            	// Optional: Enable flag to let MCU know that TXBuffer is free
		                // clear bit
		                CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0x10, 0x00, peripheral);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	202c      	movs	r0, #44	@ 0x2c
 8000c66:	f7ff fcc1 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		                // may not need this
		                // receiveCANMessage(1, &RX1Buffer.ID, &RX1Buffer.DLC, RX1Buffer.data, peripheral);
		            default:
		            	// faulty INT trigger
		            	// reset all flags except RxBuffer flags
		            	CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, 0xFC, 0x00, peripheral);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	21fc      	movs	r1, #252	@ 0xfc
 8000c70:	202c      	movs	r0, #44	@ 0x2c
 8000c72:	f7ff fcbb 	bl	80005ec <CAN_IC_WRITE_REGISTER_BITWISE>
		        }
		        osMutexRelease(SPIMutexHandle);
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <CAN_CLEAR_INTERRUPT+0x100>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f005 f8ac 	bl	8005dd8 <osMutexRelease>
	for (uint8_t i = 7; i >  1; i--) {
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d89b      	bhi.n	8000bc4 <CAN_CLEAR_INTERRUPT+0x28>
 8000c8c:	e000      	b.n	8000c90 <CAN_CLEAR_INTERRUPT+0xf4>
		return;
 8000c8e:	bf00      	nop
		}
	}
}
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000710 	.word	0x20000710
 8000c9c:	20000700 	.word	0x20000700

08000ca0 <CAN_CLEAR_EFLG>:

void CAN_CLEAR_EFLG(CANPeripheral* peripheral) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    // Read EFLG register
    uint8_t EFLG_Status = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73bb      	strb	r3, [r7, #14]
    CAN_IC_READ_REGISTER(EFLG, &EFLG_Status, peripheral);
 8000cac:	f107 030e 	add.w	r3, r7, #14
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	202d      	movs	r0, #45	@ 0x2d
 8000cb6:	f7ff fc3b 	bl	8000530 <CAN_IC_READ_REGISTER>

    // Temp counter, just to see if error check works
    uint8_t counter = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]

    if (EFLG_Status & (1 << 7)) { 
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da02      	bge.n	8000ccc <CAN_CLEAR_EFLG+0x2c>
        // Handle RX1OVR (Receive Buffer 1 Overflow)
        // - Set when a valid message is received for RXB1 and CANINTF.RX1IF = 1
        // - Must be reset by MCU
        counter++;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 6)) { 
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <CAN_CLEAR_EFLG+0x3c>
        // Handle RX0OVR (Receive Buffer 0 Overflow)
        // - Set when a valid message is received for RXB0 and CANINTF.RX0IF = 1
        // - Must be reset by MCU
        counter++;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 5)) { 
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <CAN_CLEAR_EFLG+0x4c>
        // Handle TXBO (Transmit Bus-Off)
        // - Bit set when TEC reaches 255
        // - Reset after a successful bus recovery sequence
        counter++;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 4)) { 
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <CAN_CLEAR_EFLG+0x5c>
        // Handle TXEP (Transmit Error-Passive)
        // - Set when TEC is equal to or greater than 128
        // - Reset when TEC is less than 128
        counter++;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 3)) { 
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <CAN_CLEAR_EFLG+0x6c>
        // Handle RXEP (Receive Error-Passive)
        // - Set when REC is equal to or greater than 128
        // - Reset when REC is less than 128
        counter++;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 2)) { 
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <CAN_CLEAR_EFLG+0x7c>
        // Handle TXWAR (Transmit Error Warning)
        // - Set when TEC is equal to or greater than 96
        // - Reset when TEC is less than 96
        counter++;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 1)) { 
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <CAN_CLEAR_EFLG+0x8c>
        // Handle RXWAR (Receive Error Warning)
        // - Set when REC is equal to or greater than 96
        // - Reset when REC is less than 96
        counter++;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
    }
    if (EFLG_Status & (1 << 0)) { 
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <CAN_CLEAR_EFLG+0x9c>
        // Handle EWARN (Error Warning)
        // - Set when TEC or REC is equal to or greater than 96 (TXWAR or RXWAR = 1)
        // - Reset when both REC and TEC are less than 96
        counter++;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
    }

    CAN_IC_WRITE_REGISTER(EFLG, 0x00, peripheral);
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	2100      	movs	r1, #0
 8000d40:	202d      	movs	r0, #45	@ 0x2d
 8000d42:	f7ff fc27 	bl	8000594 <CAN_IC_WRITE_REGISTER>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <CANRxMessageTask>:
 */

#include "CANRxMessageTask.h"

void CANRxMessageTask(void* arg)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	for(;;) {
		CANRxMessage();
 8000d56:	f000 f801 	bl	8000d5c <CANRxMessage>
 8000d5a:	e7fc      	b.n	8000d56 <CANRxMessageTask+0x8>

08000d5c <CANRxMessage>:
	}
}

void CANRxMessage()
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af02      	add	r7, sp, #8
	// Receive channel to read from queue
	uint8_t channel;
	osStatus_t status = osMessageQueueGet(CANRxMessageQueue, &channel, NULL, osWaitForever);
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <CANRxMessage+0x64>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	f107 0113 	add.w	r1, r7, #19
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f005 f97c 	bl	800606c <osMessageQueueGet>
 8000d74:	6178      	str	r0, [r7, #20]
	if (status != osOK) {
			// Handle if not ok
	}

	uint32_t ID = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
	uint8_t DLC = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8] = {0};
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]

	// Attain mutex then read message
	if (osMutexWait(SPIMutexHandle, 0) == osOK)
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <CANRxMessage+0x68>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 ffc5 	bl	8005d1c <osMutexAcquire>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10e      	bne.n	8000db6 <CANRxMessage+0x5a>
	{
		receiveCANMessage(channel, &ID, &DLC, data, &peripheral1);
 8000d98:	7cf8      	ldrb	r0, [r7, #19]
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	f107 020b 	add.w	r2, r7, #11
 8000da0:	f107 010c 	add.w	r1, r7, #12
 8000da4:	4c08      	ldr	r4, [pc, #32]	@ (8000dc8 <CANRxMessage+0x6c>)
 8000da6:	9400      	str	r4, [sp, #0]
 8000da8:	f7ff fe4e 	bl	8000a48 <receiveCANMessage>
		osMutexRelease(SPIMutexHandle);
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <CANRxMessage+0x68>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 f811 	bl	8005dd8 <osMutexRelease>
	// switch (ID) {
	// 	default:
	// 		// Do nothing?
	// 		continue;
	// }
}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000708 	.word	0x20000708
 8000dc4:	20000700 	.word	0x20000700
 8000dc8:	20000000 	.word	0x20000000

08000dcc <CANTxGatekeeperTask>:
 *      Author: MacKante
 */

#include "CANTxGatekeeperTask.h"

void CANTxGatekeeperTask(void* arg) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    for (;;) {
        CANTxGatekeeper();
 8000dd4:	f000 f802 	bl	8000ddc <CANTxGatekeeper>
 8000dd8:	e7fc      	b.n	8000dd4 <CANTxGatekeeperTask+0x8>
	...

08000ddc <CANTxGatekeeper>:
    }
}

void CANTxGatekeeper(CANMsg *msg) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	// Acquire message to send from queue
	CANMsg newMsg;
	osStatus_t status = osMessageQueueGet(CANTxMessageQueue, &newMsg, NULL, osWaitForever);
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <CANTxGatekeeper+0x64>)
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	f107 0108 	add.w	r1, r7, #8
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2200      	movs	r2, #0
 8000df2:	f005 f93b 	bl	800606c <osMessageQueueGet>
 8000df6:	61f8      	str	r0, [r7, #28]
	if (status != osOK) {
		// Handle if not ok
	}

	// Wait for mutex
	if ( osMutexWait(SPIMutexHandle, 0) == osOK )
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <CANTxGatekeeper+0x68>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 ff8c 	bl	8005d1c <osMutexAcquire>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d115      	bne.n	8000e36 <CANTxGatekeeper+0x5a>
	{
		// check if CAN message is standard/extended
		// if extendedID == 0, then message is standard
		if ((msg->extendedID == 0) && (msg->ID != 0))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <CANTxGatekeeper+0x48>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <CANTxGatekeeper+0x48>
		{
			sendCANMessage(msg, &peripheral2);
 8000e1a:	490b      	ldr	r1, [pc, #44]	@ (8000e48 <CANTxGatekeeper+0x6c>)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fd00 	bl	8000822 <sendCANMessage>
 8000e22:	e003      	b.n	8000e2c <CANTxGatekeeper+0x50>
		}
		else
		{
			sendExtendedCANMessage(msg, &peripheral2);
 8000e24:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <CANTxGatekeeper+0x6c>)
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fd76 	bl	8000918 <sendExtendedCANMessage>
		}
		osMutexRelease(SPIMutexHandle);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <CANTxGatekeeper+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 ffd1 	bl	8005dd8 <osMutexRelease>
	}

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000704 	.word	0x20000704
 8000e44:	20000700 	.word	0x20000700
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e50:	f000 fe11 	bl	8001a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e54:	f000 f87a 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e58:	f000 f9c2 	bl	80011e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e5c:	f000 f962 	bl	8001124 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e60:	f000 f990 	bl	8001184 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000e64:	f000 f8e2 	bl	800102c <MX_SPI1_Init>
  MX_SPI4_Init();
 8000e68:	f000 f91e 	bl	80010a8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  // Configure CAN IC
  ConfigureCANSPI(&peripheral1);
 8000e6c:	4824      	ldr	r0, [pc, #144]	@ (8000f00 <main+0xb4>)
 8000e6e:	f7ff fc42 	bl	80006f6 <ConfigureCANSPI>
  ConfigureCANSPI(&peripheral2);
 8000e72:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <main+0xb8>)
 8000e74:	f7ff fc3f 	bl	80006f6 <ConfigureCANSPI>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e78:	f004 fd78 	bl	800596c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  /* SPI Mutex */
  SPIMutexHandle = osMutexNew(&SPIMutex_attributes);
 8000e7c:	4822      	ldr	r0, [pc, #136]	@ (8000f08 <main+0xbc>)
 8000e7e:	f004 feb3 	bl	8005be8 <osMutexNew>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a21      	ldr	r2, [pc, #132]	@ (8000f0c <main+0xc0>)
 8000e86:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  CANInterruptQueue = osMessageQueueNew(CAN_INTERRUPT_QUEUE_COUNT, sizeof(CAN_INTERRUPT), NULL);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	200c      	movs	r0, #12
 8000e8e:	f004 fff3 	bl	8005e78 <osMessageQueueNew>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a1e      	ldr	r2, [pc, #120]	@ (8000f10 <main+0xc4>)
 8000e96:	6013      	str	r3, [r2, #0]
  CANTxMessageQueue = osMessageQueueNew(CAN_TRANSMIT_QUEUE_COUNT, sizeof(CANMsg), NULL);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2114      	movs	r1, #20
 8000e9c:	200a      	movs	r0, #10
 8000e9e:	f004 ffeb 	bl	8005e78 <osMessageQueueNew>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <main+0xc8>)
 8000ea6:	6013      	str	r3, [r2, #0]
  CANRxMessageQueue = osMessageQueueNew(CAN_RECEIVE_QUEUE_COUNT, sizeof(uint8_t), NULL);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	2005      	movs	r0, #5
 8000eae:	f004 ffe3 	bl	8005e78 <osMessageQueueNew>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <main+0xcc>)
 8000eb6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <main+0xd0>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4818      	ldr	r0, [pc, #96]	@ (8000f20 <main+0xd4>)
 8000ebe:	f004 fdbf 	bl	8005a40 <osThreadNew>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a17      	ldr	r2, [pc, #92]	@ (8000f24 <main+0xd8>)
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Creation of CANClearTask */
  CANClearInterruptTaskHandle = osThreadNew(CANClearInterruptTask, NULL, &CANClearInterruptTask_attributes);
 8000ec8:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <main+0xdc>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4817      	ldr	r0, [pc, #92]	@ (8000f2c <main+0xe0>)
 8000ece:	f004 fdb7 	bl	8005a40 <osThreadNew>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <main+0xe4>)
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Creation of CANRxMessageTask */
  CANRxMessageTaskHandle = osThreadNew(CANRxMessageTask, NULL, &CANRxMessageTask_attributes);
 8000ed8:	4a16      	ldr	r2, [pc, #88]	@ (8000f34 <main+0xe8>)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4816      	ldr	r0, [pc, #88]	@ (8000f38 <main+0xec>)
 8000ede:	f004 fdaf 	bl	8005a40 <osThreadNew>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a15      	ldr	r2, [pc, #84]	@ (8000f3c <main+0xf0>)
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Creation of CANTxGatekeeperTask */
  CANTxGateKeeperTaskHandle = osThreadNew(CANTxGatekeeperTask, NULL, &CANTxGateKeeperTask_attributes);
 8000ee8:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <main+0xf4>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4815      	ldr	r0, [pc, #84]	@ (8000f44 <main+0xf8>)
 8000eee:	f004 fda7 	bl	8005a40 <osThreadNew>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a14      	ldr	r2, [pc, #80]	@ (8000f48 <main+0xfc>)
 8000ef6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ef8:	f004 fd6c 	bl	80059d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <main+0xb0>
 8000f00:	20000000 	.word	0x20000000
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	080095b4 	.word	0x080095b4
 8000f0c:	20000700 	.word	0x20000700
 8000f10:	2000070c 	.word	0x2000070c
 8000f14:	20000704 	.word	0x20000704
 8000f18:	20000708 	.word	0x20000708
 8000f1c:	08009524 	.word	0x08009524
 8000f20:	08001545 	.word	0x08001545
 8000f24:	200006f0 	.word	0x200006f0
 8000f28:	08009590 	.word	0x08009590
 8000f2c:	08000b89 	.word	0x08000b89
 8000f30:	200006fc 	.word	0x200006fc
 8000f34:	0800956c 	.word	0x0800956c
 8000f38:	08000d4f 	.word	0x08000d4f
 8000f3c:	200006f8 	.word	0x200006f8
 8000f40:	08009548 	.word	0x08009548
 8000f44:	08000dcd 	.word	0x08000dcd
 8000f48:	200006f4 	.word	0x200006f4

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	@ 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2234      	movs	r2, #52	@ 0x34
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 f9b6 	bl	80092cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <SystemClock_Config+0xd8>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <SystemClock_Config+0xd8>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <SystemClock_Config+0xd8>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f88:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <SystemClock_Config+0xdc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f90:	4a25      	ldr	r2, [pc, #148]	@ (8001028 <SystemClock_Config+0xdc>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <SystemClock_Config+0xdc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fa8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fbc:	2360      	movs	r3, #96	@ 0x60
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f9f9 	bl	80023c8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 faca 	bl	8001574 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe0:	f001 f9a2 	bl	8002328 <HAL_PWREx_EnableOverDrive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fea:	f000 fac3 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	2103      	movs	r1, #3
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fc8a 	bl	8002924 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001016:	f000 faad 	bl	8001574 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	@ 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <MX_SPI1_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001038:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001046:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800104a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_SPI1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_SPI1_Init+0x74>)
 800105a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800105e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001062:	2220      	movs	r2, #32
 8001064:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_SPI1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_SPI1_Init+0x74>)
 800107a:	2207      	movs	r2, #7
 800107c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_SPI1_Init+0x74>)
 8001086:	2208      	movs	r2, #8
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_SPI1_Init+0x74>)
 800108c:	f002 faca 	bl	8003624 <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 fa6d 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000098 	.word	0x20000098
 80010a4:	40013000 	.word	0x40013000

080010a8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_SPI4_Init+0x74>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <MX_SPI4_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_SPI4_Init+0x74>)
 80010b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_SPI4_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_SPI4_Init+0x74>)
 80010c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010c6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_SPI4_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <MX_SPI4_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_SPI4_Init+0x74>)
 80010d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010da:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_SPI4_Init+0x74>)
 80010de:	2220      	movs	r2, #32
 80010e0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_SPI4_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_SPI4_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_SPI4_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_SPI4_Init+0x74>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_SPI4_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_SPI4_Init+0x74>)
 8001102:	2208      	movs	r2, #8
 8001104:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_SPI4_Init+0x74>)
 8001108:	f002 fa8c 	bl	8003624 <HAL_SPI_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001112:	f000 fa2f 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000fc 	.word	0x200000fc
 8001120:	40013400 	.word	0x40013400

08001124 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <MX_USART3_UART_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USART3_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USART3_UART_Init+0x58>)
 8001168:	f003 fc9c 	bl	8004aa4 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 f9ff 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000160 	.word	0x20000160
 8001180:	40004800 	.word	0x40004800

08001184 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800118e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001192:	2206      	movs	r2, #6
 8001194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001198:	2202      	movs	r2, #2
 800119a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011bc:	2201      	movs	r2, #1
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c8:	f000 ff66 	bl	8002098 <HAL_PCD_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011d2:	f000 f9cf 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001e8 	.word	0x200001e8

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	@ 0x38
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4bb2      	ldr	r3, [pc, #712]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4ab1      	ldr	r2, [pc, #708]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4baf      	ldr	r3, [pc, #700]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	623b      	str	r3, [r7, #32]
 800120c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4bac      	ldr	r3, [pc, #688]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4aab      	ldr	r2, [pc, #684]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4ba9      	ldr	r3, [pc, #676]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001226:	4ba6      	ldr	r3, [pc, #664]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4aa5      	ldr	r2, [pc, #660]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4ba3      	ldr	r3, [pc, #652]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	4ba0      	ldr	r3, [pc, #640]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a9f      	ldr	r2, [pc, #636]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b9d      	ldr	r3, [pc, #628]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b9a      	ldr	r3, [pc, #616]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a99      	ldr	r2, [pc, #612]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b97      	ldr	r3, [pc, #604]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b94      	ldr	r3, [pc, #592]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a93      	ldr	r2, [pc, #588]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b91      	ldr	r3, [pc, #580]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b8e      	ldr	r3, [pc, #568]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a8d      	ldr	r2, [pc, #564]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b8b      	ldr	r3, [pc, #556]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800129e:	4b88      	ldr	r3, [pc, #544]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a87      	ldr	r2, [pc, #540]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 80012a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b85      	ldr	r3, [pc, #532]	@ (80014c0 <MX_GPIO_Init+0x2e0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2110      	movs	r1, #16
 80012ba:	4882      	ldr	r0, [pc, #520]	@ (80014c4 <MX_GPIO_Init+0x2e4>)
 80012bc:	f000 feba 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2110      	movs	r1, #16
 80012c4:	4880      	ldr	r0, [pc, #512]	@ (80014c8 <MX_GPIO_Init+0x2e8>)
 80012c6:	f000 feb5 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80012d0:	487e      	ldr	r0, [pc, #504]	@ (80014cc <MX_GPIO_Init+0x2ec>)
 80012d2:	f000 feaf 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	@ 0x40
 80012da:	487d      	ldr	r0, [pc, #500]	@ (80014d0 <MX_GPIO_Init+0x2f0>)
 80012dc:	f000 feaa 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 80012e0:	2310      	movs	r3, #16
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	4873      	ldr	r0, [pc, #460]	@ (80014c4 <MX_GPIO_Init+0x2e4>)
 80012f8:	f000 fcf0 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001302:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	4870      	ldr	r0, [pc, #448]	@ (80014d4 <MX_GPIO_Init+0x2f4>)
 8001314:	f000 fce2 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN2_RX1BF_Pin CAN2_RX0BF_Pin CAN_RX1BF_Pin */
  GPIO_InitStruct.Pin = CAN2_RX1BF_Pin|CAN2_RX0BF_Pin|CAN_RX1BF_Pin;
 8001318:	f241 0306 	movw	r3, #4102	@ 0x1006
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	486a      	ldr	r0, [pc, #424]	@ (80014d8 <MX_GPIO_Init+0x2f8>)
 8001330:	f000 fcd4 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001334:	2332      	movs	r3, #50	@ 0x32
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4861      	ldr	r0, [pc, #388]	@ (80014d4 <MX_GPIO_Init+0x2f4>)
 8001350:	f000 fcc4 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001354:	2306      	movs	r3, #6
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4856      	ldr	r0, [pc, #344]	@ (80014c8 <MX_GPIO_Init+0x2e8>)
 8001370:	f000 fcb4 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001374:	2310      	movs	r3, #16
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	484f      	ldr	r0, [pc, #316]	@ (80014c8 <MX_GPIO_Init+0x2e8>)
 800138c:	f000 fca6 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_INT_Pin */
  GPIO_InitStruct.Pin = CAN2_INT_Pin;
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001394:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN2_INT_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4848      	ldr	r0, [pc, #288]	@ (80014c8 <MX_GPIO_Init+0x2e8>)
 80013a6:	f000 fc99 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013aa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4842      	ldr	r0, [pc, #264]	@ (80014cc <MX_GPIO_Init+0x2ec>)
 80013c4:	f000 fc8a 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013da:	230b      	movs	r3, #11
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4839      	ldr	r0, [pc, #228]	@ (80014cc <MX_GPIO_Init+0x2ec>)
 80013e6:	f000 fc79 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80013ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4836      	ldr	r0, [pc, #216]	@ (80014dc <MX_GPIO_Init+0x2fc>)
 8001402:	f000 fc6b 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RX0BF_Pin */
  GPIO_InitStruct.Pin = CAN_RX0BF_Pin;
 8001406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN_RX0BF_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	482f      	ldr	r0, [pc, #188]	@ (80014dc <MX_GPIO_Init+0x2fc>)
 800141e:	f000 fc5d 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4825      	ldr	r0, [pc, #148]	@ (80014d0 <MX_GPIO_Init+0x2f0>)
 800143a:	f000 fc4f 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	481f      	ldr	r0, [pc, #124]	@ (80014d0 <MX_GPIO_Init+0x2f0>)
 8001452:	f000 fc43 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001456:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001468:	230b      	movs	r3, #11
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	4817      	ldr	r0, [pc, #92]	@ (80014d0 <MX_GPIO_Init+0x2f0>)
 8001474:	f000 fc32 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2105      	movs	r1, #5
 800147c:	2007      	movs	r0, #7
 800147e:	f000 fc03 	bl	8001c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001482:	2007      	movs	r0, #7
 8001484:	f000 fc1c 	bl	8001cc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2105      	movs	r1, #5
 800148c:	2008      	movs	r0, #8
 800148e:	f000 fbfb 	bl	8001c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001492:	2008      	movs	r0, #8
 8001494:	f000 fc14 	bl	8001cc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2105      	movs	r1, #5
 800149c:	2017      	movs	r0, #23
 800149e:	f000 fbf3 	bl	8001c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014a2:	2017      	movs	r0, #23
 80014a4:	f000 fc0c 	bl	8001cc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2105      	movs	r1, #5
 80014ac:	2028      	movs	r0, #40	@ 0x28
 80014ae:	f000 fbeb 	bl	8001c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b2:	2028      	movs	r0, #40	@ 0x28
 80014b4:	f000 fc04 	bl	8001cc0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b8:	bf00      	nop
 80014ba:	3738      	adds	r7, #56	@ 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40021800 	.word	0x40021800
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40020c00 	.word	0x40020c00

080014e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014f0:	d00b      	beq.n	800150a <HAL_GPIO_EXTI_Callback+0x2a>
 80014f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014f6:	dc18      	bgt.n	800152a <HAL_GPIO_EXTI_Callback+0x4a>
 80014f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_EXTI_Callback+0x3a>
 80014fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001502:	d112      	bne.n	800152a <HAL_GPIO_EXTI_Callback+0x4a>
		case CAN_INT_Pin:
			// read the CANINTF register
			CANReadInterruptFlag = 1;
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x54>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
		case CAN_RX0BF_Pin:
			osMessageQueuePut(CANRxMessageQueue, &RX0Flag, 0, osWaitForever);
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x58>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	2200      	movs	r2, #0
 8001514:	4909      	ldr	r1, [pc, #36]	@ (800153c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001516:	f004 fd35 	bl	8005f84 <osMessageQueuePut>
		case CAN_RX1BF_Pin:
			osMessageQueuePut(CANRxMessageQueue, &RX1Flag, 0, osWaitForever);
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x58>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	2200      	movs	r2, #0
 8001524:	4906      	ldr	r1, [pc, #24]	@ (8001540 <HAL_GPIO_EXTI_Callback+0x60>)
 8001526:	f004 fd2d 	bl	8005f84 <osMessageQueuePut>
		case CAN2_RX0BF_Pin:
			// osMessageQueuePut(mq_id, msg_ptr, msg_prio, osWaitForever);
		case CAN2_RX1BF_Pin:
			// osMessageQueuePut(mq_id, msg_ptr, msg_prio, osWaitForever);
	}
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000710 	.word	0x20000710
 8001538:	20000708 	.word	0x20000708
 800153c:	20000711 	.word	0x20000711
 8001540:	20000018 	.word	0x20000018

08001544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <StartDefaultTask+0x8>

08001550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001562:	f000 fa95 	bl	8001a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40001000 	.word	0x40001000

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f000 fb63 	bl	8001c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2e      	ldr	r2, [pc, #184]	@ (80016a8 <HAL_SPI_MspInit+0xd8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d128      	bne.n	8001644 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f2:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a2d      	ldr	r2, [pc, #180]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 80015f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a27      	ldr	r2, [pc, #156]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001622:	2338      	movs	r3, #56	@ 0x38
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001632:	2305      	movs	r3, #5
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	481c      	ldr	r0, [pc, #112]	@ (80016b0 <HAL_SPI_MspInit+0xe0>)
 800163e:	f000 fb4d 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001642:	e02c      	b.n	800169e <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI4)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <HAL_SPI_MspInit+0xe4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d127      	bne.n	800169e <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	4a16      	ldr	r2, [pc, #88]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001654:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001658:	6453      	str	r3, [r2, #68]	@ 0x44
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a10      	ldr	r2, [pc, #64]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <HAL_SPI_MspInit+0xdc>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800167e:	2364      	movs	r3, #100	@ 0x64
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800168e:	2305      	movs	r3, #5
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <HAL_SPI_MspInit+0xe8>)
 800169a:	f000 fb1f 	bl	8001cdc <HAL_GPIO_Init>
}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	@ 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40013000 	.word	0x40013000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40013400 	.word	0x40013400
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0ae      	sub	sp, #184	@ 0xb8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2290      	movs	r2, #144	@ 0x90
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f007 fdf5 	bl	80092cc <memset>
  if(huart->Instance==USART3)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <HAL_UART_MspInit+0xb4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d13c      	bne.n	8001766 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fb6a 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001706:	f7ff ff35 	bl	8001574 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_UART_MspInit+0xb8>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <HAL_UART_MspInit+0xb8>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001714:	6413      	str	r3, [r2, #64]	@ 0x40
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <HAL_UART_MspInit+0xb8>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_UART_MspInit+0xb8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <HAL_UART_MspInit+0xb8>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_UART_MspInit+0xb8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800173a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800173e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001754:	2307      	movs	r3, #7
 8001756:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <HAL_UART_MspInit+0xbc>)
 8001762:	f000 fabb 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	37b8      	adds	r7, #184	@ 0xb8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40004800 	.word	0x40004800
 8001774:	40023800 	.word	0x40023800
 8001778:	40020c00 	.word	0x40020c00

0800177c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0ae      	sub	sp, #184	@ 0xb8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2290      	movs	r2, #144	@ 0x90
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 fd95 	bl	80092cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017aa:	d159      	bne.n	8001860 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fb09 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80017c8:	f7ff fed4 	bl	8001574 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	4a25      	ldr	r2, [pc, #148]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d8:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017e4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017fe:	230a      	movs	r3, #10
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001808:	4619      	mov	r1, r3
 800180a:	4818      	ldr	r0, [pc, #96]	@ (800186c <HAL_PCD_MspInit+0xf0>)
 800180c:	f000 fa66 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001828:	4619      	mov	r1, r3
 800182a:	4810      	ldr	r0, [pc, #64]	@ (800186c <HAL_PCD_MspInit+0xf0>)
 800182c:	f000 fa56 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 8001832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001834:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 8001836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800183a:	6353      	str	r3, [r2, #52]	@ 0x34
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 800183e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 800184a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001852:	6453      	str	r3, [r2, #68]	@ 0x44
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_PCD_MspInit+0xec>)
 8001856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	37b8      	adds	r7, #184	@ 0xb8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	@ 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001880:	4b33      	ldr	r3, [pc, #204]	@ (8001950 <HAL_InitTick+0xe0>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	4a32      	ldr	r2, [pc, #200]	@ (8001950 <HAL_InitTick+0xe0>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6413      	str	r3, [r2, #64]	@ 0x40
 800188c:	4b30      	ldr	r3, [pc, #192]	@ (8001950 <HAL_InitTick+0xe0>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001898:	f107 0210 	add.w	r2, r7, #16
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fa64 	bl	8002d70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018b2:	f001 fa35 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80018b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80018b8:	e004      	b.n	80018c4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018ba:	f001 fa31 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80018be:	4603      	mov	r3, r0
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c6:	4a23      	ldr	r2, [pc, #140]	@ (8001954 <HAL_InitTick+0xe4>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	3b01      	subs	r3, #1
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <HAL_InitTick+0xe8>)
 80018d4:	4a21      	ldr	r2, [pc, #132]	@ (800195c <HAL_InitTick+0xec>)
 80018d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <HAL_InitTick+0xe8>)
 80018da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <HAL_InitTick+0xe8>)
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <HAL_InitTick+0xe8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_InitTick+0xe8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_InitTick+0xe8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018f8:	4817      	ldr	r0, [pc, #92]	@ (8001958 <HAL_InitTick+0xe8>)
 80018fa:	f002 fdf3 	bl	80044e4 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001904:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001908:	2b00      	cmp	r3, #0
 800190a:	d11b      	bne.n	8001944 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800190c:	4812      	ldr	r0, [pc, #72]	@ (8001958 <HAL_InitTick+0xe8>)
 800190e:	f002 fe4b 	bl	80045a8 <HAL_TIM_Base_Start_IT>
 8001912:	4603      	mov	r3, r0
 8001914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001918:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800191c:	2b00      	cmp	r3, #0
 800191e:	d111      	bne.n	8001944 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001920:	2036      	movs	r0, #54	@ 0x36
 8001922:	f000 f9cd 	bl	8001cc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d808      	bhi.n	800193e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	2036      	movs	r0, #54	@ 0x36
 8001932:	f000 f9a9 	bl	8001c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_InitTick+0xf0>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e002      	b.n	8001944 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001944:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001948:	4618      	mov	r0, r3
 800194a:	3738      	adds	r7, #56	@ 0x38
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	431bde83 	.word	0x431bde83
 8001958:	20000714 	.word	0x20000714
 800195c:	40001000 	.word	0x40001000
 8001960:	20000020 	.word	0x20000020

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN2_RX1BF_Pin);
 800199e:	2002      	movs	r0, #2
 80019a0:	f000 fb62 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN2_RX0BF_Pin);
 80019ac:	2004      	movs	r0, #4
 80019ae:	f000 fb5b 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 80019ba:	2080      	movs	r0, #128	@ 0x80
 80019bc:	f000 fb54 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_RX1BF_Pin);
 80019c8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80019cc:	f000 fb4c 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80019d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019d4:	f000 fb48 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 80019d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019dc:	f000 fb44 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_RX0BF_Pin);
 80019e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019e4:	f000 fb40 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM6_DAC_IRQHandler+0x10>)
 80019f2:	f002 fe51 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000714 	.word	0x20000714

08001a00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <SystemInit+0x20>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0a:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <SystemInit+0x20>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a28:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2a:	490e      	ldr	r1, [pc, #56]	@ (8001a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a40:	4c0b      	ldr	r4, [pc, #44]	@ (8001a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4e:	f7ff ffd7 	bl	8001a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f007 fc99 	bl	8009388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7ff f9f9 	bl	8000e4c <main>
  bx  lr    
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a68:	080095ec 	.word	0x080095ec
  ldr r2, =_sbss
 8001a6c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001a70:	20005284 	.word	0x20005284

08001a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC_IRQHandler>

08001a76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 f8f9 	bl	8001c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a80:	200f      	movs	r0, #15
 8001a82:	f7ff fef5 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a86:	f7ff fd7b 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000024 	.word	0x20000024
 8001ab4:	20000760 	.word	0x20000760

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000760 	.word	0x20000760

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000024 	.word	0x20000024

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x40>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x40>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00
 8001b5c:	05fa0000 	.word	0x05fa0000

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	@ (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	@ (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ff4c 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9a:	f7ff ff61 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	6978      	ldr	r0, [r7, #20]
 8001ca6:	f7ff ffb1 	bl	8001c0c <NVIC_EncodePriority>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff80 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff54 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e175      	b.n	8001fe8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8164 	bne.w	8001fe2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d005      	beq.n	8001d32 <HAL_GPIO_Init+0x56>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d017      	beq.n	8001dd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80be 	beq.w	8001fe2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <HAL_GPIO_Init+0x324>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <HAL_GPIO_Init+0x324>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e72:	4b63      	ldr	r3, [pc, #396]	@ (8002000 <HAL_GPIO_Init+0x324>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e7e:	4a61      	ldr	r2, [pc, #388]	@ (8002004 <HAL_GPIO_Init+0x328>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	@ (8002008 <HAL_GPIO_Init+0x32c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d037      	beq.n	8001f1a <HAL_GPIO_Init+0x23e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a57      	ldr	r2, [pc, #348]	@ (800200c <HAL_GPIO_Init+0x330>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_GPIO_Init+0x23a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a56      	ldr	r2, [pc, #344]	@ (8002010 <HAL_GPIO_Init+0x334>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <HAL_GPIO_Init+0x236>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a55      	ldr	r2, [pc, #340]	@ (8002014 <HAL_GPIO_Init+0x338>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x232>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a54      	ldr	r2, [pc, #336]	@ (8002018 <HAL_GPIO_Init+0x33c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x22e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a53      	ldr	r2, [pc, #332]	@ (800201c <HAL_GPIO_Init+0x340>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x22a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	@ (8002020 <HAL_GPIO_Init+0x344>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a51      	ldr	r2, [pc, #324]	@ (8002024 <HAL_GPIO_Init+0x348>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x222>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a50      	ldr	r2, [pc, #320]	@ (8002028 <HAL_GPIO_Init+0x34c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x21e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <HAL_GPIO_Init+0x350>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x21a>
 8001ef2:	2309      	movs	r3, #9
 8001ef4:	e012      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	e010      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001efa:	2308      	movs	r3, #8
 8001efc:	e00e      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e00c      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f02:	2306      	movs	r3, #6
 8001f04:	e00a      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f06:	2305      	movs	r3, #5
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x240>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f2c:	4935      	ldr	r1, [pc, #212]	@ (8002004 <HAL_GPIO_Init+0x328>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a34      	ldr	r2, [pc, #208]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a29      	ldr	r2, [pc, #164]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8e:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <HAL_GPIO_Init+0x354>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	f67f ae86 	bls.w	8001cfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3724      	adds	r7, #36	@ 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40013800 	.word	0x40013800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40021400 	.word	0x40021400
 8002020:	40021800 	.word	0x40021800
 8002024:	40021c00 	.word	0x40021c00
 8002028:	40022000 	.word	0x40022000
 800202c:	40022400 	.word	0x40022400
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fa2a 	bl	80014e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	b08f      	sub	sp, #60	@ 0x3c
 800209c:	af0a      	add	r7, sp, #40	@ 0x28
 800209e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e116      	b.n	80022d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fb59 	bl	800177c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 f99b 	bl	8005424 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	687e      	ldr	r6, [r7, #4]
 80020f6:	466d      	mov	r5, sp
 80020f8:	f106 0410 	add.w	r4, r6, #16
 80020fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002104:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002108:	e885 0003 	stmia.w	r5, {r0, r1}
 800210c:	1d33      	adds	r3, r6, #4
 800210e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f003 f92f 	bl	8005374 <USB_CoreInit>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d7      	b.n	80022d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f989 	bl	8005446 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e04a      	b.n	80021d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	333d      	adds	r3, #61	@ 0x3d
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	333c      	adds	r3, #60	@ 0x3c
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b298      	uxth	r0, r3
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3344      	adds	r3, #68	@ 0x44
 8002176:	4602      	mov	r2, r0
 8002178:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3340      	adds	r3, #64	@ 0x40
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3348      	adds	r3, #72	@ 0x48
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	334c      	adds	r3, #76	@ 0x4c
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3354      	adds	r3, #84	@ 0x54
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3301      	adds	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3af      	bcc.n	800213a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e044      	b.n	800226a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	3301      	adds	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d3b5      	bcc.n	80021e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	687e      	ldr	r6, [r7, #4]
 800227c:	466d      	mov	r5, sp
 800227e:	f106 0410 	add.w	r4, r6, #16
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002292:	1d33      	adds	r3, r6, #4
 8002294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	f003 f922 	bl	80054e0 <USB_DevInit>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e014      	b.n	80022d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f80a 	bl	80022e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 fae0 	bl	8005896 <USB_DevDisconnect>

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_PCDEx_ActivateLPM+0x44>)
 8002310:	4313      	orrs	r3, r2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	10000003 	.word	0x10000003

08002328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	4a22      	ldr	r2, [pc, #136]	@ (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	@ 0x40
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002356:	f7ff fbaf 	bl	8001ab8 <HAL_GetTick>
 800235a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800235c:	e009      	b.n	8002372 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800235e:	f7ff fbab 	bl	8001ab8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800236c:	d901      	bls.n	8002372 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e022      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237e:	d1ee      	bne.n	800235e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002380:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff fb94 	bl	8001ab8 <HAL_GetTick>
 8002390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002392:	e009      	b.n	80023a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002394:	f7ff fb90 	bl	8001ab8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023a2:	d901      	bls.n	80023a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e007      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023b4:	d1ee      	bne.n	8002394 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e29b      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ec:	4b96      	ldr	r3, [pc, #600]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d00c      	beq.n	8002412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f8:	4b93      	ldr	r3, [pc, #588]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
 8002404:	4b90      	ldr	r3, [pc, #576]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b8d      	ldr	r3, [pc, #564]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d06c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x130>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d168      	bne.n	80024f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e275      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x7a>
 8002434:	4b84      	ldr	r3, [pc, #528]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x9c>
 800244a:	4b7f      	ldr	r3, [pc, #508]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7e      	ldr	r2, [pc, #504]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b7c      	ldr	r3, [pc, #496]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7b      	ldr	r2, [pc, #492]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xc0>
 800246e:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b73      	ldr	r3, [pc, #460]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a72      	ldr	r2, [pc, #456]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b6c      	ldr	r3, [pc, #432]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6b      	ldr	r2, [pc, #428]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff fb06 	bl	8001ab8 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fb02 	bl	8001ab8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e229      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff faf2 	bl	8001ab8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff faee 	bl	8001ab8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e215      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x110>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d069      	beq.n	80025da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	4b50      	ldr	r3, [pc, #320]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b4d      	ldr	r3, [pc, #308]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
 800251e:	4b4a      	ldr	r3, [pc, #296]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1e9      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	493d      	ldr	r1, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e040      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a38      	ldr	r2, [pc, #224]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff faa4 	bl	8001ab8 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff faa0 	bl	8001ab8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1c7      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4929      	ldr	r1, [pc, #164]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
 80025a6:	e018      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a26      	ldr	r2, [pc, #152]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fa80 	bl	8001ab8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff fa7c 	bl	8001ab8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1a3      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d038      	beq.n	8002658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f2:	4a15      	ldr	r2, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff fa5d 	bl	8001ab8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7ff fa59 	bl	8001ab8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e180      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x23a>
 8002620:	e01a      	b.n	8002658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff fa43 	bl	8001ab8 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff fa3f 	bl	8001ab8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d903      	bls.n	800264c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e166      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
 8002648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b92      	ldr	r3, [pc, #584]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a4 	beq.w	80027ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b8c      	ldr	r3, [pc, #560]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b89      	ldr	r3, [pc, #548]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a88      	ldr	r2, [pc, #544]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b86      	ldr	r3, [pc, #536]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b83      	ldr	r3, [pc, #524]	@ (800289c <HAL_RCC_OscConfig+0x4d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800269a:	4b80      	ldr	r3, [pc, #512]	@ (800289c <HAL_RCC_OscConfig+0x4d4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7f      	ldr	r2, [pc, #508]	@ (800289c <HAL_RCC_OscConfig+0x4d4>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fa07 	bl	8001ab8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fa03 	bl	8001ab8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	@ 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e12a      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b76      	ldr	r3, [pc, #472]	@ (800289c <HAL_RCC_OscConfig+0x4d4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x31a>
 80026d4:	4b70      	ldr	r3, [pc, #448]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a6f      	ldr	r2, [pc, #444]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x33c>
 80026ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	4b68      	ldr	r3, [pc, #416]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a67      	ldr	r2, [pc, #412]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x35e>
 800270c:	4b62      	ldr	r3, [pc, #392]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a61      	ldr	r2, [pc, #388]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	4b5f      	ldr	r3, [pc, #380]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a5e      	ldr	r2, [pc, #376]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002726:	4b5c      	ldr	r3, [pc, #368]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	@ 0x70
 8002732:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a58      	ldr	r2, [pc, #352]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7ff f9b7 	bl	8001ab8 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff f9b3 	bl	8001ab8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0d8      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x386>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7ff f9a1 	bl	8001ab8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff f99d 	bl	8001ab8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0c2      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80ae 	beq.w	8002914 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d06d      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d14b      	bne.n	8002864 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a31      	ldr	r2, [pc, #196]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff f96e 	bl	8001ab8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff f96a 	bl	8001ab8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e091      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	491b      	ldr	r1, [pc, #108]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a18      	ldr	r2, [pc, #96]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff f93c 	bl	8001ab8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff f938 	bl	8001ab8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e05f      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x47c>
 8002862:	e057      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f922 	bl	8001ab8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7ff f91e 	bl	8001ab8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e045      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x4b0>
 8002896:	e03d      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002920 <HAL_RCC_OscConfig+0x558>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d030      	beq.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d129      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d122      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d119      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d10f      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	4965      	ldr	r1, [pc, #404]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d040      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d115      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e073      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b39      	ldr	r3, [pc, #228]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4936      	ldr	r1, [pc, #216]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7ff f84e 	bl	8001ab8 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7ff f84a 	bl	8001ab8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e053      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d210      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 020f 	bic.w	r2, r3, #15
 8002a5e:	4922      	ldr	r1, [pc, #136]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	@ (8002af0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe feca 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	080095c4 	.word	0x080095c4
 8002af4:	2000001c 	.word	0x2000001c
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	@ 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c0c:	f7fd fb18 	bl	8000240 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd fabe 	bl	8000240 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	@ 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000001c 	.word	0x2000001c

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	@ (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	080095d4 	.word	0x080095d4

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	@ (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	080095d4 	.word	0x080095d4

08002d70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d80:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002db2:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <HAL_RCC_GetClockConfig+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 020f 	and.w	r2, r3, #15
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40023c00 	.word	0x40023c00

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dfc:	4b69      	ldr	r3, [pc, #420]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a68      	ldr	r2, [pc, #416]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e06:	6093      	str	r3, [r2, #8]
 8002e08:	4b66      	ldr	r3, [pc, #408]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e10:	4964      	ldr	r1, [pc, #400]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e34:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	4959      	ldr	r1, [pc, #356]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	494a      	ldr	r1, [pc, #296]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 808b 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	4a39      	ldr	r2, [pc, #228]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec4:	4b37      	ldr	r3, [pc, #220]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ed0:	4b35      	ldr	r3, [pc, #212]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe fdec 	bl	8001ab8 <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fe fde8 	bl	8001ab8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	@ 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e38f      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f02:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d035      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d02e      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f20:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f42:	4a18      	ldr	r2, [pc, #96]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f48:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d114      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fdb0 	bl	8001ab8 <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fdac 	bl	8001ab8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e351      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	4901      	ldr	r1, [pc, #4]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	0ffffcff 	.word	0x0ffffcff
 8002fb0:	4bac      	ldr	r3, [pc, #688]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4aab      	ldr	r2, [pc, #684]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fba:	6093      	str	r3, [r2, #8]
 8002fbc:	4ba9      	ldr	r3, [pc, #676]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	49a6      	ldr	r1, [pc, #664]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fda:	4ba2      	ldr	r3, [pc, #648]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe0:	4aa0      	ldr	r2, [pc, #640]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fea:	4b9e      	ldr	r3, [pc, #632]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	499b      	ldr	r1, [pc, #620]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003008:	4b96      	ldr	r3, [pc, #600]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003016:	4993      	ldr	r1, [pc, #588]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800302a:	4b8e      	ldr	r3, [pc, #568]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003038:	498a      	ldr	r1, [pc, #552]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304c:	4b85      	ldr	r3, [pc, #532]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800305a:	4982      	ldr	r1, [pc, #520]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800306e:	4b7d      	ldr	r3, [pc, #500]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003074:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4979      	ldr	r1, [pc, #484]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003090:	4b74      	ldr	r3, [pc, #464]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	4971      	ldr	r1, [pc, #452]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b8:	f023 020c 	bic.w	r2, r3, #12
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c0:	4968      	ldr	r1, [pc, #416]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030d4:	4b63      	ldr	r3, [pc, #396]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e2:	4960      	ldr	r1, [pc, #384]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003104:	4957      	ldr	r1, [pc, #348]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003118:	4b52      	ldr	r3, [pc, #328]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	494f      	ldr	r1, [pc, #316]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800313a:	4b4a      	ldr	r3, [pc, #296]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	4946      	ldr	r1, [pc, #280]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800315c:	4b41      	ldr	r3, [pc, #260]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	493e      	ldr	r1, [pc, #248]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800317e:	4b39      	ldr	r3, [pc, #228]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	4935      	ldr	r1, [pc, #212]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031a0:	4b30      	ldr	r3, [pc, #192]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ae:	492d      	ldr	r1, [pc, #180]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031c2:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031d0:	4924      	ldr	r1, [pc, #144]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003202:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003210:	4914      	ldr	r1, [pc, #80]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00b      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003224:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003234:	490b      	ldr	r1, [pc, #44]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00f      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003258:	4902      	ldr	r1, [pc, #8]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003274:	4b8a      	ldr	r3, [pc, #552]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800327a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003284:	4986      	ldr	r1, [pc, #536]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003298:	4b81      	ldr	r3, [pc, #516]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800329e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a8:	497d      	ldr	r1, [pc, #500]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d006      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80d6 	beq.w	8003470 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032c4:	4b76      	ldr	r3, [pc, #472]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a75      	ldr	r2, [pc, #468]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe fbf2 	bl	8001ab8 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032d8:	f7fe fbee 	bl	8001ab8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e195      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032ea:	4b6d      	ldr	r3, [pc, #436]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d021      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11d      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800330a:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003318:	4b61      	ldr	r3, [pc, #388]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	019a      	lsls	r2, r3, #6
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	071b      	lsls	r3, r3, #28
 800333e:	4958      	ldr	r1, [pc, #352]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003370:	d129      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003372:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003380:	4b47      	ldr	r3, [pc, #284]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	0f1b      	lsrs	r3, r3, #28
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	019a      	lsls	r2, r3, #6
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	061b      	lsls	r3, r3, #24
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	071b      	lsls	r3, r3, #28
 80033a6:	493e      	ldr	r1, [pc, #248]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033ae:	4b3c      	ldr	r3, [pc, #240]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b4:	f023 021f 	bic.w	r2, r3, #31
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	3b01      	subs	r3, #1
 80033be:	4938      	ldr	r1, [pc, #224]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01d      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033d2:	4b33      	ldr	r3, [pc, #204]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d8:	0e1b      	lsrs	r3, r3, #24
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033e0:	4b2f      	ldr	r3, [pc, #188]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e6:	0f1b      	lsrs	r3, r3, #28
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	019a      	lsls	r2, r3, #6
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	431a      	orrs	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	071b      	lsls	r3, r3, #28
 8003406:	4926      	ldr	r1, [pc, #152]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d011      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	019a      	lsls	r2, r3, #6
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	071b      	lsls	r3, r3, #28
 8003436:	491a      	ldr	r1, [pc, #104]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800343e:	4b18      	ldr	r3, [pc, #96]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344a:	f7fe fb35 	bl	8001ab8 <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003452:	f7fe fb31 	bl	8001ab8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b64      	cmp	r3, #100	@ 0x64
 800345e:	d901      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0d8      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003464:	4b0e      	ldr	r3, [pc, #56]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	f040 80ce 	bne.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a08      	ldr	r2, [pc, #32]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003484:	f7fe fb18 	bl	8001ab8 <HAL_GetTick>
 8003488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800348a:	e00b      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800348c:	f7fe fb14 	bl	8001ab8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d904      	bls.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0bb      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034b0:	d0ec      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d02e      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d12a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034da:	4b51      	ldr	r3, [pc, #324]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	0f1b      	lsrs	r3, r3, #28
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	019a      	lsls	r2, r3, #6
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	071b      	lsls	r3, r3, #28
 800350e:	4944      	ldr	r1, [pc, #272]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003516:	4b42      	ldr	r3, [pc, #264]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800351c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	493d      	ldr	r1, [pc, #244]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d022      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003544:	d11d      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003546:	4b36      	ldr	r3, [pc, #216]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	0e1b      	lsrs	r3, r3, #24
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	0f1b      	lsrs	r3, r3, #28
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	019a      	lsls	r2, r3, #6
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	4929      	ldr	r1, [pc, #164]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800358e:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003594:	0e1b      	lsrs	r3, r3, #24
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800359c:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	019a      	lsls	r2, r3, #6
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	071b      	lsls	r3, r3, #28
 80035c2:	4917      	ldr	r1, [pc, #92]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	4911      	ldr	r1, [pc, #68]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fe fa64 	bl	8001ab8 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035f4:	f7fe fa60 	bl	8001ab8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	@ 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e007      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800360e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003612:	d1ef      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e09d      	b.n	8003772 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003646:	d009      	beq.n	800365c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
 800364e:	e005      	b.n	800365c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd ffaa 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800369c:	d902      	bls.n	80036a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e002      	b.n	80036aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80036b2:	d007      	beq.n	80036c4 <HAL_SPI_Init+0xa0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036bc:	d002      	beq.n	80036c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	ea42 0103 	orr.w	r1, r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	f003 0204 	and.w	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003740:	ea42 0103 	orr.w	r1, r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b088      	sub	sp, #32
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_SPI_Transmit+0x22>
 8003798:	2302      	movs	r3, #2
 800379a:	e158      	b.n	8003a4e <HAL_SPI_Transmit+0x2d4>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a4:	f7fe f988 	bl	8001ab8 <HAL_GetTick>
 80037a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037be:	e13d      	b.n	8003a3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_Transmit+0x52>
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037d0:	e134      	b.n	8003a3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800381c:	d10f      	bne.n	800383e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800382c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800383c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b40      	cmp	r3, #64	@ 0x40
 800384a:	d007      	beq.n	800385c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003864:	d94b      	bls.n	80038fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_SPI_Transmit+0xfa>
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d13e      	bne.n	80038f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003898:	e02b      	b.n	80038f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d112      	bne.n	80038ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038cc:	e011      	b.n	80038f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ce:	f7fe f8f3 	bl	8001ab8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d803      	bhi.n	80038e6 <HAL_SPI_Transmit+0x16c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d102      	bne.n	80038ec <HAL_SPI_Transmit+0x172>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038f0:	e0a4      	b.n	8003a3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ce      	bne.n	800389a <HAL_SPI_Transmit+0x120>
 80038fc:	e07c      	b.n	80039f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_Transmit+0x192>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d170      	bne.n	80039ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d912      	bls.n	800393c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	1c9a      	adds	r2, r3, #2
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b02      	subs	r3, #2
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800393a:	e058      	b.n	80039ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	7812      	ldrb	r2, [r2, #0]
 8003948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003962:	e044      	b.n	80039ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d12b      	bne.n	80039ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d912      	bls.n	80039a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b02      	subs	r3, #2
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039a0:	e025      	b.n	80039ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039c8:	e011      	b.n	80039ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ca:	f7fe f875 	bl	8001ab8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d803      	bhi.n	80039e2 <HAL_SPI_Transmit+0x268>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_Transmit+0x26e>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ec:	e026      	b.n	8003a3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1b5      	bne.n	8003964 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fd07 	bl	8004410 <SPI_EndRxTxTransaction>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e000      	b.n	8003a3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a72:	d112      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10e      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f910 	bl	8003cb6 <HAL_SPI_TransmitReceive>
 8003a96:	4603      	mov	r3, r0
 8003a98:	e109      	b.n	8003cae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SPI_Receive+0x52>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e102      	b.n	8003cae <HAL_SPI_Receive+0x258>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab0:	f7fe f802 	bl	8001ab8 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac6:	e0e9      	b.n	8003c9c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x7e>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad8:	e0e0      	b.n	8003c9c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b24:	d908      	bls.n	8003b38 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	e007      	b.n	8003b48 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b50:	d10f      	bne.n	8003b72 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d007      	beq.n	8003b90 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b98:	d867      	bhi.n	8003c6a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b9a:	e030      	b.n	8003bfe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d117      	bne.n	8003bda <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f103 020c 	add.w	r2, r3, #12
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	7812      	ldrb	r2, [r2, #0]
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003bd8:	e011      	b.n	8003bfe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bda:	f7fd ff6d 	bl	8001ab8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d803      	bhi.n	8003bf2 <HAL_SPI_Receive+0x19c>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d102      	bne.n	8003bf8 <HAL_SPI_Receive+0x1a2>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bfc:	e04e      	b.n	8003c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1c8      	bne.n	8003b9c <HAL_SPI_Receive+0x146>
 8003c0a:	e034      	b.n	8003c76 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d115      	bne.n	8003c46 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003c44:	e011      	b.n	8003c6a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c46:	f7fd ff37 	bl	8001ab8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_Receive+0x208>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_Receive+0x20e>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c68:	e018      	b.n	8003c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ca      	bne.n	8003c0c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fb4c 	bl	8004318 <SPI_EndRxTransaction>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
 8003c98:	e000      	b.n	8003c9c <HAL_SPI_Receive+0x246>
  }

error :
 8003c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b08a      	sub	sp, #40	@ 0x28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x26>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e1fb      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x41e>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce4:	f7fd fee8 	bl	8001ab8 <HAL_GetTick>
 8003ce8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cf0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d00:	7efb      	ldrb	r3, [r7, #27]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00e      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x6e>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d0c:	d106      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x66>
 8003d16:	7efb      	ldrb	r3, [r7, #27]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d003      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003d22:	e1cd      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x80>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x80>
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003d3c:	e1c0      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d003      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2205      	movs	r2, #5
 8003d4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	887a      	ldrh	r2, [r7, #2]
 8003d62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	887a      	ldrh	r2, [r7, #2]
 8003d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d94:	d802      	bhi.n	8003d9c <HAL_SPI_TransmitReceive+0xe6>
 8003d96:	8a3b      	ldrh	r3, [r7, #16]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d908      	bls.n	8003dae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	e007      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc8:	2b40      	cmp	r3, #64	@ 0x40
 8003dca:	d007      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003de4:	d97c      	bls.n	8003ee0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0x13e>
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d169      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e18:	e056      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d11b      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x1aa>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x1aa>
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d113      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x1f2>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	b292      	uxth	r2, r2
 8003e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ea8:	f7fd fe06 	bl	8001ab8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d807      	bhi.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d003      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003ec6:	e0fb      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1a3      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x164>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d19d      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x164>
 8003ede:	e0df      	b.n	80040a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x23a>
 8003ee8:	8a7b      	ldrh	r3, [r7, #18]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	f040 80cb 	bne.w	8004086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d912      	bls.n	8003f20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b02      	subs	r3, #2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f1e:	e0b2      	b.n	8004086 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f46:	e09e      	b.n	8004086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d134      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x30a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02f      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x30a>
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d12c      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d912      	bls.n	8003f96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f80:	1c9a      	adds	r2, r3, #2
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b02      	subs	r3, #2
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f94:	e012      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d148      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x3aa>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d042      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d923      	bls.n	800402e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b02      	subs	r3, #2
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d81f      	bhi.n	800405c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	e016      	b.n	800405c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f103 020c 	add.w	r2, r3, #12
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004060:	f7fd fd2a 	bl	8001ab8 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406c:	429a      	cmp	r2, r3
 800406e:	d803      	bhi.n	8004078 <HAL_SPI_TransmitReceive+0x3c2>
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d102      	bne.n	800407e <HAL_SPI_TransmitReceive+0x3c8>
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004084:	e01c      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f af5b 	bne.w	8003f48 <HAL_SPI_TransmitReceive+0x292>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f af54 	bne.w	8003f48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f9b3 	bl	8004410 <SPI_EndRxTxTransaction>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80040bc:	e000      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80040d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040ec:	f7fd fce4 	bl	8001ab8 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040fc:	f7fd fcdc 	bl	8001ab8 <HAL_GetTick>
 8004100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004102:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	015b      	lsls	r3, r3, #5
 8004108:	0d1b      	lsrs	r3, r3, #20
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004112:	e054      	b.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d050      	beq.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800411c:	f7fd fccc 	bl	8001ab8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	429a      	cmp	r2, r3
 800412a:	d902      	bls.n	8004132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13d      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414a:	d111      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004154:	d004      	beq.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d107      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004178:	d10f      	bne.n	800419a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e017      	b.n	80041de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d19b      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000001c 	.word	0x2000001c

080041ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041fe:	f7fd fc5b 	bl	8001ab8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	4413      	add	r3, r2
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800420e:	f7fd fc53 	bl	8001ab8 <HAL_GetTick>
 8004212:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800421c:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00da      	lsls	r2, r3, #3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	0d1b      	lsrs	r3, r3, #20
 800422c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004234:	e060      	b.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800423c:	d107      	bne.n	800424e <SPI_WaitFifoStateUntilTimeout+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800424c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d050      	beq.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004256:	f7fd fc2f 	bl	8001ab8 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004262:	429a      	cmp	r2, r3
 8004264:	d902      	bls.n	800426c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d13d      	bne.n	80042e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800427a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004284:	d111      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428e:	d004      	beq.n	800429a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004298:	d107      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b2:	d10f      	bne.n	80042d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e010      	b.n	800430a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d196      	bne.n	8004236 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	@ 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000001c 	.word	0x2000001c

08004318 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432c:	d111      	bne.n	8004352 <SPI_EndRxTransaction+0x3a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004336:	d004      	beq.n	8004342 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004340:	d107      	bne.n	8004352 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435a:	d112      	bne.n	8004382 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	2180      	movs	r1, #128	@ 0x80
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff feb8 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e03d      	b.n	80043fe <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004382:	4b21      	ldr	r3, [pc, #132]	@ (8004408 <SPI_EndRxTransaction+0xf0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	@ (800440c <SPI_EndRxTransaction+0xf4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	0d5b      	lsrs	r3, r3, #21
 800438e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b80      	cmp	r3, #128	@ 0x80
 80043b0:	d0f2      	beq.n	8004398 <SPI_EndRxTransaction+0x80>
 80043b2:	e000      	b.n	80043b6 <SPI_EndRxTransaction+0x9e>
        break;
 80043b4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043be:	d11d      	bne.n	80043fc <SPI_EndRxTransaction+0xe4>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c8:	d004      	beq.n	80043d4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d2:	d113      	bne.n	80043fc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff ff03 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e000      	b.n	80043fe <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000001c 	.word	0x2000001c
 800440c:	165e9f81 	.word	0x165e9f81

08004410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fedf 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e046      	b.n	80044d2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004444:	4b25      	ldr	r3, [pc, #148]	@ (80044dc <SPI_EndRxTxTransaction+0xcc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	@ (80044e0 <SPI_EndRxTxTransaction+0xd0>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0d5b      	lsrs	r3, r3, #21
 8004450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004462:	d112      	bne.n	800448a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff fe34 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e023      	b.n	80044d2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3b01      	subs	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d0f2      	beq.n	800448a <SPI_EndRxTxTransaction+0x7a>
 80044a4:	e000      	b.n	80044a8 <SPI_EndRxTxTransaction+0x98>
        break;
 80044a6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fe99 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e000      	b.n	80044d2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000001c 	.word	0x2000001c
 80044e0:	165e9f81 	.word	0x165e9f81

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e049      	b.n	800458a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f841 	bl	8004592 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 fa00 	bl	8004928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e054      	b.n	800466a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <HAL_TIM_Base_Start_IT+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d01d      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a22      	ldr	r2, [pc, #136]	@ (800467c <HAL_TIM_Base_Start_IT+0xd4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a21      	ldr	r2, [pc, #132]	@ (8004680 <HAL_TIM_Base_Start_IT+0xd8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1f      	ldr	r2, [pc, #124]	@ (8004684 <HAL_TIM_Base_Start_IT+0xdc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1e      	ldr	r2, [pc, #120]	@ (8004688 <HAL_TIM_Base_Start_IT+0xe0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1c      	ldr	r2, [pc, #112]	@ (800468c <HAL_TIM_Base_Start_IT+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1b      	ldr	r2, [pc, #108]	@ (8004690 <HAL_TIM_Base_Start_IT+0xe8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d115      	bne.n	8004654 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	4b19      	ldr	r3, [pc, #100]	@ (8004694 <HAL_TIM_Base_Start_IT+0xec>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d015      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0xbe>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d011      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004652:	e008      	b.n	8004666 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e000      	b.n	8004668 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004666:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800
 8004684:	40000c00 	.word	0x40000c00
 8004688:	40010400 	.word	0x40010400
 800468c:	40014000 	.word	0x40014000
 8004690:	40001800 	.word	0x40001800
 8004694:	00010007 	.word	0x00010007

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0202 	mvn.w	r2, #2
 80046c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f905 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8f7 	bl	80048d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f908 	bl	80048fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8db 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8cd 	bl	80048d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8de 	bl	80048fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f8b1 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8a3 	bl	80048d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8b4 	bl	80048fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f887 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f879 	bl	80048d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f88a 	bl	80048fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10e      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0201 	mvn.w	r2, #1
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fc fe9a 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b80      	cmp	r3, #128	@ 0x80
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004834:	2b80      	cmp	r3, #128	@ 0x80
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f91a 	bl	8004a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004856:	d10e      	bne.n	8004876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b80      	cmp	r3, #128	@ 0x80
 8004864:	d107      	bne.n	8004876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800486e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f90d 	bl	8004a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004880:	2b40      	cmp	r3, #64	@ 0x40
 8004882:	d10e      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488e:	2b40      	cmp	r3, #64	@ 0x40
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f838 	bl	8004912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d10e      	bne.n	80048ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0220 	mvn.w	r2, #32
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8cd 	bl	8004a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a40      	ldr	r2, [pc, #256]	@ (8004a3c <TIM_Base_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3d      	ldr	r2, [pc, #244]	@ (8004a40 <TIM_Base_SetConfig+0x118>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3c      	ldr	r2, [pc, #240]	@ (8004a44 <TIM_Base_SetConfig+0x11c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a48 <TIM_Base_SetConfig+0x120>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3a      	ldr	r2, [pc, #232]	@ (8004a4c <TIM_Base_SetConfig+0x124>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a3c <TIM_Base_SetConfig+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d027      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <TIM_Base_SetConfig+0x118>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d023      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2b      	ldr	r2, [pc, #172]	@ (8004a44 <TIM_Base_SetConfig+0x11c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01f      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a48 <TIM_Base_SetConfig+0x120>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a29      	ldr	r2, [pc, #164]	@ (8004a4c <TIM_Base_SetConfig+0x124>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d017      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a28      	ldr	r2, [pc, #160]	@ (8004a50 <TIM_Base_SetConfig+0x128>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a27      	ldr	r2, [pc, #156]	@ (8004a54 <TIM_Base_SetConfig+0x12c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a26      	ldr	r2, [pc, #152]	@ (8004a58 <TIM_Base_SetConfig+0x130>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a25      	ldr	r2, [pc, #148]	@ (8004a5c <TIM_Base_SetConfig+0x134>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a24      	ldr	r2, [pc, #144]	@ (8004a60 <TIM_Base_SetConfig+0x138>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a23      	ldr	r2, [pc, #140]	@ (8004a64 <TIM_Base_SetConfig+0x13c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <TIM_Base_SetConfig+0x114>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0xf8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a4c <TIM_Base_SetConfig+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	615a      	str	r2, [r3, #20]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800
 8004a5c:	40001800 	.word	0x40001800
 8004a60:	40001c00 	.word	0x40001c00
 8004a64:	40002000 	.word	0x40002000

08004a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e040      	b.n	8004b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fdf8 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	@ 0x24
 8004ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f82c 	bl	8004b40 <UART_SetConfig>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e022      	b.n	8004b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa84 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fb0b 	bl	800514c <UART_CheckIdleState>
 8004b36:	4603      	mov	r3, r0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4ba6      	ldr	r3, [pc, #664]	@ (8004e04 <UART_SetConfig+0x2c4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a94      	ldr	r2, [pc, #592]	@ (8004e08 <UART_SetConfig+0x2c8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d120      	bne.n	8004bfe <UART_SetConfig+0xbe>
 8004bbc:	4b93      	ldr	r3, [pc, #588]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d816      	bhi.n	8004bf8 <UART_SetConfig+0xb8>
 8004bca:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0x90>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004bed 	.word	0x08004bed
 8004bd8:	08004be7 	.word	0x08004be7
 8004bdc:	08004bf3 	.word	0x08004bf3
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e150      	b.n	8004e88 <UART_SetConfig+0x348>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e14d      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e14a      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e147      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e144      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a83      	ldr	r2, [pc, #524]	@ (8004e10 <UART_SetConfig+0x2d0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d132      	bne.n	8004c6e <UART_SetConfig+0x12e>
 8004c08:	4b80      	ldr	r3, [pc, #512]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d828      	bhi.n	8004c68 <UART_SetConfig+0x128>
 8004c16:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <UART_SetConfig+0xdc>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c69 	.word	0x08004c69
 8004c28:	08004c69 	.word	0x08004c69
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c57 	.word	0x08004c57
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c69 	.word	0x08004c69
 8004c4c:	08004c63 	.word	0x08004c63
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e118      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e115      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e112      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e10f      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e10c      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a68      	ldr	r2, [pc, #416]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d120      	bne.n	8004cba <UART_SetConfig+0x17a>
 8004c78:	4b64      	ldr	r3, [pc, #400]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c82:	2b30      	cmp	r3, #48	@ 0x30
 8004c84:	d013      	beq.n	8004cae <UART_SetConfig+0x16e>
 8004c86:	2b30      	cmp	r3, #48	@ 0x30
 8004c88:	d814      	bhi.n	8004cb4 <UART_SetConfig+0x174>
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d009      	beq.n	8004ca2 <UART_SetConfig+0x162>
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d810      	bhi.n	8004cb4 <UART_SetConfig+0x174>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <UART_SetConfig+0x15c>
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d006      	beq.n	8004ca8 <UART_SetConfig+0x168>
 8004c9a:	e00b      	b.n	8004cb4 <UART_SetConfig+0x174>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e0f2      	b.n	8004e88 <UART_SetConfig+0x348>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	e0ef      	b.n	8004e88 <UART_SetConfig+0x348>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e0ec      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e0e9      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0e6      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a56      	ldr	r2, [pc, #344]	@ (8004e18 <UART_SetConfig+0x2d8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d120      	bne.n	8004d06 <UART_SetConfig+0x1c6>
 8004cc4:	4b51      	ldr	r3, [pc, #324]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cd0:	d013      	beq.n	8004cfa <UART_SetConfig+0x1ba>
 8004cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cd4:	d814      	bhi.n	8004d00 <UART_SetConfig+0x1c0>
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d009      	beq.n	8004cee <UART_SetConfig+0x1ae>
 8004cda:	2b80      	cmp	r3, #128	@ 0x80
 8004cdc:	d810      	bhi.n	8004d00 <UART_SetConfig+0x1c0>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <UART_SetConfig+0x1a8>
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d006      	beq.n	8004cf4 <UART_SetConfig+0x1b4>
 8004ce6:	e00b      	b.n	8004d00 <UART_SetConfig+0x1c0>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e0cc      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e0c9      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e0c6      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e0c3      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d00:	2310      	movs	r3, #16
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e0c0      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a44      	ldr	r2, [pc, #272]	@ (8004e1c <UART_SetConfig+0x2dc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d125      	bne.n	8004d5c <UART_SetConfig+0x21c>
 8004d10:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d1e:	d017      	beq.n	8004d50 <UART_SetConfig+0x210>
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d24:	d817      	bhi.n	8004d56 <UART_SetConfig+0x216>
 8004d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d2a:	d00b      	beq.n	8004d44 <UART_SetConfig+0x204>
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d30:	d811      	bhi.n	8004d56 <UART_SetConfig+0x216>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <UART_SetConfig+0x1fe>
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d3a:	d006      	beq.n	8004d4a <UART_SetConfig+0x20a>
 8004d3c:	e00b      	b.n	8004d56 <UART_SetConfig+0x216>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e0a1      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d44:	2302      	movs	r3, #2
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e09e      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e09b      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d50:	2308      	movs	r3, #8
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e098      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d56:	2310      	movs	r3, #16
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e095      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <UART_SetConfig+0x2e0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d125      	bne.n	8004db2 <UART_SetConfig+0x272>
 8004d66:	4b29      	ldr	r3, [pc, #164]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d74:	d017      	beq.n	8004da6 <UART_SetConfig+0x266>
 8004d76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d7a:	d817      	bhi.n	8004dac <UART_SetConfig+0x26c>
 8004d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d80:	d00b      	beq.n	8004d9a <UART_SetConfig+0x25a>
 8004d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d86:	d811      	bhi.n	8004dac <UART_SetConfig+0x26c>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <UART_SetConfig+0x254>
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d90:	d006      	beq.n	8004da0 <UART_SetConfig+0x260>
 8004d92:	e00b      	b.n	8004dac <UART_SetConfig+0x26c>
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e076      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e073      	b.n	8004e88 <UART_SetConfig+0x348>
 8004da0:	2304      	movs	r3, #4
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e070      	b.n	8004e88 <UART_SetConfig+0x348>
 8004da6:	2308      	movs	r3, #8
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e06d      	b.n	8004e88 <UART_SetConfig+0x348>
 8004dac:	2310      	movs	r3, #16
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e06a      	b.n	8004e88 <UART_SetConfig+0x348>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <UART_SetConfig+0x2e4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d138      	bne.n	8004e2e <UART_SetConfig+0x2ee>
 8004dbc:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004dc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dca:	d017      	beq.n	8004dfc <UART_SetConfig+0x2bc>
 8004dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd0:	d82a      	bhi.n	8004e28 <UART_SetConfig+0x2e8>
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd6:	d00b      	beq.n	8004df0 <UART_SetConfig+0x2b0>
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ddc:	d824      	bhi.n	8004e28 <UART_SetConfig+0x2e8>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <UART_SetConfig+0x2aa>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de6:	d006      	beq.n	8004df6 <UART_SetConfig+0x2b6>
 8004de8:	e01e      	b.n	8004e28 <UART_SetConfig+0x2e8>
 8004dea:	2300      	movs	r3, #0
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e04b      	b.n	8004e88 <UART_SetConfig+0x348>
 8004df0:	2302      	movs	r3, #2
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e048      	b.n	8004e88 <UART_SetConfig+0x348>
 8004df6:	2304      	movs	r3, #4
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e045      	b.n	8004e88 <UART_SetConfig+0x348>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e042      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e02:	bf00      	nop
 8004e04:	efff69f3 	.word	0xefff69f3
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40004400 	.word	0x40004400
 8004e14:	40004800 	.word	0x40004800
 8004e18:	40004c00 	.word	0x40004c00
 8004e1c:	40005000 	.word	0x40005000
 8004e20:	40011400 	.word	0x40011400
 8004e24:	40007800 	.word	0x40007800
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e02c      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a72      	ldr	r2, [pc, #456]	@ (8004ffc <UART_SetConfig+0x4bc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d125      	bne.n	8004e84 <UART_SetConfig+0x344>
 8004e38:	4b71      	ldr	r3, [pc, #452]	@ (8005000 <UART_SetConfig+0x4c0>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e46:	d017      	beq.n	8004e78 <UART_SetConfig+0x338>
 8004e48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e4c:	d817      	bhi.n	8004e7e <UART_SetConfig+0x33e>
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e52:	d00b      	beq.n	8004e6c <UART_SetConfig+0x32c>
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e58:	d811      	bhi.n	8004e7e <UART_SetConfig+0x33e>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <UART_SetConfig+0x326>
 8004e5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e62:	d006      	beq.n	8004e72 <UART_SetConfig+0x332>
 8004e64:	e00b      	b.n	8004e7e <UART_SetConfig+0x33e>
 8004e66:	2300      	movs	r3, #0
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e00d      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e00a      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e72:	2304      	movs	r3, #4
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e007      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e004      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e001      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e84:	2310      	movs	r3, #16
 8004e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e90:	d15b      	bne.n	8004f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e92:	7ffb      	ldrb	r3, [r7, #31]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d828      	bhi.n	8004eea <UART_SetConfig+0x3aa>
 8004e98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <UART_SetConfig+0x360>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004eeb 	.word	0x08004eeb
 8004eb0:	08004edb 	.word	0x08004edb
 8004eb4:	08004eeb 	.word	0x08004eeb
 8004eb8:	08004eeb 	.word	0x08004eeb
 8004ebc:	08004eeb 	.word	0x08004eeb
 8004ec0:	08004ee3 	.word	0x08004ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fd ff2c 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8004ec8:	61b8      	str	r0, [r7, #24]
        break;
 8004eca:	e013      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7fd ff3c 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004ed0:	61b8      	str	r0, [r7, #24]
        break;
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8005004 <UART_SetConfig+0x4c4>)
 8004ed6:	61bb      	str	r3, [r7, #24]
        break;
 8004ed8:	e00c      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eda:	f7fd fe0f 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8004ede:	61b8      	str	r0, [r7, #24]
        break;
 8004ee0:	e008      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ee6:	61bb      	str	r3, [r7, #24]
        break;
 8004ee8:	e004      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d074      	beq.n	8004fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	005a      	lsls	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d916      	bls.n	8004f44 <UART_SetConfig+0x404>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1c:	d212      	bcs.n	8004f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f023 030f 	bic.w	r3, r3, #15
 8004f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	89fa      	ldrh	r2, [r7, #14]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e04f      	b.n	8004fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	77bb      	strb	r3, [r7, #30]
 8004f48:	e04c      	b.n	8004fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f4a:	7ffb      	ldrb	r3, [r7, #31]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d828      	bhi.n	8004fa2 <UART_SetConfig+0x462>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <UART_SetConfig+0x418>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	08004fa3 	.word	0x08004fa3
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004fa3 	.word	0x08004fa3
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fa3 	.word	0x08004fa3
 8004f78:	08004f9b 	.word	0x08004f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fd fed0 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8004f80:	61b8      	str	r0, [r7, #24]
        break;
 8004f82:	e013      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f84:	f7fd fee0 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004f88:	61b8      	str	r0, [r7, #24]
        break;
 8004f8a:	e00f      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005004 <UART_SetConfig+0x4c4>)
 8004f8e:	61bb      	str	r3, [r7, #24]
        break;
 8004f90:	e00c      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f92:	f7fd fdb3 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8004f96:	61b8      	str	r0, [r7, #24]
        break;
 8004f98:	e008      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f9e:	61bb      	str	r3, [r7, #24]
        break;
 8004fa0:	e004      	b.n	8004fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8004faa:	bf00      	nop
    }

    if (pclk != 0U)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085a      	lsrs	r2, r3, #1
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	441a      	add	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d909      	bls.n	8004fe0 <UART_SetConfig+0x4a0>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd2:	d205      	bcs.n	8004fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	e001      	b.n	8004fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40007c00 	.word	0x40007c00
 8005000:	40023800 	.word	0x40023800
 8005004:	00f42400 	.word	0x00f42400

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005106:	d10a      	bne.n	800511e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800515c:	f7fc fcac 	bl	8001ab8 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f831 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e027      	b.n	80051de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d10e      	bne.n	80051ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f81b 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e011      	b.n	80051de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b09c      	sub	sp, #112	@ 0x70
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	e0a7      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	f000 80a3 	beq.w	8005348 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fc fc59 	bl	8001ab8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <UART_WaitOnFlagUntilTimeout+0x32>
 8005212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005214:	2b00      	cmp	r3, #0
 8005216:	d13f      	bne.n	8005298 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005228:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800522c:	667b      	str	r3, [r7, #100]	@ 0x64
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005236:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005238:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800523c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e6      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	663b      	str	r3, [r7, #96]	@ 0x60
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800526a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800526c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e068      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d050      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b4:	d148      	bne.n	8005348 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80052d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e6      	bne.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	613b      	str	r3, [r7, #16]
   return(result);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005312:	623a      	str	r2, [r7, #32]
 8005314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	69f9      	ldr	r1, [r7, #28]
 8005318:	6a3a      	ldr	r2, [r7, #32]
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e5      	bne.n	80052f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e010      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	429a      	cmp	r2, r3
 8005364:	f43f af48 	beq.w	80051f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3770      	adds	r7, #112	@ 0x70
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005374:	b084      	sub	sp, #16
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	f107 001c 	add.w	r0, r7, #28
 8005382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d120      	bne.n	80053ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	4b20      	ldr	r3, [pc, #128]	@ (8005420 <USB_CoreInit+0xac>)
 800539e:	4013      	ands	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa96 	bl	80058f4 <USB_CoreReset>
 80053c8:	4603      	mov	r3, r0
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	e010      	b.n	80053f0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa8a 	bl	80058f4 <USB_CoreReset>
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10b      	bne.n	800540e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f043 0206 	orr.w	r2, r3, #6
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541a:	b004      	add	sp, #16
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	ffbdffbf 	.word	0xffbdffbf

08005424 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f023 0201 	bic.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d115      	bne.n	8005494 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005474:	2001      	movs	r0, #1
 8005476:	f7fc fb2b 	bl	8001ad0 <HAL_Delay>
      ms++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa29 	bl	80058d8 <USB_GetMode>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d01e      	beq.n	80054ca <USB_SetCurrentMode+0x84>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b31      	cmp	r3, #49	@ 0x31
 8005490:	d9f0      	bls.n	8005474 <USB_SetCurrentMode+0x2e>
 8005492:	e01a      	b.n	80054ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d115      	bne.n	80054c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7fc fb12 	bl	8001ad0 <HAL_Delay>
      ms++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa10 	bl	80058d8 <USB_GetMode>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <USB_SetCurrentMode+0x84>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b31      	cmp	r3, #49	@ 0x31
 80054c2:	d9f0      	bls.n	80054a6 <USB_SetCurrentMode+0x60>
 80054c4:	e001      	b.n	80054ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e005      	b.n	80054d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b32      	cmp	r3, #50	@ 0x32
 80054ce:	d101      	bne.n	80054d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e0:	b084      	sub	sp, #16
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e009      	b.n	8005514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3340      	adds	r3, #64	@ 0x40
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b0e      	cmp	r3, #14
 8005518:	d9f2      	bls.n	8005500 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800551a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d11c      	bne.n	800555a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e005      	b.n	8005566 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800556c:	461a      	mov	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005578:	4619      	mov	r1, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005580:	461a      	mov	r2, r3
 8005582:	680b      	ldr	r3, [r1, #0]
 8005584:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10c      	bne.n	80055a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005592:	2100      	movs	r1, #0
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f965 	bl	8005864 <USB_SetDevSpeed>
 800559a:	e008      	b.n	80055ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800559c:	2101      	movs	r1, #1
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f960 	bl	8005864 <USB_SetDevSpeed>
 80055a4:	e003      	b.n	80055ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055a6:	2103      	movs	r1, #3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f95b 	bl	8005864 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ae:	2110      	movs	r1, #16
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8f3 	bl	800579c <USB_FlushTxFifo>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f91f 	bl	8005804 <USB_FlushRxFifo>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d6:	461a      	mov	r2, r3
 80055d8:	2300      	movs	r3, #0
 80055da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	461a      	mov	r2, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ee:	461a      	mov	r2, r3
 80055f0:	2300      	movs	r3, #0
 80055f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e043      	b.n	8005682 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005610:	d118      	bne.n	8005644 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e013      	b.n	8005656 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e008      	b.n	8005656 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005650:	461a      	mov	r2, r3
 8005652:	2300      	movs	r3, #0
 8005654:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005662:	461a      	mov	r2, r3
 8005664:	2300      	movs	r3, #0
 8005666:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	461a      	mov	r2, r3
 8005676:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800567a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3301      	adds	r3, #1
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d3b7      	bcc.n	80055fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	e043      	b.n	8005718 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a6:	d118      	bne.n	80056da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e013      	b.n	80056ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e008      	b.n	80056ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e6:	461a      	mov	r2, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570a:	461a      	mov	r2, r3
 800570c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005710:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3301      	adds	r3, #1
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d3b7      	bcc.n	8005690 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800572e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005732:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005740:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f043 0210 	orr.w	r2, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <USB_DevInit+0x2b4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f043 0208 	orr.w	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <USB_DevInit+0x2b8>)
 800577e:	4313      	orrs	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005790:	b004      	add	sp, #16
 8005792:	4770      	bx	lr
 8005794:	803c3800 	.word	0x803c3800
 8005798:	40000004 	.word	0x40000004

0800579c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a13      	ldr	r2, [pc, #76]	@ (8005800 <USB_FlushTxFifo+0x64>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e01b      	b.n	80057f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	daf2      	bge.n	80057aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	019b      	lsls	r3, r3, #6
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a08      	ldr	r2, [pc, #32]	@ (8005800 <USB_FlushTxFifo+0x64>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e006      	b.n	80057f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d0f0      	beq.n	80057d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	00030d40 	.word	0x00030d40

08005804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a11      	ldr	r2, [pc, #68]	@ (8005860 <USB_FlushRxFifo+0x5c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e018      	b.n	8005854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	daf2      	bge.n	8005810 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2210      	movs	r2, #16
 8005832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <USB_FlushRxFifo+0x5c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e006      	b.n	8005854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d0f0      	beq.n	8005834 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	00030d40 	.word	0x00030d40

08005864 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058b0:	f023 0303 	bic.w	r3, r3, #3
 80058b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c4:	f043 0302 	orr.w	r3, r3, #2
 80058c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0301 	and.w	r3, r3, #1
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a13      	ldr	r2, [pc, #76]	@ (8005958 <USB_CoreReset+0x64>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e01b      	b.n	800594a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	daf2      	bge.n	8005900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a09      	ldr	r2, [pc, #36]	@ (8005958 <USB_CoreReset+0x64>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e006      	b.n	800594a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b01      	cmp	r3, #1
 8005946:	d0f0      	beq.n	800592a <USB_CoreReset+0x36>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	00030d40 	.word	0x00030d40

0800595c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005960:	bf00      	nop
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005972:	f3ef 8305 	mrs	r3, IPSR
 8005976:	60bb      	str	r3, [r7, #8]
  return(result);
 8005978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597e:	f3ef 8310 	mrs	r3, PRIMASK
 8005982:	607b      	str	r3, [r7, #4]
  return(result);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800598a:	f3ef 8311 	mrs	r3, BASEPRI
 800598e:	603b      	str	r3, [r7, #0]
  return(result);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <osKernelInitialize+0x3a>
 8005996:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <osKernelInitialize+0x64>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d103      	bne.n	80059a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800599e:	f06f 0305 	mvn.w	r3, #5
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e00c      	b.n	80059c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059a6:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <osKernelInitialize+0x64>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059ae:	4b08      	ldr	r3, [pc, #32]	@ (80059d0 <osKernelInitialize+0x64>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e002      	b.n	80059c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059c0:	68fb      	ldr	r3, [r7, #12]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000764 	.word	0x20000764

080059d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059da:	f3ef 8305 	mrs	r3, IPSR
 80059de:	60bb      	str	r3, [r7, #8]
  return(result);
 80059e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10f      	bne.n	8005a06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e6:	f3ef 8310 	mrs	r3, PRIMASK
 80059ea:	607b      	str	r3, [r7, #4]
  return(result);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f2:	f3ef 8311 	mrs	r3, BASEPRI
 80059f6:	603b      	str	r3, [r7, #0]
  return(result);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <osKernelStart+0x3a>
 80059fe:	4b0f      	ldr	r3, [pc, #60]	@ (8005a3c <osKernelStart+0x68>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d103      	bne.n	8005a0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005a06:	f06f 0305 	mvn.w	r3, #5
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e010      	b.n	8005a30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a3c <osKernelStart+0x68>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d109      	bne.n	8005a2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a16:	f7ff ffa1 	bl	800595c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a1a:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <osKernelStart+0x68>)
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a20:	f001 fe4e 	bl	80076c0 <vTaskStartScheduler>
      stat = osOK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e002      	b.n	8005a30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000764 	.word	0x20000764

08005a40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b090      	sub	sp, #64	@ 0x40
 8005a44:	af04      	add	r7, sp, #16
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a50:	f3ef 8305 	mrs	r3, IPSR
 8005a54:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a56:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 808f 	bne.w	8005b7c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a62:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6e:	617b      	str	r3, [r7, #20]
  return(result);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <osThreadNew+0x3e>
 8005a76:	4b44      	ldr	r3, [pc, #272]	@ (8005b88 <osThreadNew+0x148>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d07e      	beq.n	8005b7c <osThreadNew+0x13c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d07b      	beq.n	8005b7c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005a84:	2380      	movs	r3, #128	@ 0x80
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a88:	2318      	movs	r3, #24
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d045      	beq.n	8005b28 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <osThreadNew+0x6a>
        name = attr->name;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <osThreadNew+0x90>
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	2b38      	cmp	r3, #56	@ 0x38
 8005ac2:	d805      	bhi.n	8005ad0 <osThreadNew+0x90>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <osThreadNew+0x94>
        return (NULL);
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e054      	b.n	8005b7e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	089b      	lsrs	r3, r3, #2
 8005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <osThreadNew+0xca>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2ba7      	cmp	r3, #167	@ 0xa7
 8005af2:	d90a      	bls.n	8005b0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d006      	beq.n	8005b0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <osThreadNew+0xca>
        mem = 1;
 8005b04:	2301      	movs	r3, #1
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	e010      	b.n	8005b2c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10c      	bne.n	8005b2c <osThreadNew+0xec>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d108      	bne.n	8005b2c <osThreadNew+0xec>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <osThreadNew+0xec>
          mem = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e001      	b.n	8005b2c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d110      	bne.n	8005b54 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b3a:	9202      	str	r2, [sp, #8]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f001 fbbb 	bl	80072c4 <xTaskCreateStatic>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	e013      	b.n	8005b7c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d110      	bne.n	8005b7c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	f107 0310 	add.w	r3, r7, #16
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 fc0f 	bl	8007390 <xTaskCreate>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <osThreadNew+0x13c>
          hTask = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b7c:	693b      	ldr	r3, [r7, #16]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3730      	adds	r7, #48	@ 0x30
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000764 	.word	0x20000764

08005b8c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b94:	f3ef 8305 	mrs	r3, IPSR
 8005b98:	613b      	str	r3, [r7, #16]
  return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bac:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <osDelay+0x3c>
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005be4 <osDelay+0x58>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d103      	bne.n	8005bc8 <osDelay+0x3c>
    stat = osErrorISR;
 8005bc0:	f06f 0305 	mvn.w	r3, #5
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	e007      	b.n	8005bd8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fd3c 	bl	8007650 <vTaskDelay>
    }
  }

  return (stat);
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000764 	.word	0x20000764

08005be8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf4:	f3ef 8305 	mrs	r3, IPSR
 8005bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8085 	bne.w	8005d0c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c02:	f3ef 8310 	mrs	r3, PRIMASK
 8005c06:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d105      	bne.n	8005c1a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <osMutexNew+0x3a>
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d18 <osMutexNew+0x130>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d074      	beq.n	8005d0c <osMutexNew+0x124>
    if (attr != NULL) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	623b      	str	r3, [r7, #32]
 8005c2e:	e001      	b.n	8005c34 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <osMutexNew+0x5c>
      rmtx = 1U;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	e001      	b.n	8005c48 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d15c      	bne.n	8005d0c <osMutexNew+0x124>
      mem = -1;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
 8005c56:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d015      	beq.n	8005c8a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <osMutexNew+0x8c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c6c:	d902      	bls.n	8005c74 <osMutexNew+0x8c>
          mem = 1;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e00c      	b.n	8005c8e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <osMutexNew+0xa6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <osMutexNew+0xa6>
            mem = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e001      	b.n	8005c8e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d112      	bne.n	8005cba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	2004      	movs	r0, #4
 8005ca2:	f000 fcc8 	bl	8006636 <xQueueCreateMutexStatic>
 8005ca6:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ca8:	e016      	b.n	8005cd8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f000 fcc0 	bl	8006636 <xQueueCreateMutexStatic>
 8005cb6:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cb8:	e00e      	b.n	8005cd8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005cc6:	2004      	movs	r0, #4
 8005cc8:	f000 fc9d 	bl	8006606 <xQueueCreateMutex>
 8005ccc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cce:	e003      	b.n	8005cd8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	f000 fc98 	bl	8006606 <xQueueCreateMutex>
 8005cd6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <osMutexNew+0x110>
        if (attr != NULL) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <osMutexNew+0x104>
          name = attr->name;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e001      	b.n	8005cf0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005cf0:	6979      	ldr	r1, [r7, #20]
 8005cf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cf4:	f001 fa88 	bl	8007208 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d006      	beq.n	8005d0c <osMutexNew+0x124>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	@ 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000764 	.word	0x20000764

08005d1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3a:	f3ef 8305 	mrs	r3, IPSR
 8005d3e:	613b      	str	r3, [r7, #16]
  return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d46:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <osMutexAcquire+0x52>
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd4 <osMutexAcquire+0xb8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d103      	bne.n	8005d6e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005d66:	f06f 0305 	mvn.w	r3, #5
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	e02c      	b.n	8005dc8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d103      	bne.n	8005d7c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005d74:	f06f 0303 	mvn.w	r3, #3
 8005d78:	61fb      	str	r3, [r7, #28]
 8005d7a:	e025      	b.n	8005dc8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d011      	beq.n	8005da6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	69b8      	ldr	r0, [r7, #24]
 8005d86:	f000 fca8 	bl	80066da <xQueueTakeMutexRecursive>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d01b      	beq.n	8005dc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005d96:	f06f 0301 	mvn.w	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e014      	b.n	8005dc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005d9e:	f06f 0302 	mvn.w	r3, #2
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e010      	b.n	8005dc8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	69b8      	ldr	r0, [r7, #24]
 8005daa:	f000 ff65 	bl	8006c78 <xQueueSemaphoreTake>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d009      	beq.n	8005dc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005dba:	f06f 0301 	mvn.w	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	e002      	b.n	8005dc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005dc2:	f06f 0302 	mvn.w	r3, #2
 8005dc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005dc8:	69fb      	ldr	r3, [r7, #28]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000764 	.word	0x20000764

08005dd8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df4:	f3ef 8305 	mrs	r3, IPSR
 8005df8:	613b      	str	r3, [r7, #16]
  return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10f      	bne.n	8005e20 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e00:	f3ef 8310 	mrs	r3, PRIMASK
 8005e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e10:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <osMutexRelease+0x50>
 8005e18:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <osMutexRelease+0x9c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d103      	bne.n	8005e28 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005e20:	f06f 0305 	mvn.w	r3, #5
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	e01f      	b.n	8005e68 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005e2e:	f06f 0303 	mvn.w	r3, #3
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e018      	b.n	8005e68 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d009      	beq.n	8005e50 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005e3c:	69b8      	ldr	r0, [r7, #24]
 8005e3e:	f000 fc15 	bl	800666c <xQueueGiveMutexRecursive>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d00f      	beq.n	8005e68 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005e48:	f06f 0302 	mvn.w	r3, #2
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	e00b      	b.n	8005e68 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005e50:	2300      	movs	r3, #0
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	69b8      	ldr	r0, [r7, #24]
 8005e58:	f000 fc78 	bl	800674c <xQueueGenericSend>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d002      	beq.n	8005e68 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005e62:	f06f 0302 	mvn.w	r3, #2
 8005e66:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005e68:	69fb      	ldr	r3, [r7, #28]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000764 	.word	0x20000764

08005e78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	@ 0x30
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e88:	f3ef 8305 	mrs	r3, IPSR
 8005e8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e8e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d16f      	bne.n	8005f74 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e94:	f3ef 8310 	mrs	r3, PRIMASK
 8005e98:	617b      	str	r3, [r7, #20]
  return(result);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <osMessageQueueNew+0x3c>
 8005eac:	4b34      	ldr	r3, [pc, #208]	@ (8005f80 <osMessageQueueNew+0x108>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d05f      	beq.n	8005f74 <osMessageQueueNew+0xfc>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d05c      	beq.n	8005f74 <osMessageQueueNew+0xfc>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d059      	beq.n	8005f74 <osMessageQueueNew+0xfc>
    mem = -1;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d029      	beq.n	8005f20 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d012      	beq.n	8005efa <osMessageQueueNew+0x82>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b4f      	cmp	r3, #79	@ 0x4f
 8005eda:	d90e      	bls.n	8005efa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695a      	ldr	r2, [r3, #20]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <osMessageQueueNew+0x82>
        mem = 1;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	e014      	b.n	8005f24 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d110      	bne.n	8005f24 <osMessageQueueNew+0xac>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10c      	bne.n	8005f24 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d108      	bne.n	8005f24 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <osMessageQueueNew+0xac>
          mem = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	623b      	str	r3, [r7, #32]
 8005f1e:	e001      	b.n	8005f24 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d10b      	bne.n	8005f42 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2100      	movs	r1, #0
 8005f34:	9100      	str	r1, [sp, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fa5d 	bl	80063f8 <xQueueGenericCreateStatic>
 8005f3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f40:	e008      	b.n	8005f54 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fada 	bl	8006506 <xQueueGenericCreate>
 8005f52:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e001      	b.n	8005f6c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f6c:	69f9      	ldr	r1, [r7, #28]
 8005f6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f70:	f001 f94a 	bl	8007208 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3728      	adds	r7, #40	@ 0x28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000764 	.word	0x20000764

08005f84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	@ 0x28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9c:	f3ef 8305 	mrs	r3, IPSR
 8005fa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fa2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fac:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02c      	beq.n	800601a <osMessageQueuePut+0x96>
 8005fc0:	4b28      	ldr	r3, [pc, #160]	@ (8006064 <osMessageQueuePut+0xe0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d128      	bne.n	800601a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <osMessageQueuePut+0x56>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <osMessageQueuePut+0x56>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005fda:	f06f 0303 	mvn.w	r3, #3
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fe0:	e039      	b.n	8006056 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fe6:	f107 0210 	add.w	r2, r7, #16
 8005fea:	2300      	movs	r3, #0
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	6a38      	ldr	r0, [r7, #32]
 8005ff0:	f000 fcb6 	bl	8006960 <xQueueGenericSendFromISR>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d003      	beq.n	8006002 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005ffa:	f06f 0302 	mvn.w	r3, #2
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006000:	e029      	b.n	8006056 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d026      	beq.n	8006056 <osMessageQueuePut+0xd2>
 8006008:	4b17      	ldr	r3, [pc, #92]	@ (8006068 <osMessageQueuePut+0xe4>)
 800600a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006018:	e01d      	b.n	8006056 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <osMessageQueuePut+0xa2>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006026:	f06f 0303 	mvn.w	r3, #3
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	e014      	b.n	8006058 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800602e:	2300      	movs	r3, #0
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	6a38      	ldr	r0, [r7, #32]
 8006036:	f000 fb89 	bl	800674c <xQueueGenericSend>
 800603a:	4603      	mov	r3, r0
 800603c:	2b01      	cmp	r3, #1
 800603e:	d00b      	beq.n	8006058 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006046:	f06f 0301 	mvn.w	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
 800604c:	e004      	b.n	8006058 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800604e:	f06f 0302 	mvn.w	r3, #2
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	e000      	b.n	8006058 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006056:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800605a:	4618      	mov	r0, r3
 800605c:	3728      	adds	r7, #40	@ 0x28
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000764 	.word	0x20000764
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	@ 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800607e:	2300      	movs	r3, #0
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006082:	f3ef 8305 	mrs	r3, IPSR
 8006086:	61fb      	str	r3, [r7, #28]
  return(result);
 8006088:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608e:	f3ef 8310 	mrs	r3, PRIMASK
 8006092:	61bb      	str	r3, [r7, #24]
  return(result);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800609a:	f3ef 8311 	mrs	r3, BASEPRI
 800609e:	617b      	str	r3, [r7, #20]
  return(result);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d02c      	beq.n	8006100 <osMessageQueueGet+0x94>
 80060a6:	4b28      	ldr	r3, [pc, #160]	@ (8006148 <osMessageQueueGet+0xdc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d128      	bne.n	8006100 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <osMessageQueueGet+0x54>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <osMessageQueueGet+0x54>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80060c0:	f06f 0303 	mvn.w	r3, #3
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060c6:	e038      	b.n	800613a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80060cc:	f107 0310 	add.w	r3, r7, #16
 80060d0:	461a      	mov	r2, r3
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	6a38      	ldr	r0, [r7, #32]
 80060d6:	f000 fee7 	bl	8006ea8 <xQueueReceiveFromISR>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d003      	beq.n	80060e8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060e0:	f06f 0302 	mvn.w	r3, #2
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060e6:	e028      	b.n	800613a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d025      	beq.n	800613a <osMessageQueueGet+0xce>
 80060ee:	4b17      	ldr	r3, [pc, #92]	@ (800614c <osMessageQueueGet+0xe0>)
 80060f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060fe:	e01c      	b.n	800613a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <osMessageQueueGet+0xa0>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800610c:	f06f 0303 	mvn.w	r3, #3
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
 8006112:	e013      	b.n	800613c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	6a38      	ldr	r0, [r7, #32]
 800611a:	f000 fcc5 	bl	8006aa8 <xQueueReceive>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d00b      	beq.n	800613c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800612a:	f06f 0301 	mvn.w	r3, #1
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006130:	e004      	b.n	800613c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006132:	f06f 0302 	mvn.w	r3, #2
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
 8006138:	e000      	b.n	800613c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800613a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800613e:	4618      	mov	r0, r3
 8006140:	3728      	adds	r7, #40	@ 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000764 	.word	0x20000764
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a07      	ldr	r2, [pc, #28]	@ (800617c <vApplicationGetIdleTaskMemory+0x2c>)
 8006160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4a06      	ldr	r2, [pc, #24]	@ (8006180 <vApplicationGetIdleTaskMemory+0x30>)
 8006166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2280      	movs	r2, #128	@ 0x80
 800616c:	601a      	str	r2, [r3, #0]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000768 	.word	0x20000768
 8006180:	20000810 	.word	0x20000810

08006184 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a07      	ldr	r2, [pc, #28]	@ (80061b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006194:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4a06      	ldr	r2, [pc, #24]	@ (80061b4 <vApplicationGetTimerTaskMemory+0x30>)
 800619a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20000a10 	.word	0x20000a10
 80061b4:	20000ab8 	.word	0x20000ab8

080061b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f103 0208 	add.w	r2, r3, #8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f04f 32ff 	mov.w	r2, #4294967295
 80061d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f103 0208 	add.w	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f103 0208 	add.w	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d103      	bne.n	800627a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e00c      	b.n	8006294 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3308      	adds	r3, #8
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e002      	b.n	8006288 <vListInsert+0x2e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d2f6      	bcs.n	8006282 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	601a      	str	r2, [r3, #0]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6892      	ldr	r2, [r2, #8]
 80062e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6852      	ldr	r2, [r2, #4]
 80062ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d103      	bne.n	8006300 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	1e5a      	subs	r2, r3, #1
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10d      	bne.n	8006350 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006338:	b672      	cpsid	i
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	b662      	cpsie	i
 8006348:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006350:	f002 fca4 	bl	8008c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	441a      	add	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	3b01      	subs	r3, #1
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	441a      	add	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	22ff      	movs	r2, #255	@ 0xff
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	22ff      	movs	r2, #255	@ 0xff
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d114      	bne.n	80063d0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01a      	beq.n	80063e4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3310      	adds	r3, #16
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fc30 	bl	8007c18 <xTaskRemoveFromEventList>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d012      	beq.n	80063e4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063be:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <xQueueGenericReset+0xd4>)
 80063c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	e009      	b.n	80063e4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3310      	adds	r3, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff feef 	bl	80061b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3324      	adds	r3, #36	@ 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff feea 	bl	80061b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063e4:	f002 fc90 	bl	8008d08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063e8:	2301      	movs	r3, #1
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	@ 0x38
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10d      	bne.n	8006428 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	b672      	cpsid	i
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	b662      	cpsie	i
 8006420:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	b672      	cpsid	i
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	b662      	cpsie	i
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <xQueueGenericCreateStatic+0x5e>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <xQueueGenericCreateStatic+0x62>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <xQueueGenericCreateStatic+0x64>
 800645a:	2300      	movs	r3, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	623b      	str	r3, [r7, #32]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <xQueueGenericCreateStatic+0x90>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <xQueueGenericCreateStatic+0x94>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <xQueueGenericCreateStatic+0x96>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	b672      	cpsid	i
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	b662      	cpsie	i
 80064a6:	61fb      	str	r3, [r7, #28]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064ae:	2350      	movs	r3, #80	@ 0x50
 80064b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b50      	cmp	r3, #80	@ 0x50
 80064b6:	d00d      	beq.n	80064d4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	b672      	cpsid	i
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	b662      	cpsie	i
 80064cc:	61bb      	str	r3, [r7, #24]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80064da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80064ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f848 	bl	800658c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80064fe:	4618      	mov	r0, r3
 8006500:	3730      	adds	r7, #48	@ 0x30
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006506:	b580      	push	{r7, lr}
 8006508:	b08a      	sub	sp, #40	@ 0x28
 800650a:	af02      	add	r7, sp, #8
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	4613      	mov	r3, r2
 8006512:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <xQueueGenericCreate+0x30>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	b672      	cpsid	i
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	b662      	cpsie	i
 800652e:	613b      	str	r3, [r7, #16]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	e004      	b.n	800654c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3350      	adds	r3, #80	@ 0x50
 8006550:	4618      	mov	r0, r3
 8006552:	f002 fcd1 	bl	8008ef8 <pvPortMalloc>
 8006556:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	3350      	adds	r3, #80	@ 0x50
 8006566:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006570:	79fa      	ldrb	r2, [r7, #7]
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f805 	bl	800658c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006582:	69bb      	ldr	r3, [r7, #24]
	}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e002      	b.n	80065ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065ba:	2101      	movs	r1, #1
 80065bc:	69b8      	ldr	r0, [r7, #24]
 80065be:	f7ff feaf 	bl	8006320 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	78fa      	ldrb	r2, [r7, #3]
 80065c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00e      	beq.n	80065fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065f2:	2300      	movs	r3, #0
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f8a7 	bl	800674c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af00      	add	r7, sp, #0
 800660c:	4603      	mov	r3, r0
 800660e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006610:	2301      	movs	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	461a      	mov	r2, r3
 800661c:	6939      	ldr	r1, [r7, #16]
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7ff ff71 	bl	8006506 <xQueueGenericCreate>
 8006624:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff ffd3 	bl	80065d2 <prvInitialiseMutex>

		return xNewQueue;
 800662c:	68fb      	ldr	r3, [r7, #12]
	}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006636:	b580      	push	{r7, lr}
 8006638:	b088      	sub	sp, #32
 800663a:	af02      	add	r7, sp, #8
 800663c:	4603      	mov	r3, r0
 800663e:	6039      	str	r1, [r7, #0]
 8006640:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2200      	movs	r2, #0
 8006652:	6939      	ldr	r1, [r7, #16]
 8006654:	6978      	ldr	r0, [r7, #20]
 8006656:	f7ff fecf 	bl	80063f8 <xQueueGenericCreateStatic>
 800665a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff ffb8 	bl	80065d2 <prvInitialiseMutex>

		return xNewQueue;
 8006662:	68fb      	ldr	r3, [r7, #12]
	}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800666c:	b590      	push	{r4, r7, lr}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10d      	bne.n	800669a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	b672      	cpsid	i
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	b662      	cpsie	i
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	689c      	ldr	r4, [r3, #8]
 800669e:	f001 fc89 	bl	8007fb4 <xTaskGetCurrentTaskHandle>
 80066a2:	4603      	mov	r3, r0
 80066a4:	429c      	cmp	r4, r3
 80066a6:	d111      	bne.n	80066cc <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	6938      	ldr	r0, [r7, #16]
 80066c2:	f000 f843 	bl	800674c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e001      	b.n	80066d0 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80066d0:	697b      	ldr	r3, [r7, #20]
	}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd90      	pop	{r4, r7, pc}

080066da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80066da:	b590      	push	{r4, r7, lr}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10d      	bne.n	800670a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	b672      	cpsid	i
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	b662      	cpsie	i
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	689c      	ldr	r4, [r3, #8]
 800670e:	f001 fc51 	bl	8007fb4 <xTaskGetCurrentTaskHandle>
 8006712:	4603      	mov	r3, r0
 8006714:	429c      	cmp	r4, r3
 8006716:	d107      	bne.n	8006728 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006722:	2301      	movs	r3, #1
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e00c      	b.n	8006742 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6938      	ldr	r0, [r7, #16]
 800672c:	f000 faa4 	bl	8006c78 <xQueueSemaphoreTake>
 8006730:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006742:	697b      	ldr	r3, [r7, #20]
	}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	bd90      	pop	{r4, r7, pc}

0800674c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08e      	sub	sp, #56	@ 0x38
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10d      	bne.n	8006784 <xQueueGenericSend+0x38>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	b672      	cpsid	i
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	b662      	cpsie	i
 800677c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	e7fd      	b.n	8006780 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <xQueueGenericSend+0x46>
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <xQueueGenericSend+0x4a>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <xQueueGenericSend+0x4c>
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10d      	bne.n	80067b8 <xQueueGenericSend+0x6c>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	b672      	cpsid	i
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	b662      	cpsie	i
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d103      	bne.n	80067c6 <xQueueGenericSend+0x7a>
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <xQueueGenericSend+0x7e>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <xQueueGenericSend+0x80>
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <xQueueGenericSend+0xa0>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	b672      	cpsid	i
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	b662      	cpsie	i
 80067e4:	623b      	str	r3, [r7, #32]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ec:	f001 fbf2 	bl	8007fd4 <xTaskGetSchedulerState>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <xQueueGenericSend+0xb0>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <xQueueGenericSend+0xb4>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <xQueueGenericSend+0xb6>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10d      	bne.n	8006822 <xQueueGenericSend+0xd6>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	b672      	cpsid	i
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	b662      	cpsie	i
 800681a:	61fb      	str	r3, [r7, #28]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006822:	f002 fa3b 	bl	8008c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <xQueueGenericSend+0xec>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d129      	bne.n	800688c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800683e:	f000 fbd3 	bl	8006fe8 <prvCopyDataToQueue>
 8006842:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	3324      	adds	r3, #36	@ 0x24
 8006850:	4618      	mov	r0, r3
 8006852:	f001 f9e1 	bl	8007c18 <xTaskRemoveFromEventList>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d013      	beq.n	8006884 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800685c:	4b3f      	ldr	r3, [pc, #252]	@ (800695c <xQueueGenericSend+0x210>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	e00a      	b.n	8006884 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800686e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006874:	4b39      	ldr	r3, [pc, #228]	@ (800695c <xQueueGenericSend+0x210>)
 8006876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006884:	f002 fa40 	bl	8008d08 <vPortExitCritical>
				return pdPASS;
 8006888:	2301      	movs	r3, #1
 800688a:	e063      	b.n	8006954 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006892:	f002 fa39 	bl	8008d08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006896:	2300      	movs	r3, #0
 8006898:	e05c      	b.n	8006954 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800689a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a0:	f107 0314 	add.w	r3, r7, #20
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fa1d 	bl	8007ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068aa:	2301      	movs	r3, #1
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068ae:	f002 fa2b 	bl	8008d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068b2:	f000 ff79 	bl	80077a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068b6:	f002 f9f1 	bl	8008c9c <vPortEnterCritical>
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d103      	bne.n	80068d0 <xQueueGenericSend+0x184>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d103      	bne.n	80068e6 <xQueueGenericSend+0x19a>
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068e6:	f002 fa0f 	bl	8008d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ea:	1d3a      	adds	r2, r7, #4
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 fa0c 	bl	8007d10 <xTaskCheckForTimeOut>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d124      	bne.n	8006948 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006900:	f000 fc6a 	bl	80071d8 <prvIsQueueFull>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	3310      	adds	r3, #16
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f92a 	bl	8007b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800691a:	f000 fbf5 	bl	8007108 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800691e:	f000 ff51 	bl	80077c4 <xTaskResumeAll>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	f47f af7c 	bne.w	8006822 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800692a:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <xQueueGenericSend+0x210>)
 800692c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	e772      	b.n	8006822 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800693c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800693e:	f000 fbe3 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006942:	f000 ff3f 	bl	80077c4 <xTaskResumeAll>
 8006946:	e76c      	b.n	8006822 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006948:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800694a:	f000 fbdd 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800694e:	f000 ff39 	bl	80077c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006952:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006954:	4618      	mov	r0, r3
 8006956:	3738      	adds	r7, #56	@ 0x38
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	@ 0x38
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	b672      	cpsid	i
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	b662      	cpsie	i
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <xQueueGenericSendFromISR+0x42>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xQueueGenericSendFromISR+0x46>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <xQueueGenericSendFromISR+0x48>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10d      	bne.n	80069c8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	623b      	str	r3, [r7, #32]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d103      	bne.n	80069d6 <xQueueGenericSendFromISR+0x76>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <xQueueGenericSendFromISR+0x7a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <xQueueGenericSendFromISR+0x7c>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10d      	bne.n	80069fc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	61fb      	str	r3, [r7, #28]
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069fc:	f002 fa36 	bl	8008e6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a00:	f3ef 8211 	mrs	r2, BASEPRI
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	b672      	cpsid	i
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	b662      	cpsie	i
 8006a18:	61ba      	str	r2, [r7, #24]
 8006a1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <xQueueGenericSendFromISR+0xd2>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d12c      	bne.n	8006a8c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a42:	f000 fad1 	bl	8006fe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a46:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d112      	bne.n	8006a76 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d016      	beq.n	8006a86 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	3324      	adds	r3, #36	@ 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f8db 	bl	8007c18 <xTaskRemoveFromEventList>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a86:	2301      	movs	r3, #1
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006a8a:	e001      	b.n	8006a90 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3738      	adds	r7, #56	@ 0x38
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	@ 0x30
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10d      	bne.n	8006ade <xQueueReceive+0x36>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	623b      	str	r3, [r7, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <xQueueReceive+0x44>
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <xQueueReceive+0x48>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <xQueueReceive+0x4a>
 8006af0:	2300      	movs	r3, #0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10d      	bne.n	8006b12 <xQueueReceive+0x6a>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	b672      	cpsid	i
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	b662      	cpsie	i
 8006b0a:	61fb      	str	r3, [r7, #28]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b12:	f001 fa5f 	bl	8007fd4 <xTaskGetSchedulerState>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <xQueueReceive+0x7a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <xQueueReceive+0x7e>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <xQueueReceive+0x80>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10d      	bne.n	8006b48 <xQueueReceive+0xa0>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b30:	b672      	cpsid	i
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	b662      	cpsie	i
 8006b40:	61bb      	str	r3, [r7, #24]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b48:	f002 f8a8 	bl	8008c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01f      	beq.n	8006b98 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b5c:	f000 faae 	bl	80070bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	1e5a      	subs	r2, r3, #1
 8006b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00f      	beq.n	8006b90 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	3310      	adds	r3, #16
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 f84f 	bl	8007c18 <xTaskRemoveFromEventList>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b80:	4b3c      	ldr	r3, [pc, #240]	@ (8006c74 <xQueueReceive+0x1cc>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b90:	f002 f8ba 	bl	8008d08 <vPortExitCritical>
				return pdPASS;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e069      	b.n	8006c6c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b9e:	f002 f8b3 	bl	8008d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e062      	b.n	8006c6c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 f897 	bl	8007ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bba:	f002 f8a5 	bl	8008d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bbe:	f000 fdf3 	bl	80077a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc2:	f002 f86b 	bl	8008c9c <vPortEnterCritical>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d103      	bne.n	8006bdc <xQueueReceive+0x134>
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be2:	b25b      	sxtb	r3, r3
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d103      	bne.n	8006bf2 <xQueueReceive+0x14a>
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bf2:	f002 f889 	bl	8008d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bf6:	1d3a      	adds	r2, r7, #4
 8006bf8:	f107 0310 	add.w	r3, r7, #16
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 f886 	bl	8007d10 <xTaskCheckForTimeOut>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d123      	bne.n	8006c52 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c0c:	f000 face 	bl	80071ac <prvIsQueueEmpty>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d017      	beq.n	8006c46 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c18:	3324      	adds	r3, #36	@ 0x24
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 ffa4 	bl	8007b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c26:	f000 fa6f 	bl	8007108 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c2a:	f000 fdcb 	bl	80077c4 <xTaskResumeAll>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d189      	bne.n	8006b48 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006c34:	4b0f      	ldr	r3, [pc, #60]	@ (8006c74 <xQueueReceive+0x1cc>)
 8006c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	e780      	b.n	8006b48 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c48:	f000 fa5e 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c4c:	f000 fdba 	bl	80077c4 <xTaskResumeAll>
 8006c50:	e77a      	b.n	8006b48 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c54:	f000 fa58 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c58:	f000 fdb4 	bl	80077c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c5e:	f000 faa5 	bl	80071ac <prvIsQueueEmpty>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f43f af6f 	beq.w	8006b48 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3730      	adds	r7, #48	@ 0x30
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08e      	sub	sp, #56	@ 0x38
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10d      	bne.n	8006cb0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	b672      	cpsid	i
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	b662      	cpsie	i
 8006ca8:	623b      	str	r3, [r7, #32]
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbc:	b672      	cpsid	i
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	b662      	cpsie	i
 8006ccc:	61fb      	str	r3, [r7, #28]
}
 8006cce:	bf00      	nop
 8006cd0:	bf00      	nop
 8006cd2:	e7fd      	b.n	8006cd0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cd4:	f001 f97e 	bl	8007fd4 <xTaskGetSchedulerState>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <xQueueSemaphoreTake+0x6c>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <xQueueSemaphoreTake+0x70>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <xQueueSemaphoreTake+0x72>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	b672      	cpsid	i
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	b662      	cpsie	i
 8006d02:	61bb      	str	r3, [r7, #24]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0a:	f001 ffc7 	bl	8008c9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d024      	beq.n	8006d64 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	1e5a      	subs	r2, r3, #1
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d2a:	f001 fad5 	bl	80082d8 <pvTaskIncrementMutexHeldCount>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00f      	beq.n	8006d5c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	3310      	adds	r3, #16
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 ff69 	bl	8007c18 <xTaskRemoveFromEventList>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d4c:	4b55      	ldr	r3, [pc, #340]	@ (8006ea4 <xQueueSemaphoreTake+0x22c>)
 8006d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d5c:	f001 ffd4 	bl	8008d08 <vPortExitCritical>
				return pdPASS;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e09a      	b.n	8006e9a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d114      	bne.n	8006d94 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	617b      	str	r3, [r7, #20]
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d8c:	f001 ffbc 	bl	8008d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e082      	b.n	8006e9a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d9a:	f107 030c 	add.w	r3, r7, #12
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 ffa0 	bl	8007ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006da8:	f001 ffae 	bl	8008d08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dac:	f000 fcfc 	bl	80077a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006db0:	f001 ff74 	bl	8008c9c <vPortEnterCritical>
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dba:	b25b      	sxtb	r3, r3
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d103      	bne.n	8006dca <xQueueSemaphoreTake+0x152>
 8006dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dd0:	b25b      	sxtb	r3, r3
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d103      	bne.n	8006de0 <xQueueSemaphoreTake+0x168>
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006de0:	f001 ff92 	bl	8008d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006de4:	463a      	mov	r2, r7
 8006de6:	f107 030c 	add.w	r3, r7, #12
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 ff8f 	bl	8007d10 <xTaskCheckForTimeOut>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d132      	bne.n	8006e5e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006df8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006dfa:	f000 f9d7 	bl	80071ac <prvIsQueueEmpty>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d026      	beq.n	8006e52 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006e0c:	f001 ff46 	bl	8008c9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f001 f8fb 	bl	8008010 <xTaskPriorityInherit>
 8006e1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006e1c:	f001 ff74 	bl	8008d08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	3324      	adds	r3, #36	@ 0x24
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fe9f 	bl	8007b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e30:	f000 f96a 	bl	8007108 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e34:	f000 fcc6 	bl	80077c4 <xTaskResumeAll>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f47f af65 	bne.w	8006d0a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006e40:	4b18      	ldr	r3, [pc, #96]	@ (8006ea4 <xQueueSemaphoreTake+0x22c>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	e75b      	b.n	8006d0a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e54:	f000 f958 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e58:	f000 fcb4 	bl	80077c4 <xTaskResumeAll>
 8006e5c:	e755      	b.n	8006d0a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e60:	f000 f952 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e64:	f000 fcae 	bl	80077c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e6a:	f000 f99f 	bl	80071ac <prvIsQueueEmpty>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f43f af4a 	beq.w	8006d0a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006e7c:	f001 ff0e 	bl	8008c9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e82:	f000 f899 	bl	8006fb8 <prvGetDisinheritPriorityAfterTimeout>
 8006e86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 f99a 	bl	80081c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e94:	f001 ff38 	bl	8008d08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3738      	adds	r7, #56	@ 0x38
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08e      	sub	sp, #56	@ 0x38
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10d      	bne.n	8006eda <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	b672      	cpsid	i
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	b662      	cpsie	i
 8006ed2:	623b      	str	r3, [r7, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d103      	bne.n	8006ee8 <xQueueReceiveFromISR+0x40>
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueReceiveFromISR+0x44>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueReceiveFromISR+0x46>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	61fb      	str	r3, [r7, #28]
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f0e:	f001 ffad 	bl	8008e6c <vPortValidateInterruptPriority>
	__asm volatile
 8006f12:	f3ef 8211 	mrs	r2, BASEPRI
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	b672      	cpsid	i
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	b662      	cpsie	i
 8006f2a:	61ba      	str	r2, [r7, #24]
 8006f2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d02f      	beq.n	8006f9e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f4c:	f000 f8b6 	bl	80070bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	1e5a      	subs	r2, r3, #1
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d112      	bne.n	8006f88 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d016      	beq.n	8006f98 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	3310      	adds	r3, #16
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fe52 	bl	8007c18 <xTaskRemoveFromEventList>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e007      	b.n	8006f98 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	b25a      	sxtb	r2, r3
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	e001      	b.n	8006fa2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f383 8811 	msr	BASEPRI, r3
}
 8006fac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3738      	adds	r7, #56	@ 0x38
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d006      	beq.n	8006fd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e001      	b.n	8006fda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006fda:	68fb      	ldr	r3, [r7, #12]
	}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d14d      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f864 	bl	80080e0 <xTaskPriorityDisinherit>
 8007018:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	e043      	b.n	80070aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6858      	ldr	r0, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007030:	461a      	mov	r2, r3
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	f002 f9ce 	bl	80093d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d32b      	bcc.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	e026      	b.n	80070aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68d8      	ldr	r0, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	461a      	mov	r2, r3
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	f002 f9b4 	bl	80093d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007074:	425b      	negs	r3, r3
 8007076:	441a      	add	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d207      	bcs.n	8007098 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	425b      	negs	r3, r3
 8007092:	441a      	add	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d105      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070b2:	697b      	ldr	r3, [r7, #20]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d303      	bcc.n	80070f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68d9      	ldr	r1, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	461a      	mov	r2, r3
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f002 f96a 	bl	80093d4 <memcpy>
	}
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007110:	f001 fdc4 	bl	8008c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800711a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800711c:	e011      	b.n	8007142 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d012      	beq.n	800714c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	@ 0x24
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fd74 	bl	8007c18 <xTaskRemoveFromEventList>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007136:	f000 fe53 	bl	8007de0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dce9      	bgt.n	800711e <prvUnlockQueue+0x16>
 800714a:	e000      	b.n	800714e <prvUnlockQueue+0x46>
					break;
 800714c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	22ff      	movs	r2, #255	@ 0xff
 8007152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007156:	f001 fdd7 	bl	8008d08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800715a:	f001 fd9f 	bl	8008c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007164:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007166:	e011      	b.n	800718c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3310      	adds	r3, #16
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fd4f 	bl	8007c18 <xTaskRemoveFromEventList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007180:	f000 fe2e 	bl	8007de0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	3b01      	subs	r3, #1
 8007188:	b2db      	uxtb	r3, r3
 800718a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800718c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007190:	2b00      	cmp	r3, #0
 8007192:	dce9      	bgt.n	8007168 <prvUnlockQueue+0x60>
 8007194:	e000      	b.n	8007198 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007196:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	22ff      	movs	r2, #255	@ 0xff
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 fdb2 	bl	8008d08 <vPortExitCritical>
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 fd72 	bl	8008c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e001      	b.n	80071ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ca:	f001 fd9d 	bl	8008d08 <vPortExitCritical>

	return xReturn;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071e0:	f001 fd5c 	bl	8008c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d102      	bne.n	80071f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e001      	b.n	80071fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071fa:	f001 fd85 	bl	8008d08 <vPortExitCritical>

	return xReturn;
 80071fe:	68fb      	ldr	r3, [r7, #12]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e014      	b.n	8007242 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007218:	4a0f      	ldr	r2, [pc, #60]	@ (8007258 <vQueueAddToRegistry+0x50>)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007224:	490c      	ldr	r1, [pc, #48]	@ (8007258 <vQueueAddToRegistry+0x50>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800722e:	4a0a      	ldr	r2, [pc, #40]	@ (8007258 <vQueueAddToRegistry+0x50>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800723a:	e006      	b.n	800724a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b07      	cmp	r3, #7
 8007246:	d9e7      	bls.n	8007218 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000eb8 	.word	0x20000eb8

0800725c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800726c:	f001 fd16 	bl	8008c9c <vPortEnterCritical>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007276:	b25b      	sxtb	r3, r3
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d103      	bne.n	8007286 <vQueueWaitForMessageRestricted+0x2a>
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800728c:	b25b      	sxtb	r3, r3
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d103      	bne.n	800729c <vQueueWaitForMessageRestricted+0x40>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800729c:	f001 fd34 	bl	8008d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3324      	adds	r3, #36	@ 0x24
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fc83 	bl	8007bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	f7ff ff26 	bl	8007108 <prvUnlockQueue>
	}
 80072bc:	bf00      	nop
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08e      	sub	sp, #56	@ 0x38
 80072c8:	af04      	add	r7, sp, #16
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10d      	bne.n	80072f4 <xTaskCreateStatic+0x30>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072dc:	b672      	cpsid	i
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	b662      	cpsie	i
 80072ec:	623b      	str	r3, [r7, #32]
}
 80072ee:	bf00      	nop
 80072f0:	bf00      	nop
 80072f2:	e7fd      	b.n	80072f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10d      	bne.n	8007316 <xTaskCreateStatic+0x52>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fe:	b672      	cpsid	i
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	b662      	cpsie	i
 800730e:	61fb      	str	r3, [r7, #28]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007316:	23a8      	movs	r3, #168	@ 0xa8
 8007318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2ba8      	cmp	r3, #168	@ 0xa8
 800731e:	d00d      	beq.n	800733c <xTaskCreateStatic+0x78>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	b672      	cpsid	i
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	b662      	cpsie	i
 8007334:	61bb      	str	r3, [r7, #24]
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	e7fd      	b.n	8007338 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800733c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01e      	beq.n	8007382 <xTaskCreateStatic+0xbe>
 8007344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01b      	beq.n	8007382 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	2202      	movs	r2, #2
 8007358:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800735c:	2300      	movs	r3, #0
 800735e:	9303      	str	r3, [sp, #12]
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	9302      	str	r3, [sp, #8]
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f851 	bl	800741c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800737a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800737c:	f000 f8f8 	bl	8007570 <prvAddNewTaskToReadyList>
 8007380:	e001      	b.n	8007386 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007386:	697b      	ldr	r3, [r7, #20]
	}
 8007388:	4618      	mov	r0, r3
 800738a:	3728      	adds	r7, #40	@ 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08c      	sub	sp, #48	@ 0x30
 8007394:	af04      	add	r7, sp, #16
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073a0:	88fb      	ldrh	r3, [r7, #6]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fda7 	bl	8008ef8 <pvPortMalloc>
 80073aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00e      	beq.n	80073d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073b2:	20a8      	movs	r0, #168	@ 0xa8
 80073b4:	f001 fda0 	bl	8008ef8 <pvPortMalloc>
 80073b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80073c6:	e005      	b.n	80073d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073c8:	6978      	ldr	r0, [r7, #20]
 80073ca:	f001 fe63 	bl	8009094 <vPortFree>
 80073ce:	e001      	b.n	80073d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d017      	beq.n	800740a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	2300      	movs	r3, #0
 80073e6:	9303      	str	r3, [sp, #12]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f80f 	bl	800741c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073fe:	69f8      	ldr	r0, [r7, #28]
 8007400:	f000 f8b6 	bl	8007570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e002      	b.n	8007410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007410:	69bb      	ldr	r3, [r7, #24]
	}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	461a      	mov	r2, r3
 8007434:	21a5      	movs	r1, #165	@ 0xa5
 8007436:	f001 ff49 	bl	80092cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007444:	440b      	add	r3, r1
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00d      	beq.n	800747a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	b672      	cpsid	i
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	b662      	cpsie	i
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01f      	beq.n	80074c0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e012      	b.n	80074ac <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	7819      	ldrb	r1, [r3, #0]
 800748e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	3334      	adds	r3, #52	@ 0x34
 8007496:	460a      	mov	r2, r1
 8007498:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	4413      	add	r3, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3301      	adds	r3, #1
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	d9e9      	bls.n	8007486 <prvInitialiseNewTask+0x6a>
 80074b2:	e000      	b.n	80074b6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80074b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074be:	e003      	b.n	80074c8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	2b37      	cmp	r3, #55	@ 0x37
 80074cc:	d901      	bls.n	80074d2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074ce:	2337      	movs	r3, #55	@ 0x37
 80074d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	2200      	movs	r2, #0
 80074e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fe85 	bl	80061f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	3318      	adds	r3, #24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fe80 	bl	80061f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	2200      	movs	r2, #0
 800751a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	3354      	adds	r3, #84	@ 0x54
 8007522:	224c      	movs	r2, #76	@ 0x4c
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fed0 	bl	80092cc <memset>
 800752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752e:	4a0d      	ldr	r2, [pc, #52]	@ (8007564 <prvInitialiseNewTask+0x148>)
 8007530:	659a      	str	r2, [r3, #88]	@ 0x58
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	4a0c      	ldr	r2, [pc, #48]	@ (8007568 <prvInitialiseNewTask+0x14c>)
 8007536:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	4a0c      	ldr	r2, [pc, #48]	@ (800756c <prvInitialiseNewTask+0x150>)
 800753c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	68f9      	ldr	r1, [r7, #12]
 8007542:	69b8      	ldr	r0, [r7, #24]
 8007544:	f001 fa98 	bl	8008a78 <pxPortInitialiseStack>
 8007548:	4602      	mov	r2, r0
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800755a:	bf00      	nop
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20005144 	.word	0x20005144
 8007568:	200051ac 	.word	0x200051ac
 800756c:	20005214 	.word	0x20005214

08007570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007578:	f001 fb90 	bl	8008c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800757c:	4b2d      	ldr	r3, [pc, #180]	@ (8007634 <prvAddNewTaskToReadyList+0xc4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a2c      	ldr	r2, [pc, #176]	@ (8007634 <prvAddNewTaskToReadyList+0xc4>)
 8007584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007586:	4b2c      	ldr	r3, [pc, #176]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758e:	4a2a      	ldr	r2, [pc, #168]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007594:	4b27      	ldr	r3, [pc, #156]	@ (8007634 <prvAddNewTaskToReadyList+0xc4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d110      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800759c:	f000 fc44 	bl	8007e28 <prvInitialiseTaskLists>
 80075a0:	e00d      	b.n	80075be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075a2:	4b26      	ldr	r3, [pc, #152]	@ (800763c <prvAddNewTaskToReadyList+0xcc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075aa:	4b23      	ldr	r3, [pc, #140]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d802      	bhi.n	80075be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075be:	4b20      	ldr	r3, [pc, #128]	@ (8007640 <prvAddNewTaskToReadyList+0xd0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007640 <prvAddNewTaskToReadyList+0xd0>)
 80075c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007640 <prvAddNewTaskToReadyList+0xd0>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007644 <prvAddNewTaskToReadyList+0xd4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d903      	bls.n	80075e4 <prvAddNewTaskToReadyList+0x74>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	4a18      	ldr	r2, [pc, #96]	@ (8007644 <prvAddNewTaskToReadyList+0xd4>)
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4a15      	ldr	r2, [pc, #84]	@ (8007648 <prvAddNewTaskToReadyList+0xd8>)
 80075f2:	441a      	add	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	4619      	mov	r1, r3
 80075fa:	4610      	mov	r0, r2
 80075fc:	f7fe fe09 	bl	8006212 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007600:	f001 fb82 	bl	8008d08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007604:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <prvAddNewTaskToReadyList+0xcc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00e      	beq.n	800762a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800760c:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d207      	bcs.n	800762a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800761a:	4b0c      	ldr	r3, [pc, #48]	@ (800764c <prvAddNewTaskToReadyList+0xdc>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200013cc 	.word	0x200013cc
 8007638:	20000ef8 	.word	0x20000ef8
 800763c:	200013d8 	.word	0x200013d8
 8007640:	200013e8 	.word	0x200013e8
 8007644:	200013d4 	.word	0x200013d4
 8007648:	20000efc 	.word	0x20000efc
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01a      	beq.n	8007698 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007662:	4b15      	ldr	r3, [pc, #84]	@ (80076b8 <vTaskDelay+0x68>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00d      	beq.n	8007686 <vTaskDelay+0x36>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	b672      	cpsid	i
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	b662      	cpsie	i
 800767e:	60bb      	str	r3, [r7, #8]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007686:	f000 f88f 	bl	80077a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800768a:	2100      	movs	r1, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fe37 	bl	8008300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007692:	f000 f897 	bl	80077c4 <xTaskResumeAll>
 8007696:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d107      	bne.n	80076ae <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800769e:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <vTaskDelay+0x6c>)
 80076a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200013f4 	.word	0x200013f4
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	@ 0x28
 80076c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ce:	463a      	mov	r2, r7
 80076d0:	1d39      	adds	r1, r7, #4
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fd3a 	bl	8006150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	9202      	str	r2, [sp, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	2300      	movs	r3, #0
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	460a      	mov	r2, r1
 80076ee:	4926      	ldr	r1, [pc, #152]	@ (8007788 <vTaskStartScheduler+0xc8>)
 80076f0:	4826      	ldr	r0, [pc, #152]	@ (800778c <vTaskStartScheduler+0xcc>)
 80076f2:	f7ff fde7 	bl	80072c4 <xTaskCreateStatic>
 80076f6:	4603      	mov	r3, r0
 80076f8:	4a25      	ldr	r2, [pc, #148]	@ (8007790 <vTaskStartScheduler+0xd0>)
 80076fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076fc:	4b24      	ldr	r3, [pc, #144]	@ (8007790 <vTaskStartScheduler+0xd0>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e001      	b.n	800770e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d102      	bne.n	800771a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007714:	f000 fe48 	bl	80083a8 <xTimerCreateTimerTask>
 8007718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d11d      	bne.n	800775c <vTaskStartScheduler+0x9c>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	b672      	cpsid	i
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	b662      	cpsie	i
 8007734:	613b      	str	r3, [r7, #16]
}
 8007736:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007738:	4b16      	ldr	r3, [pc, #88]	@ (8007794 <vTaskStartScheduler+0xd4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3354      	adds	r3, #84	@ 0x54
 800773e:	4a16      	ldr	r2, [pc, #88]	@ (8007798 <vTaskStartScheduler+0xd8>)
 8007740:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007742:	4b16      	ldr	r3, [pc, #88]	@ (800779c <vTaskStartScheduler+0xdc>)
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800774a:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <vTaskStartScheduler+0xe0>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007750:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <vTaskStartScheduler+0xe4>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007756:	f001 fa23 	bl	8008ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800775a:	e011      	b.n	8007780 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d10d      	bne.n	8007780 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	b672      	cpsid	i
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	b662      	cpsie	i
 8007778:	60fb      	str	r3, [r7, #12]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <vTaskStartScheduler+0xbc>
}
 8007780:	bf00      	nop
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	0800950c 	.word	0x0800950c
 800778c:	08007df9 	.word	0x08007df9
 8007790:	200013f0 	.word	0x200013f0
 8007794:	20000ef8 	.word	0x20000ef8
 8007798:	2000002c 	.word	0x2000002c
 800779c:	200013ec 	.word	0x200013ec
 80077a0:	200013d8 	.word	0x200013d8
 80077a4:	200013d0 	.word	0x200013d0

080077a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077ac:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <vTaskSuspendAll+0x18>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	4a03      	ldr	r2, [pc, #12]	@ (80077c0 <vTaskSuspendAll+0x18>)
 80077b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80077b6:	bf00      	nop
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	200013f4 	.word	0x200013f4

080077c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077d2:	4b43      	ldr	r3, [pc, #268]	@ (80078e0 <xTaskResumeAll+0x11c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10d      	bne.n	80077f6 <xTaskResumeAll+0x32>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	b672      	cpsid	i
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	b662      	cpsie	i
 80077ee:	603b      	str	r3, [r7, #0]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077f6:	f001 fa51 	bl	8008c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077fa:	4b39      	ldr	r3, [pc, #228]	@ (80078e0 <xTaskResumeAll+0x11c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3b01      	subs	r3, #1
 8007800:	4a37      	ldr	r2, [pc, #220]	@ (80078e0 <xTaskResumeAll+0x11c>)
 8007802:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007804:	4b36      	ldr	r3, [pc, #216]	@ (80078e0 <xTaskResumeAll+0x11c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d162      	bne.n	80078d2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800780c:	4b35      	ldr	r3, [pc, #212]	@ (80078e4 <xTaskResumeAll+0x120>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d05e      	beq.n	80078d2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007814:	e02f      	b.n	8007876 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007816:	4b34      	ldr	r3, [pc, #208]	@ (80078e8 <xTaskResumeAll+0x124>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3318      	adds	r3, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd52 	bl	80062cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3304      	adds	r3, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe fd4d 	bl	80062cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	4b2d      	ldr	r3, [pc, #180]	@ (80078ec <xTaskResumeAll+0x128>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d903      	bls.n	8007846 <xTaskResumeAll+0x82>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	4a2a      	ldr	r2, [pc, #168]	@ (80078ec <xTaskResumeAll+0x128>)
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a27      	ldr	r2, [pc, #156]	@ (80078f0 <xTaskResumeAll+0x12c>)
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3304      	adds	r3, #4
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7fe fcd8 	bl	8006212 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007866:	4b23      	ldr	r3, [pc, #140]	@ (80078f4 <xTaskResumeAll+0x130>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007870:	4b21      	ldr	r3, [pc, #132]	@ (80078f8 <xTaskResumeAll+0x134>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007876:	4b1c      	ldr	r3, [pc, #112]	@ (80078e8 <xTaskResumeAll+0x124>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1cb      	bne.n	8007816 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007884:	f000 fb76 	bl	8007f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007888:	4b1c      	ldr	r3, [pc, #112]	@ (80078fc <xTaskResumeAll+0x138>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d010      	beq.n	80078b6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007894:	f000 f846 	bl	8007924 <xTaskIncrementTick>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800789e:	4b16      	ldr	r3, [pc, #88]	@ (80078f8 <xTaskResumeAll+0x134>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f1      	bne.n	8007894 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80078b0:	4b12      	ldr	r3, [pc, #72]	@ (80078fc <xTaskResumeAll+0x138>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078b6:	4b10      	ldr	r3, [pc, #64]	@ (80078f8 <xTaskResumeAll+0x134>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078be:	2301      	movs	r3, #1
 80078c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007900 <xTaskResumeAll+0x13c>)
 80078c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d2:	f001 fa19 	bl	8008d08 <vPortExitCritical>

	return xAlreadyYielded;
 80078d6:	68bb      	ldr	r3, [r7, #8]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	200013f4 	.word	0x200013f4
 80078e4:	200013cc 	.word	0x200013cc
 80078e8:	2000138c 	.word	0x2000138c
 80078ec:	200013d4 	.word	0x200013d4
 80078f0:	20000efc 	.word	0x20000efc
 80078f4:	20000ef8 	.word	0x20000ef8
 80078f8:	200013e0 	.word	0x200013e0
 80078fc:	200013dc 	.word	0x200013dc
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800790a:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <xTaskGetTickCount+0x1c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007910:	687b      	ldr	r3, [r7, #4]
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	200013d0 	.word	0x200013d0

08007924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792e:	4b50      	ldr	r3, [pc, #320]	@ (8007a70 <xTaskIncrementTick+0x14c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f040 808c 	bne.w	8007a50 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007938:	4b4e      	ldr	r3, [pc, #312]	@ (8007a74 <xTaskIncrementTick+0x150>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007940:	4a4c      	ldr	r2, [pc, #304]	@ (8007a74 <xTaskIncrementTick+0x150>)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d123      	bne.n	8007994 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800794c:	4b4a      	ldr	r3, [pc, #296]	@ (8007a78 <xTaskIncrementTick+0x154>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	b672      	cpsid	i
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	b662      	cpsie	i
 800796a:	603b      	str	r3, [r7, #0]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <xTaskIncrementTick+0x4a>
 8007972:	4b41      	ldr	r3, [pc, #260]	@ (8007a78 <xTaskIncrementTick+0x154>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	4b40      	ldr	r3, [pc, #256]	@ (8007a7c <xTaskIncrementTick+0x158>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a78 <xTaskIncrementTick+0x154>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	4a3e      	ldr	r2, [pc, #248]	@ (8007a7c <xTaskIncrementTick+0x158>)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	4b3e      	ldr	r3, [pc, #248]	@ (8007a80 <xTaskIncrementTick+0x15c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a80 <xTaskIncrementTick+0x15c>)
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	f000 faf0 	bl	8007f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007994:	4b3b      	ldr	r3, [pc, #236]	@ (8007a84 <xTaskIncrementTick+0x160>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	429a      	cmp	r2, r3
 800799c:	d349      	bcc.n	8007a32 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799e:	4b36      	ldr	r3, [pc, #216]	@ (8007a78 <xTaskIncrementTick+0x154>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a8:	4b36      	ldr	r3, [pc, #216]	@ (8007a84 <xTaskIncrementTick+0x160>)
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	601a      	str	r2, [r3, #0]
					break;
 80079b0:	e03f      	b.n	8007a32 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b2:	4b31      	ldr	r3, [pc, #196]	@ (8007a78 <xTaskIncrementTick+0x154>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d203      	bcs.n	80079d2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007a84 <xTaskIncrementTick+0x160>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079d0:	e02f      	b.n	8007a32 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fc78 	bl	80062cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	3318      	adds	r3, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fc6f 	bl	80062cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f2:	4b25      	ldr	r3, [pc, #148]	@ (8007a88 <xTaskIncrementTick+0x164>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d903      	bls.n	8007a02 <xTaskIncrementTick+0xde>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	4a22      	ldr	r2, [pc, #136]	@ (8007a88 <xTaskIncrementTick+0x164>)
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a8c <xTaskIncrementTick+0x168>)
 8007a10:	441a      	add	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7fe fbfa 	bl	8006212 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a22:	4b1b      	ldr	r3, [pc, #108]	@ (8007a90 <xTaskIncrementTick+0x16c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3b8      	bcc.n	800799e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a30:	e7b5      	b.n	800799e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a32:	4b17      	ldr	r3, [pc, #92]	@ (8007a90 <xTaskIncrementTick+0x16c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a38:	4914      	ldr	r1, [pc, #80]	@ (8007a8c <xTaskIncrementTick+0x168>)
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d907      	bls.n	8007a5a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e004      	b.n	8007a5a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a50:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <xTaskIncrementTick+0x170>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	4a0f      	ldr	r2, [pc, #60]	@ (8007a94 <xTaskIncrementTick+0x170>)
 8007a58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a98 <xTaskIncrementTick+0x174>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007a62:	2301      	movs	r3, #1
 8007a64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a66:	697b      	ldr	r3, [r7, #20]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	200013f4 	.word	0x200013f4
 8007a74:	200013d0 	.word	0x200013d0
 8007a78:	20001384 	.word	0x20001384
 8007a7c:	20001388 	.word	0x20001388
 8007a80:	200013e4 	.word	0x200013e4
 8007a84:	200013ec 	.word	0x200013ec
 8007a88:	200013d4 	.word	0x200013d4
 8007a8c:	20000efc 	.word	0x20000efc
 8007a90:	20000ef8 	.word	0x20000ef8
 8007a94:	200013dc 	.word	0x200013dc
 8007a98:	200013e0 	.word	0x200013e0

08007a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8007b54 <vTaskSwitchContext+0xb8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8007b58 <vTaskSwitchContext+0xbc>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab0:	e049      	b.n	8007b46 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007ab2:	4b29      	ldr	r3, [pc, #164]	@ (8007b58 <vTaskSwitchContext+0xbc>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab8:	4b28      	ldr	r3, [pc, #160]	@ (8007b5c <vTaskSwitchContext+0xc0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e013      	b.n	8007ae8 <vTaskSwitchContext+0x4c>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10d      	bne.n	8007ae2 <vTaskSwitchContext+0x46>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	b672      	cpsid	i
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	b662      	cpsie	i
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	e7fd      	b.n	8007ade <vTaskSwitchContext+0x42>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	491d      	ldr	r1, [pc, #116]	@ (8007b60 <vTaskSwitchContext+0xc4>)
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0e1      	beq.n	8007ac0 <vTaskSwitchContext+0x24>
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a16      	ldr	r2, [pc, #88]	@ (8007b60 <vTaskSwitchContext+0xc4>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d104      	bne.n	8007b2c <vTaskSwitchContext+0x90>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	605a      	str	r2, [r3, #4]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	4a0c      	ldr	r2, [pc, #48]	@ (8007b64 <vTaskSwitchContext+0xc8>)
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	4a09      	ldr	r2, [pc, #36]	@ (8007b5c <vTaskSwitchContext+0xc0>)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b3c:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <vTaskSwitchContext+0xc8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3354      	adds	r3, #84	@ 0x54
 8007b42:	4a09      	ldr	r2, [pc, #36]	@ (8007b68 <vTaskSwitchContext+0xcc>)
 8007b44:	6013      	str	r3, [r2, #0]
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	200013f4 	.word	0x200013f4
 8007b58:	200013e0 	.word	0x200013e0
 8007b5c:	200013d4 	.word	0x200013d4
 8007b60:	20000efc 	.word	0x20000efc
 8007b64:	20000ef8 	.word	0x20000ef8
 8007b68:	2000002c 	.word	0x2000002c

08007b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10d      	bne.n	8007b98 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b80:	b672      	cpsid	i
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	b662      	cpsie	i
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	e7fd      	b.n	8007b94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b98:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <vTaskPlaceOnEventList+0x4c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3318      	adds	r3, #24
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7fe fb5a 	bl	800625a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	6838      	ldr	r0, [r7, #0]
 8007baa:	f000 fba9 	bl	8008300 <prvAddCurrentTaskToDelayedList>
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000ef8 	.word	0x20000ef8

08007bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10d      	bne.n	8007bea <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	b672      	cpsid	i
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	b662      	cpsie	i
 8007be2:	617b      	str	r3, [r7, #20]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bea:	4b0a      	ldr	r3, [pc, #40]	@ (8007c14 <vTaskPlaceOnEventListRestricted+0x58>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3318      	adds	r3, #24
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7fe fb0d 	bl	8006212 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007c02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	68b8      	ldr	r0, [r7, #8]
 8007c08:	f000 fb7a 	bl	8008300 <prvAddCurrentTaskToDelayedList>
	}
 8007c0c:	bf00      	nop
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000ef8 	.word	0x20000ef8

08007c18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10d      	bne.n	8007c4a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	60fb      	str	r3, [r7, #12]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3318      	adds	r3, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fb3c 	bl	80062cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c54:	4b1d      	ldr	r3, [pc, #116]	@ (8007ccc <xTaskRemoveFromEventList+0xb4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11d      	bne.n	8007c98 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fb33 	bl	80062cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c6a:	4b19      	ldr	r3, [pc, #100]	@ (8007cd0 <xTaskRemoveFromEventList+0xb8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d903      	bls.n	8007c7a <xTaskRemoveFromEventList+0x62>
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	4a16      	ldr	r2, [pc, #88]	@ (8007cd0 <xTaskRemoveFromEventList+0xb8>)
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4a13      	ldr	r2, [pc, #76]	@ (8007cd4 <xTaskRemoveFromEventList+0xbc>)
 8007c88:	441a      	add	r2, r3
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7fe fabe 	bl	8006212 <vListInsertEnd>
 8007c96:	e005      	b.n	8007ca4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	480e      	ldr	r0, [pc, #56]	@ (8007cd8 <xTaskRemoveFromEventList+0xc0>)
 8007ca0:	f7fe fab7 	bl	8006212 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <xTaskRemoveFromEventList+0xc4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d905      	bls.n	8007cbe <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce0 <xTaskRemoveFromEventList+0xc8>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e001      	b.n	8007cc2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cc2:	697b      	ldr	r3, [r7, #20]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	200013f4 	.word	0x200013f4
 8007cd0:	200013d4 	.word	0x200013d4
 8007cd4:	20000efc 	.word	0x20000efc
 8007cd8:	2000138c 	.word	0x2000138c
 8007cdc:	20000ef8 	.word	0x20000ef8
 8007ce0:	200013e0 	.word	0x200013e0

08007ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cec:	4b06      	ldr	r3, [pc, #24]	@ (8007d08 <vTaskInternalSetTimeOutState+0x24>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cf4:	4b05      	ldr	r3, [pc, #20]	@ (8007d0c <vTaskInternalSetTimeOutState+0x28>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	605a      	str	r2, [r3, #4]
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	200013e4 	.word	0x200013e4
 8007d0c:	200013d0 	.word	0x200013d0

08007d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	b672      	cpsid	i
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	b662      	cpsie	i
 8007d34:	613b      	str	r3, [r7, #16]
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10d      	bne.n	8007d5e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	b672      	cpsid	i
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	b662      	cpsie	i
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007d5e:	f000 ff9d 	bl	8008c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d62:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd8 <xTaskCheckForTimeOut+0xc8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	d102      	bne.n	8007d82 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	e023      	b.n	8007dca <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <xTaskCheckForTimeOut+0xcc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d007      	beq.n	8007d9e <xTaskCheckForTimeOut+0x8e>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d302      	bcc.n	8007d9e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e015      	b.n	8007dca <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d20b      	bcs.n	8007dc0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff ff95 	bl	8007ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	e004      	b.n	8007dca <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dca:	f000 ff9d 	bl	8008d08 <vPortExitCritical>

	return xReturn;
 8007dce:	69fb      	ldr	r3, [r7, #28]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	200013d0 	.word	0x200013d0
 8007ddc:	200013e4 	.word	0x200013e4

08007de0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007de4:	4b03      	ldr	r3, [pc, #12]	@ (8007df4 <vTaskMissedYield+0x14>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
}
 8007dea:	bf00      	nop
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	200013e0 	.word	0x200013e0

08007df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e00:	f000 f852 	bl	8007ea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <prvIdleTask+0x28>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d9f9      	bls.n	8007e00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <prvIdleTask+0x2c>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e1c:	e7f0      	b.n	8007e00 <prvIdleTask+0x8>
 8007e1e:	bf00      	nop
 8007e20:	20000efc 	.word	0x20000efc
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	e00c      	b.n	8007e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4a12      	ldr	r2, [pc, #72]	@ (8007e88 <prvInitialiseTaskLists+0x60>)
 8007e40:	4413      	add	r3, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe f9b8 	bl	80061b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	607b      	str	r3, [r7, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b37      	cmp	r3, #55	@ 0x37
 8007e52:	d9ef      	bls.n	8007e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e54:	480d      	ldr	r0, [pc, #52]	@ (8007e8c <prvInitialiseTaskLists+0x64>)
 8007e56:	f7fe f9af 	bl	80061b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e5a:	480d      	ldr	r0, [pc, #52]	@ (8007e90 <prvInitialiseTaskLists+0x68>)
 8007e5c:	f7fe f9ac 	bl	80061b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e60:	480c      	ldr	r0, [pc, #48]	@ (8007e94 <prvInitialiseTaskLists+0x6c>)
 8007e62:	f7fe f9a9 	bl	80061b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e66:	480c      	ldr	r0, [pc, #48]	@ (8007e98 <prvInitialiseTaskLists+0x70>)
 8007e68:	f7fe f9a6 	bl	80061b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e6c:	480b      	ldr	r0, [pc, #44]	@ (8007e9c <prvInitialiseTaskLists+0x74>)
 8007e6e:	f7fe f9a3 	bl	80061b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <prvInitialiseTaskLists+0x78>)
 8007e74:	4a05      	ldr	r2, [pc, #20]	@ (8007e8c <prvInitialiseTaskLists+0x64>)
 8007e76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <prvInitialiseTaskLists+0x7c>)
 8007e7a:	4a05      	ldr	r2, [pc, #20]	@ (8007e90 <prvInitialiseTaskLists+0x68>)
 8007e7c:	601a      	str	r2, [r3, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000efc 	.word	0x20000efc
 8007e8c:	2000135c 	.word	0x2000135c
 8007e90:	20001370 	.word	0x20001370
 8007e94:	2000138c 	.word	0x2000138c
 8007e98:	200013a0 	.word	0x200013a0
 8007e9c:	200013b8 	.word	0x200013b8
 8007ea0:	20001384 	.word	0x20001384
 8007ea4:	20001388 	.word	0x20001388

08007ea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eae:	e019      	b.n	8007ee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007eb0:	f000 fef4 	bl	8008c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb4:	4b10      	ldr	r3, [pc, #64]	@ (8007ef8 <prvCheckTasksWaitingTermination+0x50>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe fa03 	bl	80062cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <prvCheckTasksWaitingTermination+0x54>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8007efc <prvCheckTasksWaitingTermination+0x54>)
 8007ece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <prvCheckTasksWaitingTermination+0x58>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8007f00 <prvCheckTasksWaitingTermination+0x58>)
 8007ed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eda:	f000 ff15 	bl	8008d08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f810 	bl	8007f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee4:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <prvCheckTasksWaitingTermination+0x58>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e1      	bne.n	8007eb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200013a0 	.word	0x200013a0
 8007efc:	200013cc 	.word	0x200013cc
 8007f00:	200013b4 	.word	0x200013b4

08007f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3354      	adds	r3, #84	@ 0x54
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f9e3 	bl	80092dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d108      	bne.n	8007f32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 f8b5 	bl	8009094 <vPortFree>
				vPortFree( pxTCB );
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 f8b2 	bl	8009094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f30:	e01b      	b.n	8007f6a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d103      	bne.n	8007f44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f8a9 	bl	8009094 <vPortFree>
	}
 8007f42:	e012      	b.n	8007f6a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d00d      	beq.n	8007f6a <prvDeleteTCB+0x66>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	60fb      	str	r3, [r7, #12]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <prvDeleteTCB+0x62>
	}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fac <prvResetNextTaskUnblockTime+0x38>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f84:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f8c:	e008      	b.n	8007fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8e:	4b07      	ldr	r3, [pc, #28]	@ (8007fac <prvResetNextTaskUnblockTime+0x38>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4a04      	ldr	r2, [pc, #16]	@ (8007fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007f9e:	6013      	str	r3, [r2, #0]
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20001384 	.word	0x20001384
 8007fb0:	200013ec 	.word	0x200013ec

08007fb4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007fba:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007fc0:	687b      	ldr	r3, [r7, #4]
	}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20000ef8 	.word	0x20000ef8

08007fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fda:	4b0b      	ldr	r3, [pc, #44]	@ (8008008 <xTaskGetSchedulerState+0x34>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	e008      	b.n	8007ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe8:	4b08      	ldr	r3, [pc, #32]	@ (800800c <xTaskGetSchedulerState+0x38>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	607b      	str	r3, [r7, #4]
 8007ff4:	e001      	b.n	8007ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ffa:	687b      	ldr	r3, [r7, #4]
	}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	200013d8 	.word	0x200013d8
 800800c:	200013f4 	.word	0x200013f4

08008010 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d051      	beq.n	80080ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802a:	4b2a      	ldr	r3, [pc, #168]	@ (80080d4 <xTaskPriorityInherit+0xc4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	429a      	cmp	r2, r3
 8008032:	d241      	bcs.n	80080b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	db06      	blt.n	800804a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800803c:	4b25      	ldr	r3, [pc, #148]	@ (80080d4 <xTaskPriorityInherit+0xc4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008042:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6959      	ldr	r1, [r3, #20]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4a1f      	ldr	r2, [pc, #124]	@ (80080d8 <xTaskPriorityInherit+0xc8>)
 800805c:	4413      	add	r3, r2
 800805e:	4299      	cmp	r1, r3
 8008060:	d122      	bne.n	80080a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	3304      	adds	r3, #4
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe f930 	bl	80062cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800806c:	4b19      	ldr	r3, [pc, #100]	@ (80080d4 <xTaskPriorityInherit+0xc4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807a:	4b18      	ldr	r3, [pc, #96]	@ (80080dc <xTaskPriorityInherit+0xcc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d903      	bls.n	800808a <xTaskPriorityInherit+0x7a>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008086:	4a15      	ldr	r2, [pc, #84]	@ (80080dc <xTaskPriorityInherit+0xcc>)
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808e:	4613      	mov	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4a10      	ldr	r2, [pc, #64]	@ (80080d8 <xTaskPriorityInherit+0xc8>)
 8008098:	441a      	add	r2, r3
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	3304      	adds	r3, #4
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f7fe f8b6 	bl	8006212 <vListInsertEnd>
 80080a6:	e004      	b.n	80080b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <xTaskPriorityInherit+0xc4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80080b2:	2301      	movs	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e008      	b.n	80080ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <xTaskPriorityInherit+0xc4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d201      	bcs.n	80080ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080ca:	68fb      	ldr	r3, [r7, #12]
	}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000ef8 	.word	0x20000ef8
 80080d8:	20000efc 	.word	0x20000efc
 80080dc:	200013d4 	.word	0x200013d4

080080e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d05c      	beq.n	80081b0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080f6:	4b31      	ldr	r3, [pc, #196]	@ (80081bc <xTaskPriorityDisinherit+0xdc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d00d      	beq.n	800811c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	60fb      	str	r3, [r7, #12]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10d      	bne.n	8008140 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	b672      	cpsid	i
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	b662      	cpsie	i
 8008138:	60bb      	str	r3, [r7, #8]
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008144:	1e5a      	subs	r2, r3, #1
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008152:	429a      	cmp	r2, r3
 8008154:	d02c      	beq.n	80081b0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800815a:	2b00      	cmp	r3, #0
 800815c:	d128      	bne.n	80081b0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe f8b2 	bl	80062cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	4b0f      	ldr	r3, [pc, #60]	@ (80081c0 <xTaskPriorityDisinherit+0xe0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d903      	bls.n	8008190 <xTaskPriorityDisinherit+0xb0>
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	4a0c      	ldr	r2, [pc, #48]	@ (80081c0 <xTaskPriorityDisinherit+0xe0>)
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4a09      	ldr	r2, [pc, #36]	@ (80081c4 <xTaskPriorityDisinherit+0xe4>)
 800819e:	441a      	add	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fe f833 	bl	8006212 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081b0:	697b      	ldr	r3, [r7, #20]
	}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000ef8 	.word	0x20000ef8
 80081c0:	200013d4 	.word	0x200013d4
 80081c4:	20000efc 	.word	0x20000efc

080081c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80081d6:	2301      	movs	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d070      	beq.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10d      	bne.n	8008204 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	b672      	cpsid	i
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	b662      	cpsie	i
 80081fc:	60fb      	str	r3, [r7, #12]
}
 80081fe:	bf00      	nop
 8008200:	bf00      	nop
 8008202:	e7fd      	b.n	8008200 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d902      	bls.n	8008214 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	61fb      	str	r3, [r7, #28]
 8008212:	e002      	b.n	800821a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008218:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	429a      	cmp	r2, r3
 8008222:	d04e      	beq.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	429a      	cmp	r2, r3
 800822c:	d149      	bne.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800822e:	4b27      	ldr	r3, [pc, #156]	@ (80082cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d10d      	bne.n	8008254 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	b672      	cpsid	i
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	b662      	cpsie	i
 800824c:	60bb      	str	r3, [r7, #8]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	db04      	blt.n	8008272 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	6959      	ldr	r1, [r3, #20]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4a13      	ldr	r2, [pc, #76]	@ (80082d0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008282:	4413      	add	r3, r2
 8008284:	4299      	cmp	r1, r3
 8008286:	d11c      	bne.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	3304      	adds	r3, #4
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe f81d 	bl	80062cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008296:	4b0f      	ldr	r3, [pc, #60]	@ (80082d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d903      	bls.n	80082a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	4a0c      	ldr	r2, [pc, #48]	@ (80082d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4a07      	ldr	r2, [pc, #28]	@ (80082d0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80082b4:	441a      	add	r2, r3
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fd ffa8 	bl	8006212 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082c2:	bf00      	nop
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000ef8 	.word	0x20000ef8
 80082d0:	20000efc 	.word	0x20000efc
 80082d4:	200013d4 	.word	0x200013d4

080082d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80082dc:	4b07      	ldr	r3, [pc, #28]	@ (80082fc <pvTaskIncrementMutexHeldCount+0x24>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082e4:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <pvTaskIncrementMutexHeldCount+0x24>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ea:	3201      	adds	r2, #1
 80082ec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80082ee:	4b03      	ldr	r3, [pc, #12]	@ (80082fc <pvTaskIncrementMutexHeldCount+0x24>)
 80082f0:	681b      	ldr	r3, [r3, #0]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000ef8 	.word	0x20000ef8

08008300 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800830a:	4b21      	ldr	r3, [pc, #132]	@ (8008390 <prvAddCurrentTaskToDelayedList+0x90>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008310:	4b20      	ldr	r3, [pc, #128]	@ (8008394 <prvAddCurrentTaskToDelayedList+0x94>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3304      	adds	r3, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd ffd8 	bl	80062cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d10a      	bne.n	800833a <prvAddCurrentTaskToDelayedList+0x3a>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d007      	beq.n	800833a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832a:	4b1a      	ldr	r3, [pc, #104]	@ (8008394 <prvAddCurrentTaskToDelayedList+0x94>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4819      	ldr	r0, [pc, #100]	@ (8008398 <prvAddCurrentTaskToDelayedList+0x98>)
 8008334:	f7fd ff6d 	bl	8006212 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008338:	e026      	b.n	8008388 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4413      	add	r3, r2
 8008340:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008342:	4b14      	ldr	r3, [pc, #80]	@ (8008394 <prvAddCurrentTaskToDelayedList+0x94>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	429a      	cmp	r2, r3
 8008350:	d209      	bcs.n	8008366 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <prvAddCurrentTaskToDelayedList+0x94>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f7fd ff7b 	bl	800625a <vListInsert>
}
 8008364:	e010      	b.n	8008388 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008366:	4b0e      	ldr	r3, [pc, #56]	@ (80083a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b0a      	ldr	r3, [pc, #40]	@ (8008394 <prvAddCurrentTaskToDelayedList+0x94>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f7fd ff71 	bl	800625a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008378:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	d202      	bcs.n	8008388 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008382:	4a08      	ldr	r2, [pc, #32]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	6013      	str	r3, [r2, #0]
}
 8008388:	bf00      	nop
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200013d0 	.word	0x200013d0
 8008394:	20000ef8 	.word	0x20000ef8
 8008398:	200013b8 	.word	0x200013b8
 800839c:	20001388 	.word	0x20001388
 80083a0:	20001384 	.word	0x20001384
 80083a4:	200013ec 	.word	0x200013ec

080083a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	@ 0x28
 80083ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083b2:	f000 fb21 	bl	80089f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008430 <xTimerCreateTimerTask+0x88>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d021      	beq.n	8008402 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083c6:	1d3a      	adds	r2, r7, #4
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	f107 030c 	add.w	r3, r7, #12
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd fed7 	bl	8006184 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	9202      	str	r2, [sp, #8]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	2302      	movs	r3, #2
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	2300      	movs	r3, #0
 80083e6:	460a      	mov	r2, r1
 80083e8:	4912      	ldr	r1, [pc, #72]	@ (8008434 <xTimerCreateTimerTask+0x8c>)
 80083ea:	4813      	ldr	r0, [pc, #76]	@ (8008438 <xTimerCreateTimerTask+0x90>)
 80083ec:	f7fe ff6a 	bl	80072c4 <xTaskCreateStatic>
 80083f0:	4603      	mov	r3, r0
 80083f2:	4a12      	ldr	r2, [pc, #72]	@ (800843c <xTimerCreateTimerTask+0x94>)
 80083f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083f6:	4b11      	ldr	r3, [pc, #68]	@ (800843c <xTimerCreateTimerTask+0x94>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083fe:	2301      	movs	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840c:	b672      	cpsid	i
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	b662      	cpsie	i
 800841c:	613b      	str	r3, [r7, #16]
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008424:	697b      	ldr	r3, [r7, #20]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20001428 	.word	0x20001428
 8008434:	08009514 	.word	0x08009514
 8008438:	08008581 	.word	0x08008581
 800843c:	2000142c 	.word	0x2000142c

08008440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	@ 0x28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800844e:	2300      	movs	r3, #0
 8008450:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10d      	bne.n	8008474 <xTimerGenericCommand+0x34>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	623b      	str	r3, [r7, #32]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008474:	4b19      	ldr	r3, [pc, #100]	@ (80084dc <xTimerGenericCommand+0x9c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d02a      	beq.n	80084d2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b05      	cmp	r3, #5
 800848c:	dc18      	bgt.n	80084c0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800848e:	f7ff fda1 	bl	8007fd4 <xTaskGetSchedulerState>
 8008492:	4603      	mov	r3, r0
 8008494:	2b02      	cmp	r3, #2
 8008496:	d109      	bne.n	80084ac <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008498:	4b10      	ldr	r3, [pc, #64]	@ (80084dc <xTimerGenericCommand+0x9c>)
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	f107 0110 	add.w	r1, r7, #16
 80084a0:	2300      	movs	r3, #0
 80084a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084a4:	f7fe f952 	bl	800674c <xQueueGenericSend>
 80084a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80084aa:	e012      	b.n	80084d2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084ac:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <xTimerGenericCommand+0x9c>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	f107 0110 	add.w	r1, r7, #16
 80084b4:	2300      	movs	r3, #0
 80084b6:	2200      	movs	r2, #0
 80084b8:	f7fe f948 	bl	800674c <xQueueGenericSend>
 80084bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80084be:	e008      	b.n	80084d2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084c0:	4b06      	ldr	r3, [pc, #24]	@ (80084dc <xTimerGenericCommand+0x9c>)
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	f107 0110 	add.w	r1, r7, #16
 80084c8:	2300      	movs	r3, #0
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	f7fe fa48 	bl	8006960 <xQueueGenericSendFromISR>
 80084d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3728      	adds	r7, #40	@ 0x28
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20001428 	.word	0x20001428

080084e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ea:	4b24      	ldr	r3, [pc, #144]	@ (800857c <prvProcessExpiredTimer+0x9c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fd fee7 	bl	80062cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d025      	beq.n	8008558 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	18d1      	adds	r1, r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	6978      	ldr	r0, [r7, #20]
 800851a:	f000 f8d7 	bl	80086cc <prvInsertTimerInActiveList>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d022      	beq.n	800856a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008524:	2300      	movs	r3, #0
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	2100      	movs	r1, #0
 800852e:	6978      	ldr	r0, [r7, #20]
 8008530:	f7ff ff86 	bl	8008440 <xTimerGenericCommand>
 8008534:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d116      	bne.n	800856a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	60fb      	str	r3, [r7, #12]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	6978      	ldr	r0, [r7, #20]
 8008570:	4798      	blx	r3
}
 8008572:	bf00      	nop
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20001420 	.word	0x20001420

08008580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f859 	bl	8008644 <prvGetNextExpireTime>
 8008592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4619      	mov	r1, r3
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f805 	bl	80085a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800859e:	f000 f8d7 	bl	8008750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085a2:	bf00      	nop
 80085a4:	e7f0      	b.n	8008588 <prvTimerTask+0x8>
	...

080085a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085b2:	f7ff f8f9 	bl	80077a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f866 	bl	800868c <prvSampleTimeNow>
 80085c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d130      	bne.n	800862a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <prvProcessTimerOrBlockTask+0x3c>
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d806      	bhi.n	80085e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085d6:	f7ff f8f5 	bl	80077c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ff7f 	bl	80084e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085e2:	e024      	b.n	800862e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085ea:	4b13      	ldr	r3, [pc, #76]	@ (8008638 <prvProcessTimerOrBlockTask+0x90>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <prvProcessTimerOrBlockTask+0x50>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <prvProcessTimerOrBlockTask+0x52>
 80085f8:	2300      	movs	r3, #0
 80085fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085fc:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <prvProcessTimerOrBlockTask+0x94>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	f7fe fe27 	bl	800725c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800860e:	f7ff f8d9 	bl	80077c4 <xTaskResumeAll>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008618:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <prvProcessTimerOrBlockTask+0x98>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
}
 8008628:	e001      	b.n	800862e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800862a:	f7ff f8cb 	bl	80077c4 <xTaskResumeAll>
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20001424 	.word	0x20001424
 800863c:	20001428 	.word	0x20001428
 8008640:	e000ed04 	.word	0xe000ed04

08008644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800864c:	4b0e      	ldr	r3, [pc, #56]	@ (8008688 <prvGetNextExpireTime+0x44>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <prvGetNextExpireTime+0x16>
 8008656:	2201      	movs	r2, #1
 8008658:	e000      	b.n	800865c <prvGetNextExpireTime+0x18>
 800865a:	2200      	movs	r2, #0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d105      	bne.n	8008674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008668:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <prvGetNextExpireTime+0x44>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e001      	b.n	8008678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008678:	68fb      	ldr	r3, [r7, #12]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20001420 	.word	0x20001420

0800868c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008694:	f7ff f936 	bl	8007904 <xTaskGetTickCount>
 8008698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800869a:	4b0b      	ldr	r3, [pc, #44]	@ (80086c8 <prvSampleTimeNow+0x3c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d205      	bcs.n	80086b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086a4:	f000 f940 	bl	8008928 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e002      	b.n	80086b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086b6:	4a04      	ldr	r2, [pc, #16]	@ (80086c8 <prvSampleTimeNow+0x3c>)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20001430 	.word	0x20001430

080086cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d812      	bhi.n	8008718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d302      	bcc.n	8008706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e01b      	b.n	800873e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008706:	4b10      	ldr	r3, [pc, #64]	@ (8008748 <prvInsertTimerInActiveList+0x7c>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3304      	adds	r3, #4
 800870e:	4619      	mov	r1, r3
 8008710:	4610      	mov	r0, r2
 8008712:	f7fd fda2 	bl	800625a <vListInsert>
 8008716:	e012      	b.n	800873e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d206      	bcs.n	800872e <prvInsertTimerInActiveList+0x62>
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d302      	bcc.n	800872e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e007      	b.n	800873e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800872e:	4b07      	ldr	r3, [pc, #28]	@ (800874c <prvInsertTimerInActiveList+0x80>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fd fd8e 	bl	800625a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800873e:	697b      	ldr	r3, [r7, #20]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20001424 	.word	0x20001424
 800874c:	20001420 	.word	0x20001420

08008750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	@ 0x38
 8008754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008756:	e0d4      	b.n	8008902 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	da1b      	bge.n	8008796 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	3304      	adds	r3, #4
 8008762:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10d      	bne.n	8008786 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	b672      	cpsid	i
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	b662      	cpsie	i
 800877e:	61fb      	str	r3, [r7, #28]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878c:	6850      	ldr	r0, [r2, #4]
 800878e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008790:	6892      	ldr	r2, [r2, #8]
 8008792:	4611      	mov	r1, r2
 8008794:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f2c0 80b2 	blt.w	8008902 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fd fd8c 	bl	80062cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087b4:	463b      	mov	r3, r7
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff ff68 	bl	800868c <prvSampleTimeNow>
 80087bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	f200 809b 	bhi.w	80088fc <prvProcessReceivedCommands+0x1ac>
 80087c6:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <prvProcessReceivedCommands+0x7c>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f5 	.word	0x080087f5
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	0800886f 	.word	0x0800886f
 80087dc:	08008883 	.word	0x08008883
 80087e0:	080088d3 	.word	0x080088d3
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	080087f5 	.word	0x080087f5
 80087ec:	0800886f 	.word	0x0800886f
 80087f0:	08008883 	.word	0x08008883
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	18d1      	adds	r1, r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008814:	f7ff ff5a 	bl	80086cc <prvInsertTimerInActiveList>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d070      	beq.n	8008900 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d065      	beq.n	8008900 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	441a      	add	r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2300      	movs	r3, #0
 8008842:	2100      	movs	r1, #0
 8008844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008846:	f7ff fdfb 	bl	8008440 <xTimerGenericCommand>
 800884a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d156      	bne.n	8008900 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	b672      	cpsid	i
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	b662      	cpsie	i
 8008866:	61bb      	str	r3, [r7, #24]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008880:	e03f      	b.n	8008902 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	b2da      	uxtb	r2, r3
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10d      	bne.n	80088be <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	b672      	cpsid	i
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	b662      	cpsie	i
 80088b6:	617b      	str	r3, [r7, #20]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	18d1      	adds	r1, r2, r3
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088cc:	f7ff fefe 	bl	80086cc <prvInsertTimerInActiveList>
					break;
 80088d0:	e017      	b.n	8008902 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80088e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e2:	f000 fbd7 	bl	8009094 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088e6:	e00c      	b.n	8008902 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088fa:	e002      	b.n	8008902 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80088fc:	bf00      	nop
 80088fe:	e000      	b.n	8008902 <prvProcessReceivedCommands+0x1b2>
					break;
 8008900:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008902:	4b08      	ldr	r3, [pc, #32]	@ (8008924 <prvProcessReceivedCommands+0x1d4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	1d39      	adds	r1, r7, #4
 8008908:	2200      	movs	r2, #0
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe f8cc 	bl	8006aa8 <xQueueReceive>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	f47f af20 	bne.w	8008758 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	3730      	adds	r7, #48	@ 0x30
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20001428 	.word	0x20001428

08008928 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800892e:	e04b      	b.n	80089c8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008930:	4b2f      	ldr	r3, [pc, #188]	@ (80089f0 <prvSwitchTimerLists+0xc8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893a:	4b2d      	ldr	r3, [pc, #180]	@ (80089f0 <prvSwitchTimerLists+0xc8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3304      	adds	r3, #4
 8008948:	4618      	mov	r0, r3
 800894a:	f7fd fcbf 	bl	80062cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d031      	beq.n	80089c8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4413      	add	r3, r2
 800896c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	d90e      	bls.n	8008994 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008982:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <prvSwitchTimerLists+0xc8>)
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3304      	adds	r3, #4
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f7fd fc64 	bl	800625a <vListInsert>
 8008992:	e019      	b.n	80089c8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008994:	2300      	movs	r3, #0
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	2300      	movs	r3, #0
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	2100      	movs	r1, #0
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff fd4e 	bl	8008440 <xTimerGenericCommand>
 80089a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10d      	bne.n	80089c8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	b672      	cpsid	i
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	b662      	cpsie	i
 80089c0:	603b      	str	r3, [r7, #0]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089c8:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <prvSwitchTimerLists+0xc8>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1ae      	bne.n	8008930 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089d2:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <prvSwitchTimerLists+0xc8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089d8:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <prvSwitchTimerLists+0xcc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a04      	ldr	r2, [pc, #16]	@ (80089f0 <prvSwitchTimerLists+0xc8>)
 80089de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089e0:	4a04      	ldr	r2, [pc, #16]	@ (80089f4 <prvSwitchTimerLists+0xcc>)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	6013      	str	r3, [r2, #0]
}
 80089e6:	bf00      	nop
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20001420 	.word	0x20001420
 80089f4:	20001424 	.word	0x20001424

080089f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089fe:	f000 f94d 	bl	8008c9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a02:	4b15      	ldr	r3, [pc, #84]	@ (8008a58 <prvCheckForValidListAndQueue+0x60>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d120      	bne.n	8008a4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a0a:	4814      	ldr	r0, [pc, #80]	@ (8008a5c <prvCheckForValidListAndQueue+0x64>)
 8008a0c:	f7fd fbd4 	bl	80061b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a10:	4813      	ldr	r0, [pc, #76]	@ (8008a60 <prvCheckForValidListAndQueue+0x68>)
 8008a12:	f7fd fbd1 	bl	80061b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a16:	4b13      	ldr	r3, [pc, #76]	@ (8008a64 <prvCheckForValidListAndQueue+0x6c>)
 8008a18:	4a10      	ldr	r2, [pc, #64]	@ (8008a5c <prvCheckForValidListAndQueue+0x64>)
 8008a1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a1c:	4b12      	ldr	r3, [pc, #72]	@ (8008a68 <prvCheckForValidListAndQueue+0x70>)
 8008a1e:	4a10      	ldr	r2, [pc, #64]	@ (8008a60 <prvCheckForValidListAndQueue+0x68>)
 8008a20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a22:	2300      	movs	r3, #0
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	4b11      	ldr	r3, [pc, #68]	@ (8008a6c <prvCheckForValidListAndQueue+0x74>)
 8008a28:	4a11      	ldr	r2, [pc, #68]	@ (8008a70 <prvCheckForValidListAndQueue+0x78>)
 8008a2a:	2110      	movs	r1, #16
 8008a2c:	200a      	movs	r0, #10
 8008a2e:	f7fd fce3 	bl	80063f8 <xQueueGenericCreateStatic>
 8008a32:	4603      	mov	r3, r0
 8008a34:	4a08      	ldr	r2, [pc, #32]	@ (8008a58 <prvCheckForValidListAndQueue+0x60>)
 8008a36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a38:	4b07      	ldr	r3, [pc, #28]	@ (8008a58 <prvCheckForValidListAndQueue+0x60>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <prvCheckForValidListAndQueue+0x60>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	490b      	ldr	r1, [pc, #44]	@ (8008a74 <prvCheckForValidListAndQueue+0x7c>)
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fbde 	bl	8007208 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a4c:	f000 f95c 	bl	8008d08 <vPortExitCritical>
}
 8008a50:	bf00      	nop
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20001428 	.word	0x20001428
 8008a5c:	200013f8 	.word	0x200013f8
 8008a60:	2000140c 	.word	0x2000140c
 8008a64:	20001420 	.word	0x20001420
 8008a68:	20001424 	.word	0x20001424
 8008a6c:	200014d4 	.word	0x200014d4
 8008a70:	20001434 	.word	0x20001434
 8008a74:	0800951c 	.word	0x0800951c

08008a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3b04      	subs	r3, #4
 8008a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3b04      	subs	r3, #4
 8008a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f023 0201 	bic.w	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3b04      	subs	r3, #4
 8008aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8008adc <pxPortInitialiseStack+0x64>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3b14      	subs	r3, #20
 8008ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3b04      	subs	r3, #4
 8008abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f06f 0202 	mvn.w	r2, #2
 8008ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3b20      	subs	r3, #32
 8008acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	08008ae1 	.word	0x08008ae1

08008ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aea:	4b15      	ldr	r3, [pc, #84]	@ (8008b40 <prvTaskExitError+0x60>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d00d      	beq.n	8008b10 <prvTaskExitError+0x30>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	b672      	cpsid	i
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	b662      	cpsie	i
 8008b08:	60fb      	str	r3, [r7, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	e7fd      	b.n	8008b0c <prvTaskExitError+0x2c>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	b672      	cpsid	i
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	b662      	cpsie	i
 8008b24:	60bb      	str	r3, [r7, #8]
}
 8008b26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b28:	bf00      	nop
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0fc      	beq.n	8008b2a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20000028 	.word	0x20000028
	...

08008b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b50:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <pxCurrentTCBConst2>)
 8008b52:	6819      	ldr	r1, [r3, #0]
 8008b54:	6808      	ldr	r0, [r1, #0]
 8008b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	f380 8809 	msr	PSP, r0
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f04f 0000 	mov.w	r0, #0
 8008b66:	f380 8811 	msr	BASEPRI, r0
 8008b6a:	4770      	bx	lr
 8008b6c:	f3af 8000 	nop.w

08008b70 <pxCurrentTCBConst2>:
 8008b70:	20000ef8 	.word	0x20000ef8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop

08008b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b78:	4808      	ldr	r0, [pc, #32]	@ (8008b9c <prvPortStartFirstTask+0x24>)
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	6800      	ldr	r0, [r0, #0]
 8008b7e:	f380 8808 	msr	MSP, r0
 8008b82:	f04f 0000 	mov.w	r0, #0
 8008b86:	f380 8814 	msr	CONTROL, r0
 8008b8a:	b662      	cpsie	i
 8008b8c:	b661      	cpsie	f
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	df00      	svc	0
 8008b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b9a:	bf00      	nop
 8008b9c:	e000ed08 	.word	0xe000ed08

08008ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ba6:	4b37      	ldr	r3, [pc, #220]	@ (8008c84 <xPortStartScheduler+0xe4>)
 8008ba8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	22ff      	movs	r2, #255	@ 0xff
 8008bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	4b2f      	ldr	r3, [pc, #188]	@ (8008c88 <xPortStartScheduler+0xe8>)
 8008bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bce:	4b2f      	ldr	r3, [pc, #188]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bd4:	e009      	b.n	8008bea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bf2:	2b80      	cmp	r3, #128	@ 0x80
 8008bf4:	d0ef      	beq.n	8008bd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bf6:	4b25      	ldr	r3, [pc, #148]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f1c3 0307 	rsb	r3, r3, #7
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d00d      	beq.n	8008c1e <xPortStartScheduler+0x7e>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	b672      	cpsid	i
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	b662      	cpsie	i
 8008c16:	60bb      	str	r3, [r7, #8]
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	e7fd      	b.n	8008c1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	4a19      	ldr	r2, [pc, #100]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c28:	4b18      	ldr	r3, [pc, #96]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c30:	4a16      	ldr	r2, [pc, #88]	@ (8008c8c <xPortStartScheduler+0xec>)
 8008c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c3c:	4b14      	ldr	r3, [pc, #80]	@ (8008c90 <xPortStartScheduler+0xf0>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a13      	ldr	r2, [pc, #76]	@ (8008c90 <xPortStartScheduler+0xf0>)
 8008c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c48:	4b11      	ldr	r3, [pc, #68]	@ (8008c90 <xPortStartScheduler+0xf0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a10      	ldr	r2, [pc, #64]	@ (8008c90 <xPortStartScheduler+0xf0>)
 8008c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c54:	f000 f8dc 	bl	8008e10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c58:	4b0e      	ldr	r3, [pc, #56]	@ (8008c94 <xPortStartScheduler+0xf4>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c5e:	f000 f8fb 	bl	8008e58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c62:	4b0d      	ldr	r3, [pc, #52]	@ (8008c98 <xPortStartScheduler+0xf8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a0c      	ldr	r2, [pc, #48]	@ (8008c98 <xPortStartScheduler+0xf8>)
 8008c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c6e:	f7ff ff83 	bl	8008b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c72:	f7fe ff13 	bl	8007a9c <vTaskSwitchContext>
	prvTaskExitError();
 8008c76:	f7ff ff33 	bl	8008ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	e000e400 	.word	0xe000e400
 8008c88:	20001524 	.word	0x20001524
 8008c8c:	20001528 	.word	0x20001528
 8008c90:	e000ed20 	.word	0xe000ed20
 8008c94:	20000028 	.word	0x20000028
 8008c98:	e000ef34 	.word	0xe000ef34

08008c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	b672      	cpsid	i
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	b662      	cpsie	i
 8008cb6:	607b      	str	r3, [r7, #4]
}
 8008cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cba:	4b11      	ldr	r3, [pc, #68]	@ (8008d00 <vPortEnterCritical+0x64>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8008d00 <vPortEnterCritical+0x64>)
 8008cc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d00 <vPortEnterCritical+0x64>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d112      	bne.n	8008cf2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <vPortEnterCritical+0x68>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00d      	beq.n	8008cf2 <vPortEnterCritical+0x56>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	b672      	cpsid	i
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	b662      	cpsie	i
 8008cea:	603b      	str	r3, [r7, #0]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <vPortEnterCritical+0x52>
	}
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20000028 	.word	0x20000028
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d0e:	4b13      	ldr	r3, [pc, #76]	@ (8008d5c <vPortExitCritical+0x54>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <vPortExitCritical+0x2a>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	b672      	cpsid	i
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	b662      	cpsie	i
 8008d2a:	607b      	str	r3, [r7, #4]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008d32:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <vPortExitCritical+0x54>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	4a08      	ldr	r2, [pc, #32]	@ (8008d5c <vPortExitCritical+0x54>)
 8008d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d3c:	4b07      	ldr	r3, [pc, #28]	@ (8008d5c <vPortExitCritical+0x54>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d105      	bne.n	8008d50 <vPortExitCritical+0x48>
 8008d44:	2300      	movs	r3, #0
 8008d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f383 8811 	msr	BASEPRI, r3
}
 8008d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	20000028 	.word	0x20000028

08008d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d60:	f3ef 8009 	mrs	r0, PSP
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	4b15      	ldr	r3, [pc, #84]	@ (8008dc0 <pxCurrentTCBConst>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	f01e 0f10 	tst.w	lr, #16
 8008d70:	bf08      	it	eq
 8008d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	6010      	str	r0, [r2, #0]
 8008d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d84:	b672      	cpsid	i
 8008d86:	f380 8811 	msr	BASEPRI, r0
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	b662      	cpsie	i
 8008d94:	f7fe fe82 	bl	8007a9c <vTaskSwitchContext>
 8008d98:	f04f 0000 	mov.w	r0, #0
 8008d9c:	f380 8811 	msr	BASEPRI, r0
 8008da0:	bc09      	pop	{r0, r3}
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	6808      	ldr	r0, [r1, #0]
 8008da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008daa:	f01e 0f10 	tst.w	lr, #16
 8008dae:	bf08      	it	eq
 8008db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008db4:	f380 8809 	msr	PSP, r0
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <pxCurrentTCBConst>:
 8008dc0:	20000ef8 	.word	0x20000ef8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop

08008dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd2:	b672      	cpsid	i
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	b662      	cpsie	i
 8008de2:	607b      	str	r3, [r7, #4]
}
 8008de4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008de6:	f7fe fd9d 	bl	8007924 <xTaskIncrementTick>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008df0:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <SysTick_Handler+0x44>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f383 8811 	msr	BASEPRI, r3
}
 8008e02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e10:	b480      	push	{r7}
 8008e12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e14:	4b0b      	ldr	r3, [pc, #44]	@ (8008e44 <vPortSetupTimerInterrupt+0x34>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e48 <vPortSetupTimerInterrupt+0x38>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e20:	4b0a      	ldr	r3, [pc, #40]	@ (8008e4c <vPortSetupTimerInterrupt+0x3c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a0a      	ldr	r2, [pc, #40]	@ (8008e50 <vPortSetupTimerInterrupt+0x40>)
 8008e26:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2a:	099b      	lsrs	r3, r3, #6
 8008e2c:	4a09      	ldr	r2, [pc, #36]	@ (8008e54 <vPortSetupTimerInterrupt+0x44>)
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e32:	4b04      	ldr	r3, [pc, #16]	@ (8008e44 <vPortSetupTimerInterrupt+0x34>)
 8008e34:	2207      	movs	r2, #7
 8008e36:	601a      	str	r2, [r3, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	e000e010 	.word	0xe000e010
 8008e48:	e000e018 	.word	0xe000e018
 8008e4c:	2000001c 	.word	0x2000001c
 8008e50:	10624dd3 	.word	0x10624dd3
 8008e54:	e000e014 	.word	0xe000e014

08008e58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e68 <vPortEnableVFP+0x10>
 8008e5c:	6801      	ldr	r1, [r0, #0]
 8008e5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e62:	6001      	str	r1, [r0, #0]
 8008e64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e66:	bf00      	nop
 8008e68:	e000ed88 	.word	0xe000ed88

08008e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e72:	f3ef 8305 	mrs	r3, IPSR
 8008e76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b0f      	cmp	r3, #15
 8008e7c:	d917      	bls.n	8008eae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee8 <vPortValidateInterruptPriority+0x7c>)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e88:	4b18      	ldr	r3, [pc, #96]	@ (8008eec <vPortValidateInterruptPriority+0x80>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	7afa      	ldrb	r2, [r7, #11]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d20d      	bcs.n	8008eae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	b672      	cpsid	i
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	b662      	cpsie	i
 8008ea6:	607b      	str	r3, [r7, #4]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008eae:	4b10      	ldr	r3, [pc, #64]	@ (8008ef0 <vPortValidateInterruptPriority+0x84>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef4 <vPortValidateInterruptPriority+0x88>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d90d      	bls.n	8008eda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	b672      	cpsid	i
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	b662      	cpsie	i
 8008ed2:	603b      	str	r3, [r7, #0]
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	e7fd      	b.n	8008ed6 <vPortValidateInterruptPriority+0x6a>
	}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	e000e3f0 	.word	0xe000e3f0
 8008eec:	20001524 	.word	0x20001524
 8008ef0:	e000ed0c 	.word	0xe000ed0c
 8008ef4:	20001528 	.word	0x20001528

08008ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	@ 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f04:	f7fe fc50 	bl	80077a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f08:	4b5d      	ldr	r3, [pc, #372]	@ (8009080 <pvPortMalloc+0x188>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f10:	f000 f920 	bl	8009154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f14:	4b5b      	ldr	r3, [pc, #364]	@ (8009084 <pvPortMalloc+0x18c>)
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 8094 	bne.w	800904a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d020      	beq.n	8008f6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008f28:	2208      	movs	r2, #8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d017      	beq.n	8008f6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f023 0307 	bic.w	r3, r3, #7
 8008f40:	3308      	adds	r3, #8
 8008f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <pvPortMalloc+0x72>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	b672      	cpsid	i
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	b662      	cpsie	i
 8008f62:	617b      	str	r3, [r7, #20]
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d06c      	beq.n	800904a <pvPortMalloc+0x152>
 8008f70:	4b45      	ldr	r3, [pc, #276]	@ (8009088 <pvPortMalloc+0x190>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d867      	bhi.n	800904a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f7a:	4b44      	ldr	r3, [pc, #272]	@ (800908c <pvPortMalloc+0x194>)
 8008f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f7e:	4b43      	ldr	r3, [pc, #268]	@ (800908c <pvPortMalloc+0x194>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f84:	e004      	b.n	8008f90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d903      	bls.n	8008fa2 <pvPortMalloc+0xaa>
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f1      	bne.n	8008f86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fa2:	4b37      	ldr	r3, [pc, #220]	@ (8009080 <pvPortMalloc+0x188>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d04e      	beq.n	800904a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	4413      	add	r3, r2
 8008fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	1ad2      	subs	r2, r2, r3
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d922      	bls.n	8009014 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00d      	beq.n	8008ffc <pvPortMalloc+0x104>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe4:	b672      	cpsid	i
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	b662      	cpsie	i
 8008ff4:	613b      	str	r3, [r7, #16]
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800900e:	69b8      	ldr	r0, [r7, #24]
 8009010:	f000 f902 	bl	8009218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009014:	4b1c      	ldr	r3, [pc, #112]	@ (8009088 <pvPortMalloc+0x190>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	4a1a      	ldr	r2, [pc, #104]	@ (8009088 <pvPortMalloc+0x190>)
 8009020:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009022:	4b19      	ldr	r3, [pc, #100]	@ (8009088 <pvPortMalloc+0x190>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b1a      	ldr	r3, [pc, #104]	@ (8009090 <pvPortMalloc+0x198>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d203      	bcs.n	8009036 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800902e:	4b16      	ldr	r3, [pc, #88]	@ (8009088 <pvPortMalloc+0x190>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a17      	ldr	r2, [pc, #92]	@ (8009090 <pvPortMalloc+0x198>)
 8009034:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	4b12      	ldr	r3, [pc, #72]	@ (8009084 <pvPortMalloc+0x18c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	431a      	orrs	r2, r3
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800904a:	f7fe fbbb 	bl	80077c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00d      	beq.n	8009074 <pvPortMalloc+0x17c>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905c:	b672      	cpsid	i
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	b662      	cpsie	i
 800906c:	60fb      	str	r3, [r7, #12]
}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	e7fd      	b.n	8009070 <pvPortMalloc+0x178>
	return pvReturn;
 8009074:	69fb      	ldr	r3, [r7, #28]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3728      	adds	r7, #40	@ 0x28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20005134 	.word	0x20005134
 8009084:	20005140 	.word	0x20005140
 8009088:	20005138 	.word	0x20005138
 800908c:	2000512c 	.word	0x2000512c
 8009090:	2000513c 	.word	0x2000513c

08009094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d04e      	beq.n	8009144 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090a6:	2308      	movs	r3, #8
 80090a8:	425b      	negs	r3, r3
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4413      	add	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	4b24      	ldr	r3, [pc, #144]	@ (800914c <vPortFree+0xb8>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4013      	ands	r3, r2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <vPortFree+0x4a>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	b672      	cpsid	i
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	b662      	cpsie	i
 80090d6:	60fb      	str	r3, [r7, #12]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00d      	beq.n	8009102 <vPortFree+0x6e>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	b672      	cpsid	i
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	b662      	cpsie	i
 80090fa:	60bb      	str	r3, [r7, #8]
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	e7fd      	b.n	80090fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	4b11      	ldr	r3, [pc, #68]	@ (800914c <vPortFree+0xb8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4013      	ands	r3, r2
 800910c:	2b00      	cmp	r3, #0
 800910e:	d019      	beq.n	8009144 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d115      	bne.n	8009144 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	4b0b      	ldr	r3, [pc, #44]	@ (800914c <vPortFree+0xb8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	43db      	mvns	r3, r3
 8009122:	401a      	ands	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009128:	f7fe fb3e 	bl	80077a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <vPortFree+0xbc>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4413      	add	r3, r2
 8009136:	4a06      	ldr	r2, [pc, #24]	@ (8009150 <vPortFree+0xbc>)
 8009138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800913a:	6938      	ldr	r0, [r7, #16]
 800913c:	f000 f86c 	bl	8009218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009140:	f7fe fb40 	bl	80077c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009144:	bf00      	nop
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20005140 	.word	0x20005140
 8009150:	20005138 	.word	0x20005138

08009154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800915a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800915e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009160:	4b27      	ldr	r3, [pc, #156]	@ (8009200 <prvHeapInit+0xac>)
 8009162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00c      	beq.n	8009188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3307      	adds	r3, #7
 8009172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0307 	bic.w	r3, r3, #7
 800917a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	4a1f      	ldr	r2, [pc, #124]	@ (8009200 <prvHeapInit+0xac>)
 8009184:	4413      	add	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800918c:	4a1d      	ldr	r2, [pc, #116]	@ (8009204 <prvHeapInit+0xb0>)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009192:	4b1c      	ldr	r3, [pc, #112]	@ (8009204 <prvHeapInit+0xb0>)
 8009194:	2200      	movs	r2, #0
 8009196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091a0:	2208      	movs	r2, #8
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4a15      	ldr	r2, [pc, #84]	@ (8009208 <prvHeapInit+0xb4>)
 80091b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091b6:	4b14      	ldr	r3, [pc, #80]	@ (8009208 <prvHeapInit+0xb4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2200      	movs	r2, #0
 80091bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091be:	4b12      	ldr	r3, [pc, #72]	@ (8009208 <prvHeapInit+0xb4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <prvHeapInit+0xb4>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	4a0a      	ldr	r2, [pc, #40]	@ (800920c <prvHeapInit+0xb8>)
 80091e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	4a09      	ldr	r2, [pc, #36]	@ (8009210 <prvHeapInit+0xbc>)
 80091ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091ec:	4b09      	ldr	r3, [pc, #36]	@ (8009214 <prvHeapInit+0xc0>)
 80091ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80091f2:	601a      	str	r2, [r3, #0]
}
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	2000152c 	.word	0x2000152c
 8009204:	2000512c 	.word	0x2000512c
 8009208:	20005134 	.word	0x20005134
 800920c:	2000513c 	.word	0x2000513c
 8009210:	20005138 	.word	0x20005138
 8009214:	20005140 	.word	0x20005140

08009218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009220:	4b28      	ldr	r3, [pc, #160]	@ (80092c4 <prvInsertBlockIntoFreeList+0xac>)
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e002      	b.n	800922c <prvInsertBlockIntoFreeList+0x14>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d8f7      	bhi.n	8009226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	4413      	add	r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d108      	bne.n	800925a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	441a      	add	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	441a      	add	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d118      	bne.n	80092a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4b15      	ldr	r3, [pc, #84]	@ (80092c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d00d      	beq.n	8009296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	441a      	add	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e008      	b.n	80092a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009296:	4b0c      	ldr	r3, [pc, #48]	@ (80092c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e003      	b.n	80092a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d002      	beq.n	80092b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	2000512c 	.word	0x2000512c
 80092c8:	20005134 	.word	0x20005134

080092cc <memset>:
 80092cc:	4402      	add	r2, r0
 80092ce:	4603      	mov	r3, r0
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d100      	bne.n	80092d6 <memset+0xa>
 80092d4:	4770      	bx	lr
 80092d6:	f803 1b01 	strb.w	r1, [r3], #1
 80092da:	e7f9      	b.n	80092d0 <memset+0x4>

080092dc <_reclaim_reent>:
 80092dc:	4b29      	ldr	r3, [pc, #164]	@ (8009384 <_reclaim_reent+0xa8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4283      	cmp	r3, r0
 80092e2:	b570      	push	{r4, r5, r6, lr}
 80092e4:	4604      	mov	r4, r0
 80092e6:	d04b      	beq.n	8009380 <_reclaim_reent+0xa4>
 80092e8:	69c3      	ldr	r3, [r0, #28]
 80092ea:	b1ab      	cbz	r3, 8009318 <_reclaim_reent+0x3c>
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	b16b      	cbz	r3, 800930c <_reclaim_reent+0x30>
 80092f0:	2500      	movs	r5, #0
 80092f2:	69e3      	ldr	r3, [r4, #28]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	5959      	ldr	r1, [r3, r5]
 80092f8:	2900      	cmp	r1, #0
 80092fa:	d13b      	bne.n	8009374 <_reclaim_reent+0x98>
 80092fc:	3504      	adds	r5, #4
 80092fe:	2d80      	cmp	r5, #128	@ 0x80
 8009300:	d1f7      	bne.n	80092f2 <_reclaim_reent+0x16>
 8009302:	69e3      	ldr	r3, [r4, #28]
 8009304:	4620      	mov	r0, r4
 8009306:	68d9      	ldr	r1, [r3, #12]
 8009308:	f000 f872 	bl	80093f0 <_free_r>
 800930c:	69e3      	ldr	r3, [r4, #28]
 800930e:	6819      	ldr	r1, [r3, #0]
 8009310:	b111      	cbz	r1, 8009318 <_reclaim_reent+0x3c>
 8009312:	4620      	mov	r0, r4
 8009314:	f000 f86c 	bl	80093f0 <_free_r>
 8009318:	6961      	ldr	r1, [r4, #20]
 800931a:	b111      	cbz	r1, 8009322 <_reclaim_reent+0x46>
 800931c:	4620      	mov	r0, r4
 800931e:	f000 f867 	bl	80093f0 <_free_r>
 8009322:	69e1      	ldr	r1, [r4, #28]
 8009324:	b111      	cbz	r1, 800932c <_reclaim_reent+0x50>
 8009326:	4620      	mov	r0, r4
 8009328:	f000 f862 	bl	80093f0 <_free_r>
 800932c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800932e:	b111      	cbz	r1, 8009336 <_reclaim_reent+0x5a>
 8009330:	4620      	mov	r0, r4
 8009332:	f000 f85d 	bl	80093f0 <_free_r>
 8009336:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009338:	b111      	cbz	r1, 8009340 <_reclaim_reent+0x64>
 800933a:	4620      	mov	r0, r4
 800933c:	f000 f858 	bl	80093f0 <_free_r>
 8009340:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009342:	b111      	cbz	r1, 800934a <_reclaim_reent+0x6e>
 8009344:	4620      	mov	r0, r4
 8009346:	f000 f853 	bl	80093f0 <_free_r>
 800934a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800934c:	b111      	cbz	r1, 8009354 <_reclaim_reent+0x78>
 800934e:	4620      	mov	r0, r4
 8009350:	f000 f84e 	bl	80093f0 <_free_r>
 8009354:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009356:	b111      	cbz	r1, 800935e <_reclaim_reent+0x82>
 8009358:	4620      	mov	r0, r4
 800935a:	f000 f849 	bl	80093f0 <_free_r>
 800935e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009360:	b111      	cbz	r1, 8009368 <_reclaim_reent+0x8c>
 8009362:	4620      	mov	r0, r4
 8009364:	f000 f844 	bl	80093f0 <_free_r>
 8009368:	6a23      	ldr	r3, [r4, #32]
 800936a:	b14b      	cbz	r3, 8009380 <_reclaim_reent+0xa4>
 800936c:	4620      	mov	r0, r4
 800936e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009372:	4718      	bx	r3
 8009374:	680e      	ldr	r6, [r1, #0]
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f83a 	bl	80093f0 <_free_r>
 800937c:	4631      	mov	r1, r6
 800937e:	e7bb      	b.n	80092f8 <_reclaim_reent+0x1c>
 8009380:	bd70      	pop	{r4, r5, r6, pc}
 8009382:	bf00      	nop
 8009384:	2000002c 	.word	0x2000002c

08009388 <__libc_init_array>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	4d0d      	ldr	r5, [pc, #52]	@ (80093c0 <__libc_init_array+0x38>)
 800938c:	4c0d      	ldr	r4, [pc, #52]	@ (80093c4 <__libc_init_array+0x3c>)
 800938e:	1b64      	subs	r4, r4, r5
 8009390:	10a4      	asrs	r4, r4, #2
 8009392:	2600      	movs	r6, #0
 8009394:	42a6      	cmp	r6, r4
 8009396:	d109      	bne.n	80093ac <__libc_init_array+0x24>
 8009398:	4d0b      	ldr	r5, [pc, #44]	@ (80093c8 <__libc_init_array+0x40>)
 800939a:	4c0c      	ldr	r4, [pc, #48]	@ (80093cc <__libc_init_array+0x44>)
 800939c:	f000 f87e 	bl	800949c <_init>
 80093a0:	1b64      	subs	r4, r4, r5
 80093a2:	10a4      	asrs	r4, r4, #2
 80093a4:	2600      	movs	r6, #0
 80093a6:	42a6      	cmp	r6, r4
 80093a8:	d105      	bne.n	80093b6 <__libc_init_array+0x2e>
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
 80093ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b0:	4798      	blx	r3
 80093b2:	3601      	adds	r6, #1
 80093b4:	e7ee      	b.n	8009394 <__libc_init_array+0xc>
 80093b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ba:	4798      	blx	r3
 80093bc:	3601      	adds	r6, #1
 80093be:	e7f2      	b.n	80093a6 <__libc_init_array+0x1e>
 80093c0:	080095e4 	.word	0x080095e4
 80093c4:	080095e4 	.word	0x080095e4
 80093c8:	080095e4 	.word	0x080095e4
 80093cc:	080095e8 	.word	0x080095e8

080093d0 <__retarget_lock_acquire_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <__retarget_lock_release_recursive>:
 80093d2:	4770      	bx	lr

080093d4 <memcpy>:
 80093d4:	440a      	add	r2, r1
 80093d6:	4291      	cmp	r1, r2
 80093d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093dc:	d100      	bne.n	80093e0 <memcpy+0xc>
 80093de:	4770      	bx	lr
 80093e0:	b510      	push	{r4, lr}
 80093e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ea:	4291      	cmp	r1, r2
 80093ec:	d1f9      	bne.n	80093e2 <memcpy+0xe>
 80093ee:	bd10      	pop	{r4, pc}

080093f0 <_free_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4605      	mov	r5, r0
 80093f4:	2900      	cmp	r1, #0
 80093f6:	d041      	beq.n	800947c <_free_r+0x8c>
 80093f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fc:	1f0c      	subs	r4, r1, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfb8      	it	lt
 8009402:	18e4      	addlt	r4, r4, r3
 8009404:	f000 f83e 	bl	8009484 <__malloc_lock>
 8009408:	4a1d      	ldr	r2, [pc, #116]	@ (8009480 <_free_r+0x90>)
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	b933      	cbnz	r3, 800941c <_free_r+0x2c>
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	6014      	str	r4, [r2, #0]
 8009412:	4628      	mov	r0, r5
 8009414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009418:	f000 b83a 	b.w	8009490 <__malloc_unlock>
 800941c:	42a3      	cmp	r3, r4
 800941e:	d908      	bls.n	8009432 <_free_r+0x42>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	1821      	adds	r1, r4, r0
 8009424:	428b      	cmp	r3, r1
 8009426:	bf01      	itttt	eq
 8009428:	6819      	ldreq	r1, [r3, #0]
 800942a:	685b      	ldreq	r3, [r3, #4]
 800942c:	1809      	addeq	r1, r1, r0
 800942e:	6021      	streq	r1, [r4, #0]
 8009430:	e7ed      	b.n	800940e <_free_r+0x1e>
 8009432:	461a      	mov	r2, r3
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	b10b      	cbz	r3, 800943c <_free_r+0x4c>
 8009438:	42a3      	cmp	r3, r4
 800943a:	d9fa      	bls.n	8009432 <_free_r+0x42>
 800943c:	6811      	ldr	r1, [r2, #0]
 800943e:	1850      	adds	r0, r2, r1
 8009440:	42a0      	cmp	r0, r4
 8009442:	d10b      	bne.n	800945c <_free_r+0x6c>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	4401      	add	r1, r0
 8009448:	1850      	adds	r0, r2, r1
 800944a:	4283      	cmp	r3, r0
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	d1e0      	bne.n	8009412 <_free_r+0x22>
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	6053      	str	r3, [r2, #4]
 8009456:	4408      	add	r0, r1
 8009458:	6010      	str	r0, [r2, #0]
 800945a:	e7da      	b.n	8009412 <_free_r+0x22>
 800945c:	d902      	bls.n	8009464 <_free_r+0x74>
 800945e:	230c      	movs	r3, #12
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	e7d6      	b.n	8009412 <_free_r+0x22>
 8009464:	6820      	ldr	r0, [r4, #0]
 8009466:	1821      	adds	r1, r4, r0
 8009468:	428b      	cmp	r3, r1
 800946a:	bf04      	itt	eq
 800946c:	6819      	ldreq	r1, [r3, #0]
 800946e:	685b      	ldreq	r3, [r3, #4]
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	bf04      	itt	eq
 8009474:	1809      	addeq	r1, r1, r0
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	6054      	str	r4, [r2, #4]
 800947a:	e7ca      	b.n	8009412 <_free_r+0x22>
 800947c:	bd38      	pop	{r3, r4, r5, pc}
 800947e:	bf00      	nop
 8009480:	20005280 	.word	0x20005280

08009484 <__malloc_lock>:
 8009484:	4801      	ldr	r0, [pc, #4]	@ (800948c <__malloc_lock+0x8>)
 8009486:	f7ff bfa3 	b.w	80093d0 <__retarget_lock_acquire_recursive>
 800948a:	bf00      	nop
 800948c:	2000527c 	.word	0x2000527c

08009490 <__malloc_unlock>:
 8009490:	4801      	ldr	r0, [pc, #4]	@ (8009498 <__malloc_unlock+0x8>)
 8009492:	f7ff bf9e 	b.w	80093d2 <__retarget_lock_release_recursive>
 8009496:	bf00      	nop
 8009498:	2000527c 	.word	0x2000527c

0800949c <_init>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	bf00      	nop
 80094a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a2:	bc08      	pop	{r3}
 80094a4:	469e      	mov	lr, r3
 80094a6:	4770      	bx	lr

080094a8 <_fini>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	bf00      	nop
 80094ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ae:	bc08      	pop	{r3}
 80094b0:	469e      	mov	lr, r3
 80094b2:	4770      	bx	lr
