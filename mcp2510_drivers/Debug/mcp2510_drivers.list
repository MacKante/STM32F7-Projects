
mcp2510_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080059b0  080059b0  000069b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  00007074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a50  08005a50  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a50  08005a50  00006a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005a58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  20000074  08005acc  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  08005acc  00007cfc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019503  00000000  00000000  000070a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b0  00000000  00000000  000205a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00023958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001084  00000000  00000000  00024e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a05a  00000000  00000000  00025efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a607  00000000  00000000  0004ff56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107530  00000000  00000000  0006a55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  00171ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001775dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005998 	.word	0x08005998

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005998 	.word	0x08005998

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CAN_IC_READ_REGISTER>:
 * @param address: hex address of the register
 * 		  bufffer: to store value read
 * @retval None
 */
void CAN_IC_READ_REGISTER(uint8_t address, uint8_t* buffer, CANPeripheral *peripheral)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	73fb      	strb	r3, [r7, #15]
	// Packet includes 3 bytes
	// 1st byte: 0x03 (specifies as read instruction)
	// 2nd byte: address of register to read
	// 3rd byte: dont care byte
	uint8_t packet[3] = {0x03, address, 0x00};
 800053e:	2303      	movs	r3, #3
 8000540:	753b      	strb	r3, [r7, #20]
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	757b      	strb	r3, [r7, #21]
 8000546:	2300      	movs	r3, #0
 8000548:	75bb      	strb	r3, [r7, #22]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); // Initialize instruction by setting CS pin low
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	889b      	ldrh	r3, [r3, #4]
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	f001 fb47 	bl	8001be8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 2, 100U); //transmit
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6898      	ldr	r0, [r3, #8]
 800055e:	f107 0114 	add.w	r1, r7, #20
 8000562:	2364      	movs	r3, #100	@ 0x64
 8000564:	2202      	movs	r2, #2
 8000566:	f002 fee2 	bl	800332e <HAL_SPI_Transmit>
 800056a:	4603      	mov	r3, r0
 800056c:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(peripheral->hspi, buffer, 1, 100U); //receive register contents
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6898      	ldr	r0, [r3, #8]
 8000572:	2364      	movs	r3, #100	@ 0x64
 8000574:	2201      	movs	r2, #1
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	f003 f847 	bl	800360a <HAL_SPI_Receive>
 800057c:	4603      	mov	r3, r0
 800057e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); // Terminate instruction by setting CS pin high
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	889b      	ldrh	r3, [r3, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	f001 fb2c 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <CAN_IC_WRITE_REGISTER>:
 * @param address: hex address of the register
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER(uint8_t address, uint8_t value, CANPeripheral *peripheral)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	460b      	mov	r3, r1
 80005a6:	71bb      	strb	r3, [r7, #6]
	// Packet includes 3 bytes
	// 1st byte: 0x02 (specifies as write instruction)
	// 2nd byte: address of register to write to
	// 3rd byte: value to write
	uint8_t packet[3] = {0x02, address, value};
 80005a8:	2302      	movs	r3, #2
 80005aa:	733b      	strb	r3, [r7, #12]
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	737b      	strb	r3, [r7, #13]
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); //set CS pin low
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	f001 fb12 	bl	8001be8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 3, 100U);	//transmit
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	6898      	ldr	r0, [r3, #8]
 80005c8:	f107 010c 	add.w	r1, r7, #12
 80005cc:	2364      	movs	r3, #100	@ 0x64
 80005ce:	2203      	movs	r2, #3
 80005d0:	f002 fead 	bl	800332e <HAL_SPI_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); //set CS pin high
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f001 fb00 	bl	8001be8 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <CAN_IC_WRITE_REGISTER_BITWISE>:
 * 		  mask: bit mask
 * 		  value: value to be written to the register
 * @retval None
 */
void CAN_IC_WRITE_REGISTER_BITWISE(uint8_t address, uint8_t mask, uint8_t value, CANPeripheral *peripheral)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	460b      	mov	r3, r1
 80005fe:	71bb      	strb	r3, [r7, #6]
 8000600:	4613      	mov	r3, r2
 8000602:	717b      	strb	r3, [r7, #5]
	// 0x05 specifies bit-write instruction
	// mask specifies which bits can be modified (1 means bit can be modified)
	uint8_t packet[4] = {0x05, address, mask, value};
 8000604:	2305      	movs	r3, #5
 8000606:	723b      	strb	r3, [r7, #8]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	727b      	strb	r3, [r7, #9]
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	72bb      	strb	r3, [r7, #10]
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET); //set CS pin low
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	889b      	ldrh	r3, [r3, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	f001 fae2 	bl	8001be8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, packet, 4, 100U); //transmit
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	6898      	ldr	r0, [r3, #8]
 8000628:	f107 0108 	add.w	r1, r7, #8
 800062c:	2364      	movs	r3, #100	@ 0x64
 800062e:	2204      	movs	r2, #4
 8000630:	f002 fe7d 	bl	800332e <HAL_SPI_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET); //set CS pin high
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	889b      	ldrh	r3, [r3, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	f001 fad0 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <ConfigureCANSPI>:
  * @retval None
  * Configuration is as close to Elysia's CAN configuration whenever possible
  * TODO: add configuration verification and return value accordingly
  */
void ConfigureCANSPI(CANPeripheral *peripheral)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	uint8_t resetCommand = 0xc0; //instruction to reset IC to default
 8000658:	23c0      	movs	r3, #192	@ 0xc0
 800065a:	72fb      	strb	r3, [r7, #11]
	uint8_t CONFIG_CNF1 = 0x00; //BRP = 0 to make tq = 250ns and a SJW of 1Tq
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
	uint8_t CONFIG_CNF2 = 0xd8; //PRSEG = 0, PHSEG1 = 3, SAM = 0, BTLMODE = 1
 8000660:	23d8      	movs	r3, #216	@ 0xd8
 8000662:	73bb      	strb	r3, [r7, #14]
	uint8_t CONFIG_CNF3 = 0x01; //WAFKIL disabled, PHSEG2 = 2 (BTL enabled) but PHSEG = 1 makes it backwards compatible???? wat
 8000664:	2301      	movs	r3, #1
 8000666:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	889b      	ldrh	r3, [r3, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	4619      	mov	r1, r3
 8000674:	f001 fab8 	bl	8001be8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(peripheral->hspi, &resetCommand, 1, 100U);  //reset IC to default
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6898      	ldr	r0, [r3, #8]
 800067c:	f107 010b 	add.w	r1, r7, #11
 8000680:	2364      	movs	r3, #100	@ 0x64
 8000682:	2201      	movs	r2, #1
 8000684:	f002 fe53 	bl	800332e <HAL_SPI_Transmit>
 8000688:	4603      	mov	r3, r0
 800068a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	889b      	ldrh	r3, [r3, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f001 faa6 	bl	8001be8 <HAL_GPIO_WritePin>

	CAN_IC_WRITE_REGISTER(0x0f, 0x80, peripheral); //Ensure IC is in configuration mode
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	200f      	movs	r0, #15
 80006a2:	f7ff ff79 	bl	8000598 <CAN_IC_WRITE_REGISTER>

	uint8_t CANSTAT_BUF = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	72bb      	strb	r3, [r7, #10]
	while (CANSTAT_BUF != 0x80) {
 80006aa:	e006      	b.n	80006ba <ConfigureCANSPI+0x6a>
		CAN_IC_READ_REGISTER(0x0E, &CANSTAT_BUF, peripheral);
 80006ac:	f107 030a 	add.w	r3, r7, #10
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4619      	mov	r1, r3
 80006b4:	200e      	movs	r0, #14
 80006b6:	f7ff ff3b 	bl	8000530 <CAN_IC_READ_REGISTER>
	while (CANSTAT_BUF != 0x80) {
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	2b80      	cmp	r3, #128	@ 0x80
 80006be:	d1f5      	bne.n	80006ac <ConfigureCANSPI+0x5c>
	}

	CAN_IC_WRITE_REGISTER(CNF1, CONFIG_CNF1, peripheral); //configure CNF1
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4619      	mov	r1, r3
 80006c6:	202a      	movs	r0, #42	@ 0x2a
 80006c8:	f7ff ff66 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF2, CONFIG_CNF2, peripheral); //configure CNF2
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2029      	movs	r0, #41	@ 0x29
 80006d4:	f7ff ff60 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CNF3, CONFIG_CNF3, peripheral); //configure CNF3
 80006d8:	7b7b      	ldrb	r3, [r7, #13]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4619      	mov	r1, r3
 80006de:	2028      	movs	r0, #40	@ 0x28
 80006e0:	f7ff ff5a 	bl	8000598 <CAN_IC_WRITE_REGISTER>

	CAN_IC_WRITE_REGISTER(CANINTE, 0xff, peripheral); 	//configure interrupts, currently enable error and and wakeup INT
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	21ff      	movs	r1, #255	@ 0xff
 80006e8:	202b      	movs	r0, #43	@ 0x2b
 80006ea:	f7ff ff55 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(CANINTF, 0x00, peripheral); 	//clear INTE flags
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	2100      	movs	r1, #0
 80006f2:	202c      	movs	r0, #44	@ 0x2c
 80006f4:	f7ff ff50 	bl	8000598 <CAN_IC_WRITE_REGISTER>
									   		//this should be a bit-wise clear in any other case to avoid unintentionally clearing flags

	CAN_IC_WRITE_REGISTER(0x0c, 0x0f, peripheral); //set up RX0BF and RX1BF as interrupt pins
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	210f      	movs	r1, #15
 80006fc:	200c      	movs	r0, #12
 80006fe:	f7ff ff4b 	bl	8000598 <CAN_IC_WRITE_REGISTER>

	CAN_IC_WRITE_REGISTER(RXB0CTRL, 0x60, peripheral); //accept any message on buffer 0
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	2160      	movs	r1, #96	@ 0x60
 8000706:	2060      	movs	r0, #96	@ 0x60
 8000708:	f7ff ff46 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(RXB1CTRL, 0x60, peripheral); //accept any message on buffer 1
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	2160      	movs	r1, #96	@ 0x60
 8000710:	2070      	movs	r0, #112	@ 0x70
 8000712:	f7ff ff41 	bl	8000598 <CAN_IC_WRITE_REGISTER>

	// CAN_IC_WRITE_REGISTER(0x0f, 0x04, peripheral); //Put IC in normal operation mode with CLKOUT pin enable and 1:1 prescaler

	#if CAN_TEST_SETUP
	CAN_IC_WRITE_REGISTER(0x0F, 0x44, peripheral);	// Put IC in loop-back mode for testing as well as enable CLKOUT pin with 1:1 prescaler
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	2144      	movs	r1, #68	@ 0x44
 800071a:	200f      	movs	r0, #15
 800071c:	f7ff ff3c 	bl	8000598 <CAN_IC_WRITE_REGISTER>

	while (CANSTAT_BUF != 0x40) {
 8000720:	e006      	b.n	8000730 <ConfigureCANSPI+0xe0>
		CAN_IC_READ_REGISTER(0x0E, &CANSTAT_BUF, peripheral);
 8000722:	f107 030a 	add.w	r3, r7, #10
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4619      	mov	r1, r3
 800072a:	200e      	movs	r0, #14
 800072c:	f7ff ff00 	bl	8000530 <CAN_IC_READ_REGISTER>
	while (CANSTAT_BUF != 0x40) {
 8000730:	7abb      	ldrb	r3, [r7, #10]
 8000732:	2b40      	cmp	r3, #64	@ 0x40
 8000734:	d1f5      	bne.n	8000722 <ConfigureCANSPI+0xd2>
	}

	#endif
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <checkAvailableTXChannel>:

/*-------------------------------------------------------------------------------------------*/

uint8_t checkAvailableTXChannel(CANPeripheral *peripheral)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint32_t prevWakeTime = xTaskGetTickCount(); 	//Delay is fine if we have a CanTxGatekeeperTask
 8000748:	f004 ff30 	bl	80055ac <xTaskGetTickCount>
 800074c:	60f8      	str	r0, [r7, #12]
    {
        uint8_t TXB0Status;
        uint8_t TXB1Status;
        uint8_t TXB2Status;

        CAN_IC_READ_REGISTER(TXB0CTRL, &TXB0Status, peripheral);
 800074e:	f107 030b 	add.w	r3, r7, #11
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4619      	mov	r1, r3
 8000756:	2030      	movs	r0, #48	@ 0x30
 8000758:	f7ff feea 	bl	8000530 <CAN_IC_READ_REGISTER>
        TXB0Status = TXB0Status >> 3; //Not masking out bits
 800075c:	7afb      	ldrb	r3, [r7, #11]
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	72fb      	strb	r3, [r7, #11]

        if (!TXB0Status) {
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <checkAvailableTXChannel+0x2e>
            return 0;
 800076a:	2300      	movs	r3, #0
 800076c:	e023      	b.n	80007b6 <checkAvailableTXChannel+0x76>
        }

        CAN_IC_READ_REGISTER(TXB1CTRL, &TXB1Status, peripheral);
 800076e:	f107 030a 	add.w	r3, r7, #10
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4619      	mov	r1, r3
 8000776:	2040      	movs	r0, #64	@ 0x40
 8000778:	f7ff feda 	bl	8000530 <CAN_IC_READ_REGISTER>
        TXB1Status = TXB1Status >> 3; //Not masking out bits
 800077c:	7abb      	ldrb	r3, [r7, #10]
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	72bb      	strb	r3, [r7, #10]

        if (!TXB1Status) {
 8000784:	7abb      	ldrb	r3, [r7, #10]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <checkAvailableTXChannel+0x4e>
            return 1;
 800078a:	2301      	movs	r3, #1
 800078c:	e013      	b.n	80007b6 <checkAvailableTXChannel+0x76>
        }

        CAN_IC_READ_REGISTER(TXB2CTRL, &TXB2Status, peripheral);
 800078e:	f107 0309 	add.w	r3, r7, #9
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4619      	mov	r1, r3
 8000796:	2050      	movs	r0, #80	@ 0x50
 8000798:	f7ff feca 	bl	8000530 <CAN_IC_READ_REGISTER>
        TXB2Status = TXB2Status >> 3; //Not masking out bits
 800079c:	7a7b      	ldrb	r3, [r7, #9]
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	727b      	strb	r3, [r7, #9]

        if (!TXB2Status) {
 80007a4:	7a7b      	ldrb	r3, [r7, #9]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <checkAvailableTXChannel+0x6e>
            return 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	e003      	b.n	80007b6 <checkAvailableTXChannel+0x76>
        }

        prevWakeTime += TX_CHANNEL_CHECK_DELAY;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
    {
 80007b4:	e7cb      	b.n	800074e <checkAvailableTXChannel+0xe>
        // osDelayUntil(prevWakeTime);

    }
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <sendExtendedCANMessage>:
  * @brief send CAN message with extended identifier
  * @param None
  * @retval None
  */
uint8_t sendExtendedCANMessage(CANMsg *msg, CANPeripheral *peripheral)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
	// uint8_t initialBufferAddress = TXB0CTRL + 16*(channel); //TXB0CTRL for channel 1, TXB1CTRL for channel 2, TXB2CTRL for channel 3
    uint8_t channel = checkAvailableTXChannel(peripheral);
 80007c8:	6838      	ldr	r0, [r7, #0]
 80007ca:	f7ff ffb9 	bl	8000740 <checkAvailableTXChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	74fb      	strb	r3, [r7, #19]
	uint8_t initialBufferAddress = TXB0CTRL + 16*(channel);
 80007d2:	7cfb      	ldrb	r3, [r7, #19]
 80007d4:	3303      	adds	r3, #3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	74bb      	strb	r3, [r7, #18]

	// delete this later
    //osMessageQueueGet(CANTxMessageQueue, msg, NULL, osWaitForever);
    //todo: FIX THIS CHANNEL!

	uint8_t sendCommand = 0x80 +  (1 << channel); //instruction to send CAN message on channel
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	2201      	movs	r2, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3b80      	subs	r3, #128	@ 0x80
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	72fb      	strb	r3, [r7, #11]

	uint8_t TXBNSIDH = (msg->extendedID >> 21) & 0xFF;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80007f2:	f04f 0200 	mov.w	r2, #0
 80007f6:	f04f 0300 	mov.w	r3, #0
 80007fa:	0d42      	lsrs	r2, r0, #21
 80007fc:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8000800:	0d4b      	lsrs	r3, r1, #21
 8000802:	4613      	mov	r3, r2
 8000804:	747b      	strb	r3, [r7, #17]
	uint8_t TXBNSIDL = (((msg->extendedID >> 18) & 0x07) << 5) | 0x08 | ((msg->ID >> 16) & 0x03);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800080c:	f04f 0200 	mov.w	r2, #0
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	0c82      	lsrs	r2, r0, #18
 8000816:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800081a:	0c8b      	lsrs	r3, r1, #18
 800081c:	b2d3      	uxtb	r3, r2
 800081e:	015b      	lsls	r3, r3, #5
 8000820:	b2da      	uxtb	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	885b      	ldrh	r3, [r3, #2]
 8000826:	141b      	asrs	r3, r3, #16
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	743b      	strb	r3, [r7, #16]
	uint8_t TXBNEID8 = (msg->extendedID >> 8) & 0xFF;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000840:	f04f 0200 	mov.w	r2, #0
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	0a02      	lsrs	r2, r0, #8
 800084a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800084e:	0a0b      	lsrs	r3, r1, #8
 8000850:	4613      	mov	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t TXBNEID0 = msg->extendedID & 0xFF;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800085a:	4613      	mov	r3, r2
 800085c:	73bb      	strb	r3, [r7, #14]
	uint8_t TXBNDLC = msg->DLC & 0x0F;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	737b      	strb	r3, [r7, #13]

	CAN_IC_WRITE_REGISTER(initialBufferAddress + 1, TXBNSIDH, peripheral); // SD 10-3
 8000868:	7cbb      	ldrb	r3, [r7, #18]
 800086a:	3301      	adds	r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	7c79      	ldrb	r1, [r7, #17]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe90 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 2, TXBNSIDL, peripheral); // SD 2-0, ED 17-16
 8000878:	7cbb      	ldrb	r3, [r7, #18]
 800087a:	3302      	adds	r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	7c39      	ldrb	r1, [r7, #16]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe88 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 3, TXBNEID8, peripheral); // ED 15-8
 8000888:	7cbb      	ldrb	r3, [r7, #18]
 800088a:	3303      	adds	r3, #3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	7bf9      	ldrb	r1, [r7, #15]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe80 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 4, TXBNEID0, peripheral); // ED 7-0
 8000898:	7cbb      	ldrb	r3, [r7, #18]
 800089a:	3304      	adds	r3, #4
 800089c:	b2db      	uxtb	r3, r3
 800089e:	7bb9      	ldrb	r1, [r7, #14]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe78 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	CAN_IC_WRITE_REGISTER(initialBufferAddress + 5, TXBNDLC, peripheral);  // DLC
 80008a8:	7cbb      	ldrb	r3, [r7, #18]
 80008aa:	3305      	adds	r3, #5
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	7b79      	ldrb	r1, [r7, #13]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe70 	bl	8000598 <CAN_IC_WRITE_REGISTER>

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 80008b8:	7cbb      	ldrb	r3, [r7, #18]
 80008ba:	3306      	adds	r3, #6
 80008bc:	733b      	strb	r3, [r7, #12]
	for(int i = 0; i < msg->DLC; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e010      	b.n	80008e6 <sendExtendedCANMessage+0x128>
	{
		CAN_IC_WRITE_REGISTER(initialDataBufferAddress + i, msg->data[i], peripheral); //write to relevant data registers
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	7b3b      	ldrb	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	b2d8      	uxtb	r0, r3
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	3310      	adds	r3, #16
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	f7ff fe5c 	bl	8000598 <CAN_IC_WRITE_REGISTER>
	for(int i = 0; i < msg->DLC; i++)
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	4293      	cmp	r3, r2
 80008f0:	dbe8      	blt.n	80008c4 <sendExtendedCANMessage+0x106>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(initialBufferAddress, 0x03, 0x03, peripheral); //set transmit buffer priority to 3 (max)
 80008f2:	7cb8      	ldrb	r0, [r7, #18]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2203      	movs	r2, #3
 80008f8:	2103      	movs	r1, #3
 80008fa:	f7ff fe79 	bl	80005f0 <CAN_IC_WRITE_REGISTER_BITWISE>

	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_RESET);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	f001 f96d 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(peripheral->hspi, &sendCommand, 1, 100U);  //Send command to transmit
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	6898      	ldr	r0, [r3, #8]
 8000912:	f107 010b 	add.w	r1, r7, #11
 8000916:	2364      	movs	r3, #100	@ 0x64
 8000918:	2201      	movs	r2, #1
 800091a:	f002 fd08 	bl	800332e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(peripheral->CS_PORT, peripheral->CS_PIN, GPIO_PIN_SET);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	889b      	ldrh	r3, [r3, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	f001 f95d 	bl	8001be8 <HAL_GPIO_WritePin>
}
 800092e:	bf00      	nop
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <receiveCANMessage>:
  * @brief Receive CAN message
  * @param None
  * @retval None
  */
void receiveCANMessage(uint8_t channel, uint32_t* ID, uint8_t* DLC, uint8_t* data, CANPeripheral *peripheral)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
	uint8_t initialBufferAddress = RXB0CTRL + 16*(channel); //RXB0CTRL for channel 1, RXB1CTRL for channel 2
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	3306      	adds	r3, #6
 800094c:	b2db      	uxtb	r3, r3
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	76fb      	strb	r3, [r7, #27]

	uint8_t RXBNSIDH = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	767b      	strb	r3, [r7, #25]
	uint8_t RXBNSIDL = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	763b      	strb	r3, [r7, #24]
	uint8_t RXBDLC = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	75fb      	strb	r3, [r7, #23]

	CAN_IC_READ_REGISTER(initialBufferAddress + 1, &RXBNSIDH, peripheral); // SD 10-3
 800095e:	7efb      	ldrb	r3, [r7, #27]
 8000960:	3301      	adds	r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f107 0119 	add.w	r1, r7, #25
 8000968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fde0 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 2, &RXBNSIDL, peripheral); //SD 2-0, IDE, ED 17-16
 8000970:	7efb      	ldrb	r3, [r7, #27]
 8000972:	3302      	adds	r3, #2
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f107 0118 	add.w	r1, r7, #24
 800097a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fdd7 	bl	8000530 <CAN_IC_READ_REGISTER>
	CAN_IC_READ_REGISTER(initialBufferAddress + 5, &RXBDLC, peripheral);   //DLC
 8000982:	7efb      	ldrb	r3, [r7, #27]
 8000984:	3305      	adds	r3, #5
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f107 0117 	add.w	r1, r7, #23
 800098c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdce 	bl	8000530 <CAN_IC_READ_REGISTER>

	if(RXBNSIDL & 0x08)	// Check RXBmSIDL.IDE to verify if CAN message has extended identifier
 8000994:	7e3b      	ldrb	r3, [r7, #24]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d02c      	beq.n	80009f8 <receiveCANMessage+0xc0>
	{
		uint8_t RXBNEID8 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	75bb      	strb	r3, [r7, #22]
		uint8_t RXBNEID0 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	757b      	strb	r3, [r7, #21]

		CAN_IC_READ_REGISTER(initialBufferAddress + 3, &RXBNEID8, peripheral); //ED 15-8
 80009a6:	7efb      	ldrb	r3, [r7, #27]
 80009a8:	3303      	adds	r3, #3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f107 0116 	add.w	r1, r7, #22
 80009b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdbc 	bl	8000530 <CAN_IC_READ_REGISTER>
		CAN_IC_READ_REGISTER(initialBufferAddress + 4, &RXBNEID0, peripheral); //ED 7-0
 80009b8:	7efb      	ldrb	r3, [r7, #27]
 80009ba:	3304      	adds	r3, #4
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f107 0115 	add.w	r1, r7, #21
 80009c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fdb3 	bl	8000530 <CAN_IC_READ_REGISTER>

		*ID = (RXBNSIDH << 21) | (((RXBNSIDL >> 5) & 0x07) << 18) | ((RXBNSIDL & 0x03) << 16) | (RXBNEID8 << 8) | (RXBNEID0);
 80009ca:	7e7b      	ldrb	r3, [r7, #25]
 80009cc:	055a      	lsls	r2, r3, #21
 80009ce:	7e3b      	ldrb	r3, [r7, #24]
 80009d0:	095b      	lsrs	r3, r3, #5
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	049b      	lsls	r3, r3, #18
 80009d6:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80009da:	431a      	orrs	r2, r3
 80009dc:	7e3b      	ldrb	r3, [r7, #24]
 80009de:	041b      	lsls	r3, r3, #16
 80009e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009e4:	431a      	orrs	r2, r3
 80009e6:	7dbb      	ldrb	r3, [r7, #22]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4313      	orrs	r3, r2
 80009ec:	7d7a      	ldrb	r2, [r7, #21]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e008      	b.n	8000a0a <receiveCANMessage+0xd2>
	} else // CAN message is standard
	{
		*ID = (RXBNSIDH << 3) | (RXBNSIDL >> 5);
 80009f8:	7e7b      	ldrb	r3, [r7, #25]
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	7e3a      	ldrb	r2, [r7, #24]
 80009fe:	0952      	lsrs	r2, r2, #5
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	4313      	orrs	r3, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	601a      	str	r2, [r3, #0]
	}

	// Check data length of CAN message
	*DLC = RXBDLC & 0x0F; 
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	f003 030f 	and.w	r3, r3, #15
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	701a      	strb	r2, [r3, #0]
	if(*DLC > 8){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d902      	bls.n	8000a24 <receiveCANMessage+0xec>
		*DLC = 0;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
	}

	uint8_t initialDataBufferAddress = initialBufferAddress + 6;
 8000a24:	7efb      	ldrb	r3, [r7, #27]
 8000a26:	3306      	adds	r3, #6
 8000a28:	76bb      	strb	r3, [r7, #26]
	for(int i = 0; i < *DLC; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	e00e      	b.n	8000a4e <receiveCANMessage+0x116>
	{
		CAN_IC_READ_REGISTER(initialDataBufferAddress + i, &data[i], peripheral); //read from relevant data registers
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	7ebb      	ldrb	r3, [r7, #26]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2d8      	uxtb	r0, r3
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fd74 	bl	8000530 <CAN_IC_READ_REGISTER>
	for(int i = 0; i < *DLC; i++)
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	4293      	cmp	r3, r2
 8000a58:	dbea      	blt.n	8000a30 <receiveCANMessage+0xf8>
	}

	CAN_IC_WRITE_REGISTER_BITWISE(CANINTF, channel + 1, channel + 1, peripheral); //clear interrupts
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2d9      	uxtb	r1, r3
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a68:	202c      	movs	r0, #44	@ 0x2c
 8000a6a:	f7ff fdc1 	bl	80005f0 <CAN_IC_WRITE_REGISTER_BITWISE>
	return;
 8000a6e:	bf00      	nop
}
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b090      	sub	sp, #64	@ 0x40
 8000a7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7e:	f000 fdd4 	bl	800162a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a82:	f000 f87f 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f000 f9c7 	bl	8000e18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a8a:	f000 f967 	bl	8000d5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a8e:	f000 f995 	bl	8000dbc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000a92:	f000 f8e7 	bl	8000c64 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000a96:	f000 f923 	bl	8000ce0 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  ConfigureCANSPI(&peripheral1);
 8000a9a:	4835      	ldr	r0, [pc, #212]	@ (8000b70 <main+0xf8>)
 8000a9c:	f7ff fdd8 	bl	8000650 <ConfigureCANSPI>
  ConfigureCANSPI(&peripheral2);
 8000aa0:	4834      	ldr	r0, [pc, #208]	@ (8000b74 <main+0xfc>)
 8000aa2:	f7ff fdd5 	bl	8000650 <ConfigureCANSPI>

  CANMsg msg1 = {
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <main+0x100>)
 8000aa8:	f107 0418 	add.w	r4, r7, #24
 8000aac:	461d      	mov	r5, r3
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ab6:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CANINTFlag = 1;
 8000aba:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <main+0x104>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]

	  uint8_t buf1;
	  uint8_t buf2;
	  CAN_IC_READ_REGISTER(0xFE, &buf1, &peripheral1);
 8000ac0:	f107 0317 	add.w	r3, r7, #23
 8000ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8000b70 <main+0xf8>)
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	20fe      	movs	r0, #254	@ 0xfe
 8000aca:	f7ff fd31 	bl	8000530 <CAN_IC_READ_REGISTER>
	  CAN_IC_READ_REGISTER(0xFE, &buf2, &peripheral2);
 8000ace:	f107 0316 	add.w	r3, r7, #22
 8000ad2:	4a28      	ldr	r2, [pc, #160]	@ (8000b74 <main+0xfc>)
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	20fe      	movs	r0, #254	@ 0xfe
 8000ad8:	f7ff fd2a 	bl	8000530 <CAN_IC_READ_REGISTER>

	  uint8_t channel = sendExtendedCANMessage(&msg1, &peripheral1);
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	4923      	ldr	r1, [pc, #140]	@ (8000b70 <main+0xf8>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe6b 	bl	80007be <sendExtendedCANMessage>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  // read CANINTE, CANINTE.TXNIE must be set
	  CAN_IC_READ_REGISTER(CANINTE, &buf1, &peripheral1);
 8000aee:	f107 0317 	add.w	r3, r7, #23
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <main+0xf8>)
 8000af4:	4619      	mov	r1, r3
 8000af6:	202b      	movs	r0, #43	@ 0x2b
 8000af8:	f7ff fd1a 	bl	8000530 <CAN_IC_READ_REGISTER>

	  // read TXBNCTRL,
	  uint8_t TXBCTRLStatus;
	  CAN_IC_READ_REGISTER((TXB0CTRL + 16*(channel)), &buf2, &peripheral1);
 8000afc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b00:	3303      	adds	r3, #3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f107 0116 	add.w	r1, r7, #22
 8000b0c:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <main+0xf8>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fd0e 	bl	8000530 <CAN_IC_READ_REGISTER>

	  uint8_t CANINTFStatus;
	  CAN_IC_READ_REGISTER(CANINTF, &CANINTFStatus, &peripheral1);
 8000b14:	f107 0315 	add.w	r3, r7, #21
 8000b18:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <main+0xf8>)
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	202c      	movs	r0, #44	@ 0x2c
 8000b1e:	f7ff fd07 	bl	8000530 <CAN_IC_READ_REGISTER>

	  uint8_t EFLGStatus;
	  CAN_IC_READ_REGISTER(EFLG, &CANINTFStatus, &peripheral1);
 8000b22:	f107 0315 	add.w	r3, r7, #21
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <main+0xf8>)
 8000b28:	4619      	mov	r1, r3
 8000b2a:	202d      	movs	r0, #45	@ 0x2d
 8000b2c:	f7ff fd00 	bl	8000530 <CAN_IC_READ_REGISTER>

	  uint32_t ID = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	  uint8_t DLC = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
	  uint8_t data[8] = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]

	  receiveCANMessage(RXPin, &ID, &DLC, data, &peripheral1);
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <main+0x108>)
 8000b42:	7818      	ldrb	r0, [r3, #0]
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	f107 020f 	add.w	r2, r7, #15
 8000b4a:	f107 0110 	add.w	r1, r7, #16
 8000b4e:	4c08      	ldr	r4, [pc, #32]	@ (8000b70 <main+0xf8>)
 8000b50:	9400      	str	r4, [sp, #0]
 8000b52:	f7ff fef1 	bl	8000938 <receiveCANMessage>

	  CAN_IC_READ_REGISTER(0x0E, &buf1, &peripheral1);
 8000b56:	f107 0317 	add.w	r3, r7, #23
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <main+0xf8>)
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	200e      	movs	r0, #14
 8000b60:	f7ff fce6 	bl	8000530 <CAN_IC_READ_REGISTER>

	  RXPin = 2;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <main+0x108>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	701a      	strb	r2, [r3, #0]
  {
 8000b6a:	bf00      	nop
 8000b6c:	e7a5      	b.n	8000aba <main+0x42>
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	08005a18 	.word	0x08005a18
 8000b7c:	200006e9 	.word	0x200006e9
 8000b80:	200006e8 	.word	0x200006e8

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2234      	movs	r2, #52	@ 0x34
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fed4 	bl	8005940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <SystemClock_Config+0xd8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a2b      	ldr	r2, [pc, #172]	@ (8000c5c <SystemClock_Config+0xd8>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <SystemClock_Config+0xd8>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bc8:	4a25      	ldr	r2, [pc, #148]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bf4:	2360      	movs	r3, #96	@ 0x60
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f9b7 	bl	8001f7c <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c14:	f000 fa9c 	bl	8001150 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c18:	f001 f960 	bl	8001edc <HAL_PWREx_EnableOverDrive>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c22:	f000 fa95 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	2103      	movs	r1, #3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fc48 	bl	80024d8 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000c4e:	f000 fa7f 	bl	8001150 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	@ 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <MX_SPI1_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_SPI1_Init+0x74>)
 8000cc4:	f002 fa88 	bl	80031d8 <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f000 fa3f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000090 	.word	0x20000090
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <MX_SPI4_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000cec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cf0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000cfa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cfe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d12:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d16:	2220      	movs	r2, #32
 8000d18:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d2e:	2207      	movs	r2, #7
 8000d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_SPI4_Init+0x74>)
 8000d40:	f002 fa4a 	bl	80031d8 <HAL_SPI_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 fa01 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000f4 	.word	0x200000f4
 8000d58:	40013400 	.word	0x40013400

08000d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <MX_USART3_UART_Init+0x5c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_USART3_UART_Init+0x58>)
 8000da0:	f003 fc5a 	bl	8004658 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000daa:	f000 f9d1 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000158 	.word	0x20000158
 8000db8:	40004800 	.word	0x40004800

08000dbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2206      	movs	r2, #6
 8000dcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e00:	f000 ff24 	bl	8001c4c <HAL_PCD_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f9a1 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001e0 	.word	0x200001e0

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	@ 0x38
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	4ba6      	ldr	r3, [pc, #664]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4aa5      	ldr	r2, [pc, #660]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4ba3      	ldr	r3, [pc, #652]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	623b      	str	r3, [r7, #32]
 8000e44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4ba0      	ldr	r3, [pc, #640]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a9f      	ldr	r2, [pc, #636]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b9d      	ldr	r3, [pc, #628]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	4b9a      	ldr	r3, [pc, #616]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a99      	ldr	r2, [pc, #612]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b97      	ldr	r3, [pc, #604]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0320 	and.w	r3, r3, #32
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	4b94      	ldr	r3, [pc, #592]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a93      	ldr	r2, [pc, #588]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b91      	ldr	r3, [pc, #580]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b8e      	ldr	r3, [pc, #568]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a8d      	ldr	r2, [pc, #564]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b88      	ldr	r3, [pc, #544]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a87      	ldr	r2, [pc, #540]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b85      	ldr	r3, [pc, #532]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b82      	ldr	r3, [pc, #520]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a81      	ldr	r2, [pc, #516]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b7f      	ldr	r3, [pc, #508]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a7b      	ldr	r2, [pc, #492]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b79      	ldr	r3, [pc, #484]	@ (80010c8 <MX_GPIO_Init+0x2b0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4876      	ldr	r0, [pc, #472]	@ (80010cc <MX_GPIO_Init+0x2b4>)
 8000ef4:	f000 fe78 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2110      	movs	r1, #16
 8000efc:	4874      	ldr	r0, [pc, #464]	@ (80010d0 <MX_GPIO_Init+0x2b8>)
 8000efe:	f000 fe73 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f08:	4872      	ldr	r0, [pc, #456]	@ (80010d4 <MX_GPIO_Init+0x2bc>)
 8000f0a:	f000 fe6d 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2140      	movs	r1, #64	@ 0x40
 8000f12:	4871      	ldr	r0, [pc, #452]	@ (80010d8 <MX_GPIO_Init+0x2c0>)
 8000f14:	f000 fe68 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4867      	ldr	r0, [pc, #412]	@ (80010cc <MX_GPIO_Init+0x2b4>)
 8000f30:	f000 fcae 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4864      	ldr	r0, [pc, #400]	@ (80010dc <MX_GPIO_Init+0x2c4>)
 8000f4c:	f000 fca0 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN2_RX1BF_Pin CAN2_RX0BF_Pin CAN_RX1BF_Pin */
  GPIO_InitStruct.Pin = CAN2_RX1BF_Pin|CAN2_RX0BF_Pin|CAN_RX1BF_Pin;
 8000f50:	f241 0306 	movw	r3, #4102	@ 0x1006
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	485e      	ldr	r0, [pc, #376]	@ (80010e0 <MX_GPIO_Init+0x2c8>)
 8000f68:	f000 fc92 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f6c:	2332      	movs	r3, #50	@ 0x32
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4855      	ldr	r0, [pc, #340]	@ (80010dc <MX_GPIO_Init+0x2c4>)
 8000f88:	f000 fc82 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	484a      	ldr	r0, [pc, #296]	@ (80010d0 <MX_GPIO_Init+0x2b8>)
 8000fa8:	f000 fc72 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000fac:	2310      	movs	r3, #16
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4843      	ldr	r0, [pc, #268]	@ (80010d0 <MX_GPIO_Init+0x2b8>)
 8000fc4:	f000 fc64 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_INT_Pin */
  GPIO_InitStruct.Pin = CAN2_INT_Pin;
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN2_INT_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	483c      	ldr	r0, [pc, #240]	@ (80010d0 <MX_GPIO_Init+0x2b8>)
 8000fde:	f000 fc57 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fe2:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4836      	ldr	r0, [pc, #216]	@ (80010d4 <MX_GPIO_Init+0x2bc>)
 8000ffc:	f000 fc48 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001000:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001012:	230b      	movs	r3, #11
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	482d      	ldr	r0, [pc, #180]	@ (80010d4 <MX_GPIO_Init+0x2bc>)
 800101e:	f000 fc37 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8001022:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001028:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <MX_GPIO_Init+0x2cc>)
 800103a:	f000 fc29 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RX0BF_Pin */
  GPIO_InitStruct.Pin = CAN_RX0BF_Pin;
 800103e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001044:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CAN_RX0BF_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4823      	ldr	r0, [pc, #140]	@ (80010e4 <MX_GPIO_Init+0x2cc>)
 8001056:	f000 fc1b 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800105a:	2340      	movs	r3, #64	@ 0x40
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4819      	ldr	r0, [pc, #100]	@ (80010d8 <MX_GPIO_Init+0x2c0>)
 8001072:	f000 fc0d 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <MX_GPIO_Init+0x2c0>)
 800108a:	f000 fc01 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800108e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <MX_GPIO_Init+0x2c0>)
 80010ac:	f000 fbf0 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	2028      	movs	r0, #40	@ 0x28
 80010b6:	f000 fbc1 	bl	800183c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ba:	2028      	movs	r0, #40	@ 0x28
 80010bc:	f000 fbda 	bl	8001874 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c0:	bf00      	nop
 80010c2:	3738      	adds	r7, #56	@ 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40021800 	.word	0x40021800
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40020c00 	.word	0x40020c00

080010e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	if (CANINTFlag == 0) {
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_EXTI_Callback+0x2e>
		return;
	}

	if (GPIO_Pin == CAN2_RX0BF_Pin) {
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d103      	bne.n	8001108 <HAL_GPIO_EXTI_Callback+0x20>
		RXPin = 0;
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e007      	b.n	8001118 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if (GPIO_Pin == CAN2_RX1BF_Pin) {
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d104      	bne.n	8001118 <HAL_GPIO_EXTI_Callback+0x30>
		RXPin = 1;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x40>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e000      	b.n	8001118 <HAL_GPIO_EXTI_Callback+0x30>
		return;
 8001116:	bf00      	nop
	}
//	if ((GPIO_Pin == CAN2_RX0BF_Pin) || (GPIO_Pin == CAN2_RX1BF_Pin)) {
//		osMessageQueuePut(CANInterruptQueue, &GPIO_Pin, 0, 0);
//		//canReceive = 1;
//	}
}
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200006e9 	.word	0x200006e9
 8001128:	200006e8 	.word	0x200006e8

0800112c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800113e:	f000 fa81 	bl	8001644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40001000 	.word	0x40001000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <Error_Handler+0x8>

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001184:	6453      	str	r3, [r2, #68]	@ 0x44
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	210f      	movs	r1, #15
 8001196:	f06f 0001 	mvn.w	r0, #1
 800119a:	f000 fb4f 	bl	800183c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001284 <HAL_SPI_MspInit+0xd8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d128      	bne.n	8001220 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	2338      	movs	r3, #56	@ 0x38
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120e:	2305      	movs	r3, #5
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	481c      	ldr	r0, [pc, #112]	@ (800128c <HAL_SPI_MspInit+0xe0>)
 800121a:	f000 fb39 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800121e:	e02c      	b.n	800127a <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <HAL_SPI_MspInit+0xe4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d127      	bne.n	800127a <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a16      	ldr	r2, [pc, #88]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 8001230:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_SPI_MspInit+0xdc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800126a:	2305      	movs	r3, #5
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	@ (8001294 <HAL_SPI_MspInit+0xe8>)
 8001276:	f000 fb0b 	bl	8001890 <HAL_GPIO_Init>
}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	@ 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40013000 	.word	0x40013000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400
 8001290:	40013400 	.word	0x40013400
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ae      	sub	sp, #184	@ 0xb8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2290      	movs	r2, #144	@ 0x90
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 fb41 	bl	8005940 <memset>
  if(huart->Instance==USART3)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_UART_MspInit+0xb4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d13c      	bne.n	8001342 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fb56 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012e2:	f7ff ff35 	bl	8001150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_UART_MspInit+0xb8>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <HAL_UART_MspInit+0xb8>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <HAL_UART_MspInit+0xb8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_UART_MspInit+0xb8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <HAL_UART_MspInit+0xb8>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_UART_MspInit+0xb8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001316:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800131a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <HAL_UART_MspInit+0xbc>)
 800133e:	f000 faa7 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	37b8      	adds	r7, #184	@ 0xb8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40004800 	.word	0x40004800
 8001350:	40023800 	.word	0x40023800
 8001354:	40020c00 	.word	0x40020c00

08001358 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0ae      	sub	sp, #184	@ 0xb8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2290      	movs	r2, #144	@ 0x90
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fae1 	bl	8005940 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001386:	d159      	bne.n	800143c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001388:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800138c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4618      	mov	r0, r3
 800139a:	f001 faf5 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013a4:	f7ff fed4 	bl	8001150 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	4a25      	ldr	r2, [pc, #148]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013c0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80013c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013da:	230a      	movs	r3, #10
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4818      	ldr	r0, [pc, #96]	@ (8001448 <HAL_PCD_MspInit+0xf0>)
 80013e8:	f000 fa52 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001404:	4619      	mov	r1, r3
 8001406:	4810      	ldr	r0, [pc, #64]	@ (8001448 <HAL_PCD_MspInit+0xf0>)
 8001408:	f000 fa42 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800140c:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 800140e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001410:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 8001412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001416:	6353      	str	r3, [r2, #52]	@ 0x34
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	4a06      	ldr	r2, [pc, #24]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 800142a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <HAL_PCD_MspInit+0xec>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	37b8      	adds	r7, #184	@ 0xb8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	@ 0x38
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800145c:	4b33      	ldr	r3, [pc, #204]	@ (800152c <HAL_InitTick+0xe0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a32      	ldr	r2, [pc, #200]	@ (800152c <HAL_InitTick+0xe0>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b30      	ldr	r3, [pc, #192]	@ (800152c <HAL_InitTick+0xe0>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001474:	f107 0210 	add.w	r2, r7, #16
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fa50 	bl	8002924 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800148e:	f001 fa21 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8001492:	6378      	str	r0, [r7, #52]	@ 0x34
 8001494:	e004      	b.n	80014a0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001496:	f001 fa1d 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 800149a:	4603      	mov	r3, r0
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a2:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <HAL_InitTick+0xe4>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	3b01      	subs	r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_InitTick+0xe8>)
 80014b0:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_InitTick+0xec>)
 80014b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_InitTick+0xe8>)
 80014b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_InitTick+0xe8>)
 80014be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <HAL_InitTick+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_InitTick+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_InitTick+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014d4:	4817      	ldr	r0, [pc, #92]	@ (8001534 <HAL_InitTick+0xe8>)
 80014d6:	f002 fddf 	bl	8004098 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014e8:	4812      	ldr	r0, [pc, #72]	@ (8001534 <HAL_InitTick+0xe8>)
 80014ea:	f002 fe37 	bl	800415c <HAL_TIM_Base_Start_IT>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d111      	bne.n	8001520 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014fc:	2036      	movs	r0, #54	@ 0x36
 80014fe:	f000 f9b9 	bl	8001874 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d808      	bhi.n	800151a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2036      	movs	r0, #54	@ 0x36
 800150e:	f000 f995 	bl	800183c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_InitTick+0xf0>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e002      	b.n	8001520 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001524:	4618      	mov	r0, r3
 8001526:	3738      	adds	r7, #56	@ 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	431bde83 	.word	0x431bde83
 8001534:	200006ec 	.word	0x200006ec
 8001538:	40001000 	.word	0x40001000
 800153c:	2000001c 	.word	0x2000001c

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_RX1BF_Pin);
 800157a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800157e:	f000 fb4d 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001582:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001586:	f000 fb49 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 800158a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800158e:	f000 fb45 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_RX0BF_Pin);
 8001592:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001596:	f000 fb41 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM6_DAC_IRQHandler+0x10>)
 80015a6:	f002 fe51 	bl	800424c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200006ec 	.word	0x200006ec

080015b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	@ (8001614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	@ (8001618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	@ (8001624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001602:	f7ff ffd7 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f004 f9a3 	bl	8005950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff fa35 	bl	8000a78 <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001610:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800161c:	08005a58 	.word	0x08005a58
  ldr r2, =_sbss
 8001620:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001624:	20000cfc 	.word	0x20000cfc

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>

0800162a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162e:	2003      	movs	r0, #3
 8001630:	f000 f8f9 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001634:	200f      	movs	r0, #15
 8001636:	f7ff ff09 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163a:	f7ff fd8f 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000020 	.word	0x20000020
 8001668:	20000738 	.word	0x20000738

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000738 	.word	0x20000738

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000020 	.word	0x20000020

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	05fa0000 	.word	0x05fa0000

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	@ (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff4c 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184e:	f7ff ff61 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7ff ffb1 	bl	80017c0 <NVIC_EncodePriority>
 800185e:	4602      	mov	r2, r0
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff80 	bl	800176c <__NVIC_SetPriority>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff54 	bl	8001730 <__NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e175      	b.n	8001b9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8164 	bne.w	8001b96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x56>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80be 	beq.w	8001b96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b66      	ldr	r3, [pc, #408]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a65      	ldr	r2, [pc, #404]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a32:	4a61      	ldr	r2, [pc, #388]	@ (8001bb8 <HAL_GPIO_Init+0x328>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a58      	ldr	r2, [pc, #352]	@ (8001bbc <HAL_GPIO_Init+0x32c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d037      	beq.n	8001ace <HAL_GPIO_Init+0x23e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a57      	ldr	r2, [pc, #348]	@ (8001bc0 <HAL_GPIO_Init+0x330>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d031      	beq.n	8001aca <HAL_GPIO_Init+0x23a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a56      	ldr	r2, [pc, #344]	@ (8001bc4 <HAL_GPIO_Init+0x334>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d02b      	beq.n	8001ac6 <HAL_GPIO_Init+0x236>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a55      	ldr	r2, [pc, #340]	@ (8001bc8 <HAL_GPIO_Init+0x338>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d025      	beq.n	8001ac2 <HAL_GPIO_Init+0x232>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a54      	ldr	r2, [pc, #336]	@ (8001bcc <HAL_GPIO_Init+0x33c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01f      	beq.n	8001abe <HAL_GPIO_Init+0x22e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a53      	ldr	r2, [pc, #332]	@ (8001bd0 <HAL_GPIO_Init+0x340>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0x22a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a52      	ldr	r2, [pc, #328]	@ (8001bd4 <HAL_GPIO_Init+0x344>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x226>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a51      	ldr	r2, [pc, #324]	@ (8001bd8 <HAL_GPIO_Init+0x348>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x222>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a50      	ldr	r2, [pc, #320]	@ (8001bdc <HAL_GPIO_Init+0x34c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x21e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8001be0 <HAL_GPIO_Init+0x350>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001aa6:	2309      	movs	r3, #9
 8001aa8:	e012      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aaa:	230a      	movs	r3, #10
 8001aac:	e010      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e00e      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00c      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	e00a      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae0:	4935      	ldr	r1, [pc, #212]	@ (8001bb8 <HAL_GPIO_Init+0x328>)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b12:	4a34      	ldr	r2, [pc, #208]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b3c:	4a29      	ldr	r2, [pc, #164]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <HAL_GPIO_Init+0x354>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	f67f ae86 	bls.w	80018b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3724      	adds	r7, #36	@ 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40021400 	.word	0x40021400
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40022400 	.word	0x40022400
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa54 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40013c00 	.word	0x40013c00

08001c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	b08f      	sub	sp, #60	@ 0x3c
 8001c50:	af0a      	add	r7, sp, #40	@ 0x28
 8001c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e116      	b.n	8001e8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fb6d 	bl	8001358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 f99b 	bl	8004fd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	687e      	ldr	r6, [r7, #4]
 8001caa:	466d      	mov	r5, sp
 8001cac:	f106 0410 	add.w	r4, r6, #16
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc0:	1d33      	adds	r3, r6, #4
 8001cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	f003 f92f 	bl	8004f28 <USB_CoreInit>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0d7      	b.n	8001e8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 f989 	bl	8004ffa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e04a      	b.n	8001d84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	333d      	adds	r3, #61	@ 0x3d
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	333c      	adds	r3, #60	@ 0x3c
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	b298      	uxth	r0, r3
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3344      	adds	r3, #68	@ 0x44
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3340      	adds	r3, #64	@ 0x40
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3348      	adds	r3, #72	@ 0x48
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	334c      	adds	r3, #76	@ 0x4c
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3354      	adds	r3, #84	@ 0x54
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	3301      	adds	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3af      	bcc.n	8001cee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e044      	b.n	8001e1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3b5      	bcc.n	8001d94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	687e      	ldr	r6, [r7, #4]
 8001e30:	466d      	mov	r5, sp
 8001e32:	f106 0410 	add.w	r4, r6, #16
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e46:	1d33      	adds	r3, r6, #4
 8001e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4a:	6838      	ldr	r0, [r7, #0]
 8001e4c:	f003 f922 	bl	8005094 <USB_DevInit>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e014      	b.n	8001e8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f80a 	bl	8001e94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fae0 	bl	800544a <USB_DevDisconnect>

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	10000003 	.word	0x10000003

08001edc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001efe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f0a:	f7ff fbaf 	bl	800166c <HAL_GetTick>
 8001f0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f10:	e009      	b.n	8001f26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f12:	f7ff fbab 	bl	800166c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f20:	d901      	bls.n	8001f26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e022      	b.n	8001f6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f32:	d1ee      	bne.n	8001f12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f34:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f40:	f7ff fb94 	bl	800166c <HAL_GetTick>
 8001f44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f46:	e009      	b.n	8001f5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f48:	f7ff fb90 	bl	800166c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f56:	d901      	bls.n	8001f5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e007      	b.n	8001f6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f68:	d1ee      	bne.n	8001f48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40007000 	.word	0x40007000

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e29b      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8087 	beq.w	80020ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa0:	4b96      	ldr	r3, [pc, #600]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00c      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fac:	4b93      	ldr	r3, [pc, #588]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d112      	bne.n	8001fde <HAL_RCC_OscConfig+0x62>
 8001fb8:	4b90      	ldr	r3, [pc, #576]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fc4:	d10b      	bne.n	8001fde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06c      	beq.n	80020ac <HAL_RCC_OscConfig+0x130>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d168      	bne.n	80020ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e275      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x7a>
 8001fe8:	4b84      	ldr	r3, [pc, #528]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a83      	ldr	r2, [pc, #524]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e02e      	b.n	8002054 <HAL_RCC_OscConfig+0xd8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x9c>
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7e      	ldr	r2, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b7c      	ldr	r3, [pc, #496]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7b      	ldr	r2, [pc, #492]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xd8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0xc0>
 8002022:	4b76      	ldr	r3, [pc, #472]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b73      	ldr	r3, [pc, #460]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a72      	ldr	r2, [pc, #456]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xd8>
 800203c:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b6c      	ldr	r3, [pc, #432]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6b      	ldr	r2, [pc, #428]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fb06 	bl	800166c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fb02 	bl	800166c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e229      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b61      	ldr	r3, [pc, #388]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xe8>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff faf2 	bl	800166c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff faee 	bl	800166c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e215      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x110>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d069      	beq.n	800218e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ba:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x190>
 80020d2:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x17a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1e9      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	493d      	ldr	r1, [pc, #244]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e040      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b39      	ldr	r3, [pc, #228]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a38      	ldr	r2, [pc, #224]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff faa4 	bl	800166c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002128:	f7ff faa0 	bl	800166c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1c7      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b30      	ldr	r3, [pc, #192]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4929      	ldr	r1, [pc, #164]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
 800215a:	e018      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215c:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff fa80 	bl	800166c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff fa7c 	bl	800166c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1a3      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d038      	beq.n	800220c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d019      	beq.n	80021d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80021a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a6:	4a15      	ldr	r2, [pc, #84]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7ff fa5d 	bl	800166c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b6:	f7ff fa59 	bl	800166c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e180      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x23a>
 80021d4:	e01a      	b.n	800220c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80021d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021da:	4a08      	ldr	r2, [pc, #32]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7ff fa43 	bl	800166c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fa3f 	bl	800166c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d903      	bls.n	8002200 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e166      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
 80021fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	4b92      	ldr	r3, [pc, #584]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ee      	bne.n	80021ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a4 	beq.w	8002362 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b8c      	ldr	r3, [pc, #560]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b89      	ldr	r3, [pc, #548]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a88      	ldr	r2, [pc, #544]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b86      	ldr	r3, [pc, #536]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002242:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <HAL_RCC_OscConfig+0x4d4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800224e:	4b80      	ldr	r3, [pc, #512]	@ (8002450 <HAL_RCC_OscConfig+0x4d4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7f      	ldr	r2, [pc, #508]	@ (8002450 <HAL_RCC_OscConfig+0x4d4>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff fa07 	bl	800166c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff fa03 	bl	800166c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	@ 0x64
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e12a      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <HAL_RCC_OscConfig+0x4d4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x31a>
 8002288:	4b70      	ldr	r3, [pc, #448]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	4a6f      	ldr	r2, [pc, #444]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	@ 0x70
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_OscConfig+0x376>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x33c>
 800229e:	4b6b      	ldr	r3, [pc, #428]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	4a6a      	ldr	r2, [pc, #424]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022aa:	4b68      	ldr	r3, [pc, #416]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ae:	4a67      	ldr	r2, [pc, #412]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b6:	e01c      	b.n	80022f2 <HAL_RCC_OscConfig+0x376>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x35e>
 80022c0:	4b62      	ldr	r3, [pc, #392]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c4:	4a61      	ldr	r2, [pc, #388]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80022cc:	4b5f      	ldr	r3, [pc, #380]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d0:	4a5e      	ldr	r2, [pc, #376]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0x376>
 80022da:	4b5c      	ldr	r3, [pc, #368]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022de:	4a5b      	ldr	r2, [pc, #364]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e6:	4b59      	ldr	r3, [pc, #356]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	4a58      	ldr	r2, [pc, #352]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff f9b7 	bl	800166c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff f9b3 	bl	800166c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0d8      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b4c      	ldr	r3, [pc, #304]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <HAL_RCC_OscConfig+0x386>
 8002324:	e014      	b.n	8002350 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7ff f9a1 	bl	800166c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff f99d 	bl	800166c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0c2      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	4b41      	ldr	r3, [pc, #260]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a3c      	ldr	r2, [pc, #240]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80ae 	beq.w	80024c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b37      	ldr	r3, [pc, #220]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d06d      	beq.n	8002454 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d14b      	bne.n	8002418 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a31      	ldr	r2, [pc, #196]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f96e 	bl	800166c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f96a 	bl	800166c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e091      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	4b29      	ldr	r3, [pc, #164]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	071b      	lsls	r3, r3, #28
 80023de:	491b      	ldr	r1, [pc, #108]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f93c 	bl	800166c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff f938 	bl	800166c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e05f      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x47c>
 8002416:	e057      	b.n	80024c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 800241e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff f922 	bl	800166c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f91e 	bl	800166c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e045      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b03      	ldr	r3, [pc, #12]	@ (800244c <HAL_RCC_OscConfig+0x4d0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x4b0>
 800244a:	e03d      	b.n	80024c8 <HAL_RCC_OscConfig+0x54c>
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <HAL_RCC_OscConfig+0x558>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d030      	beq.n	80024c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d129      	bne.n	80024c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d122      	bne.n	80024c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800248a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248c:	4293      	cmp	r3, r2
 800248e:	d119      	bne.n	80024c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d10f      	bne.n	80024c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0d0      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b6a      	ldr	r3, [pc, #424]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b67      	ldr	r3, [pc, #412]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	4965      	ldr	r1, [pc, #404]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d040      	beq.n	80025fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d115      	bne.n	80025ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b41      	ldr	r3, [pc, #260]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e073      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3d      	ldr	r3, [pc, #244]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06b      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b39      	ldr	r3, [pc, #228]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4936      	ldr	r1, [pc, #216]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025cc:	f7ff f84e 	bl	800166c <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7ff f84a 	bl	800166c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e053      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d210      	bcs.n	800262c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 020f 	bic.w	r2, r3, #15
 8002612:	4922      	ldr	r1, [pc, #136]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f821 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x1cc>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	@ (80026a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_ClockConfig+0x1d4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fede 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08005a30 	.word	0x08005a30
 80026a8:	20000018 	.word	0x20000018
 80026ac:	2000001c 	.word	0x2000001c

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b094      	sub	sp, #80	@ 0x50
 80026b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80026bc:	2300      	movs	r3, #0
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c0:	2300      	movs	r3, #0
 80026c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c8:	4b79      	ldr	r3, [pc, #484]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d00d      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x40>
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	f200 80e1 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x34>
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x3a>
 80026e2:	e0db      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b73      	ldr	r3, [pc, #460]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026e8:	e0db      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ea:	4b73      	ldr	r3, [pc, #460]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80026ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026ee:	e0d8      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f0:	4b6f      	ldr	r3, [pc, #444]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026fa:	4b6d      	ldr	r3, [pc, #436]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	2200      	movs	r2, #0
 800270e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	@ 0x34
 800271e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002722:	4622      	mov	r2, r4
 8002724:	462b      	mov	r3, r5
 8002726:	f04f 0000 	mov.w	r0, #0
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	0159      	lsls	r1, r3, #5
 8002730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002734:	0150      	lsls	r0, r2, #5
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4621      	mov	r1, r4
 800273c:	1a51      	subs	r1, r2, r1
 800273e:	6139      	str	r1, [r7, #16]
 8002740:	4629      	mov	r1, r5
 8002742:	eb63 0301 	sbc.w	r3, r3, r1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002754:	4659      	mov	r1, fp
 8002756:	018b      	lsls	r3, r1, #6
 8002758:	4651      	mov	r1, sl
 800275a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800275e:	4651      	mov	r1, sl
 8002760:	018a      	lsls	r2, r1, #6
 8002762:	4651      	mov	r1, sl
 8002764:	ebb2 0801 	subs.w	r8, r2, r1
 8002768:	4659      	mov	r1, fp
 800276a:	eb63 0901 	sbc.w	r9, r3, r1
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800277a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	4623      	mov	r3, r4
 8002788:	eb18 0303 	adds.w	r3, r8, r3
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	462b      	mov	r3, r5
 8002790:	eb49 0303 	adc.w	r3, r9, r3
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027a2:	4629      	mov	r1, r5
 80027a4:	024b      	lsls	r3, r1, #9
 80027a6:	4621      	mov	r1, r4
 80027a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ac:	4621      	mov	r1, r4
 80027ae:	024a      	lsls	r2, r1, #9
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b6:	2200      	movs	r2, #0
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027c0:	f7fd fd3e 	bl	8000240 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027cc:	e058      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b38      	ldr	r3, [pc, #224]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	2200      	movs	r2, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	4611      	mov	r1, r2
 80027da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0159      	lsls	r1, r3, #5
 80027f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027fa:	0150      	lsls	r0, r2, #5
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4641      	mov	r1, r8
 8002802:	ebb2 0a01 	subs.w	sl, r2, r1
 8002806:	4649      	mov	r1, r9
 8002808:	eb63 0b01 	sbc.w	fp, r3, r1
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800281c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002820:	ebb2 040a 	subs.w	r4, r2, sl
 8002824:	eb63 050b 	sbc.w	r5, r3, fp
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	00eb      	lsls	r3, r5, #3
 8002832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002836:	00e2      	lsls	r2, r4, #3
 8002838:	4614      	mov	r4, r2
 800283a:	461d      	mov	r5, r3
 800283c:	4643      	mov	r3, r8
 800283e:	18e3      	adds	r3, r4, r3
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	464b      	mov	r3, r9
 8002844:	eb45 0303 	adc.w	r3, r5, r3
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002856:	4629      	mov	r1, r5
 8002858:	028b      	lsls	r3, r1, #10
 800285a:	4621      	mov	r1, r4
 800285c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002860:	4621      	mov	r1, r4
 8002862:	028a      	lsls	r2, r1, #10
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286a:	2200      	movs	r2, #0
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	61fa      	str	r2, [r7, #28]
 8002870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002874:	f7fd fce4 	bl	8000240 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4613      	mov	r3, r2
 800287e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800289e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3750      	adds	r7, #80	@ 0x50
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000018 	.word	0x20000018

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08005a40 	.word	0x08005a40

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffdc 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08005a40 	.word	0x08005a40

08002924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	220f      	movs	r2, #15
 8002932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002940:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <HAL_RCC_GetClockConfig+0x60>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40023c00 	.word	0x40023c00

08002988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b0:	4b69      	ldr	r3, [pc, #420]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a68      	ldr	r2, [pc, #416]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029ba:	6093      	str	r3, [r2, #8]
 80029bc:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c4:	4964      	ldr	r1, [pc, #400]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d017      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	4959      	ldr	r1, [pc, #356]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a00:	d101      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d017      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	494a      	ldr	r1, [pc, #296]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 808b 	beq.w	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a78:	4b37      	ldr	r3, [pc, #220]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a84:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a34      	ldr	r2, [pc, #208]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a90:	f7fe fdec 	bl	800166c <HAL_GetTick>
 8002a94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe fde8 	bl	800166c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	@ 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e38f      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab6:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002abe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d035      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d02e      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad4:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002adc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aea:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a1a      	ldr	r2, [pc, #104]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002af6:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002afc:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d114      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fdb0 	bl	800166c <HAL_GetTick>
 8002b0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fdac 	bl	800166c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e351      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	4901      	ldr	r1, [pc, #4]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	0ffffcff 	.word	0x0ffffcff
 8002b64:	4bac      	ldr	r3, [pc, #688]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4aab      	ldr	r2, [pc, #684]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b6e:	6093      	str	r3, [r2, #8]
 8002b70:	4ba9      	ldr	r3, [pc, #676]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	49a6      	ldr	r1, [pc, #664]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b8e:	4ba2      	ldr	r3, [pc, #648]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b94:	4aa0      	ldr	r2, [pc, #640]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	499b      	ldr	r1, [pc, #620]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bbc:	4b96      	ldr	r3, [pc, #600]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bca:	4993      	ldr	r1, [pc, #588]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bde:	4b8e      	ldr	r3, [pc, #568]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bec:	498a      	ldr	r1, [pc, #552]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c00:	4b85      	ldr	r3, [pc, #532]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c0e:	4982      	ldr	r1, [pc, #520]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c22:	4b7d      	ldr	r3, [pc, #500]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4979      	ldr	r1, [pc, #484]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c44:	4b74      	ldr	r3, [pc, #464]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	4971      	ldr	r1, [pc, #452]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c66:	4b6c      	ldr	r3, [pc, #432]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f023 020c 	bic.w	r2, r3, #12
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c74:	4968      	ldr	r1, [pc, #416]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c88:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4960      	ldr	r1, [pc, #384]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002caa:	4b5b      	ldr	r3, [pc, #364]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb8:	4957      	ldr	r1, [pc, #348]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ccc:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	494f      	ldr	r1, [pc, #316]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cee:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4946      	ldr	r1, [pc, #280]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d10:	4b41      	ldr	r3, [pc, #260]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	493e      	ldr	r1, [pc, #248]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d32:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d40:	4935      	ldr	r1, [pc, #212]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d54:	4b30      	ldr	r3, [pc, #192]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d62:	492d      	ldr	r1, [pc, #180]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d011      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d76:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d84:	4924      	ldr	r1, [pc, #144]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db6:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc4:	4914      	ldr	r1, [pc, #80]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002de8:	490b      	ldr	r1, [pc, #44]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00f      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0c:	4902      	ldr	r1, [pc, #8]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e14:	e002      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e28:	4b8a      	ldr	r3, [pc, #552]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e38:	4986      	ldr	r1, [pc, #536]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e4c:	4b81      	ldr	r3, [pc, #516]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5c:	497d      	ldr	r1, [pc, #500]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d006      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80d6 	beq.w	8003024 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e78:	4b76      	ldr	r3, [pc, #472]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a75      	ldr	r2, [pc, #468]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fe fbf2 	bl	800166c <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e8c:	f7fe fbee 	bl	800166c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e195      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d021      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11d      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ebe:	4b65      	ldr	r3, [pc, #404]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ecc:	4b61      	ldr	r3, [pc, #388]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed2:	0e1b      	lsrs	r3, r3, #24
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	019a      	lsls	r2, r3, #6
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	4958      	ldr	r1, [pc, #352]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d02e      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f24:	d129      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f26:	4b4b      	ldr	r3, [pc, #300]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f34:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3a:	0f1b      	lsrs	r3, r3, #28
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	019a      	lsls	r2, r3, #6
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	071b      	lsls	r3, r3, #28
 8002f5a:	493e      	ldr	r1, [pc, #248]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f62:	4b3c      	ldr	r3, [pc, #240]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f68:	f023 021f 	bic.w	r2, r3, #31
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	3b01      	subs	r3, #1
 8002f72:	4938      	ldr	r1, [pc, #224]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01d      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f86:	4b33      	ldr	r3, [pc, #204]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f8c:	0e1b      	lsrs	r3, r3, #24
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f94:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4926      	ldr	r1, [pc, #152]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d011      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	491a      	ldr	r1, [pc, #104]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a17      	ldr	r2, [pc, #92]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffe:	f7fe fb35 	bl	800166c <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003006:	f7fe fb31 	bl	800166c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b64      	cmp	r3, #100	@ 0x64
 8003012:	d901      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0d8      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003018:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 80ce 	bne.w	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe fb18 	bl	800166c <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800303e:	e00b      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003040:	f7fe fb14 	bl	800166c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	@ 0x64
 800304c:	d904      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0bb      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003058:	4b5e      	ldr	r3, [pc, #376]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003064:	d0ec      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003082:	2b00      	cmp	r3, #0
 8003084:	d02e      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d12a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800308e:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	0f1b      	lsrs	r3, r3, #28
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4944      	ldr	r1, [pc, #272]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030ca:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	493d      	ldr	r1, [pc, #244]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d022      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030f8:	d11d      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030fa:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	0e1b      	lsrs	r3, r3, #24
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003108:	4b32      	ldr	r3, [pc, #200]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	0f1b      	lsrs	r3, r3, #28
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	019a      	lsls	r2, r3, #6
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	431a      	orrs	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	4929      	ldr	r1, [pc, #164]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d028      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003142:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	0e1b      	lsrs	r3, r3, #24
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003150:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	019a      	lsls	r2, r3, #6
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	431a      	orrs	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	071b      	lsls	r3, r3, #28
 8003176:	4917      	ldr	r1, [pc, #92]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	4911      	ldr	r1, [pc, #68]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003194:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fe fa64 	bl	800166c <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031a8:	f7fe fa60 	bl	800166c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	@ 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e007      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031c6:	d1ef      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e09d      	b.n	8003326 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031fa:	d009      	beq.n	8003210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
 8003202:	e005      	b.n	8003210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd ffbe 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003246:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003250:	d902      	bls.n	8003258 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e002      	b.n	800325e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003266:	d007      	beq.n	8003278 <HAL_SPI_Init+0xa0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	ea42 0103 	orr.w	r1, r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 0204 	and.w	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032f4:	ea42 0103 	orr.w	r1, r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b088      	sub	sp, #32
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_SPI_Transmit+0x22>
 800334c:	2302      	movs	r3, #2
 800334e:	e158      	b.n	8003602 <HAL_SPI_Transmit+0x2d4>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003358:	f7fe f988 	bl	800166c <HAL_GetTick>
 800335c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003372:	e13d      	b.n	80035f0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_SPI_Transmit+0x52>
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003384:	e134      	b.n	80035f0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d0:	d10f      	bne.n	80033f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	d007      	beq.n	8003410 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800340e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003418:	d94b      	bls.n	80034b2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_SPI_Transmit+0xfa>
 8003422:	8afb      	ldrh	r3, [r7, #22]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d13e      	bne.n	80034a6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800344c:	e02b      	b.n	80034a6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b02      	cmp	r3, #2
 800345a:	d112      	bne.n	8003482 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003480:	e011      	b.n	80034a6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003482:	f7fe f8f3 	bl	800166c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d803      	bhi.n	800349a <HAL_SPI_Transmit+0x16c>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d102      	bne.n	80034a0 <HAL_SPI_Transmit+0x172>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034a4:	e0a4      	b.n	80035f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ce      	bne.n	800344e <HAL_SPI_Transmit+0x120>
 80034b0:	e07c      	b.n	80035ac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_SPI_Transmit+0x192>
 80034ba:	8afb      	ldrh	r3, [r7, #22]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d170      	bne.n	80035a2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d912      	bls.n	80034f0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b02      	subs	r3, #2
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034ee:	e058      	b.n	80035a2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003516:	e044      	b.n	80035a2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d12b      	bne.n	800357e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d912      	bls.n	8003556 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	1c9a      	adds	r2, r3, #2
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b02      	subs	r3, #2
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003554:	e025      	b.n	80035a2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800357c:	e011      	b.n	80035a2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357e:	f7fe f875 	bl	800166c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d803      	bhi.n	8003596 <HAL_SPI_Transmit+0x268>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d102      	bne.n	800359c <HAL_SPI_Transmit+0x26e>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035a0:	e026      	b.n	80035f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1b5      	bne.n	8003518 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fd07 	bl	8003fc4 <SPI_EndRxTxTransaction>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e000      	b.n	80035f0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80035ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003600:	7ffb      	ldrb	r3, [r7, #31]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af02      	add	r7, sp, #8
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003626:	d112      	bne.n	800364e <HAL_SPI_Receive+0x44>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10e      	bne.n	800364e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2204      	movs	r2, #4
 8003634:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4613      	mov	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f910 	bl	800386a <HAL_SPI_TransmitReceive>
 800364a:	4603      	mov	r3, r0
 800364c:	e109      	b.n	8003862 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_SPI_Receive+0x52>
 8003658:	2302      	movs	r3, #2
 800365a:	e102      	b.n	8003862 <HAL_SPI_Receive+0x258>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003664:	f7fe f802 	bl	800166c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d002      	beq.n	800367c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	75fb      	strb	r3, [r7, #23]
    goto error;
 800367a:	e0e9      	b.n	8003850 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Receive+0x7e>
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800368c:	e0e0      	b.n	8003850 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2204      	movs	r2, #4
 8003692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d8:	d908      	bls.n	80036ec <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	e007      	b.n	80036fc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003704:	d10f      	bne.n	8003726 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003714:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003730:	2b40      	cmp	r3, #64	@ 0x40
 8003732:	d007      	beq.n	8003744 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003742:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800374c:	d867      	bhi.n	800381e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800374e:	e030      	b.n	80037b2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d117      	bne.n	800378e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f103 020c 	add.w	r2, r3, #12
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800378c:	e011      	b.n	80037b2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800378e:	f7fd ff6d 	bl	800166c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d803      	bhi.n	80037a6 <HAL_SPI_Receive+0x19c>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d102      	bne.n	80037ac <HAL_SPI_Receive+0x1a2>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037b0:	e04e      	b.n	8003850 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1c8      	bne.n	8003750 <HAL_SPI_Receive+0x146>
 80037be:	e034      	b.n	800382a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	b292      	uxth	r2, r2
 80037da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80037f8:	e011      	b.n	800381e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fa:	f7fd ff37 	bl	800166c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d803      	bhi.n	8003812 <HAL_SPI_Receive+0x208>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d102      	bne.n	8003818 <HAL_SPI_Receive+0x20e>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800381c:	e018      	b.n	8003850 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ca      	bne.n	80037c0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb4c 	bl	8003ecc <SPI_EndRxTransaction>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
 800384c:	e000      	b.n	8003850 <HAL_SPI_Receive+0x246>
  }

error :
 800384e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b08a      	sub	sp, #40	@ 0x28
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003878:	2301      	movs	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_SPI_TransmitReceive+0x26>
 800388c:	2302      	movs	r3, #2
 800388e:	e1fb      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x41e>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003898:	f7fd fee8 	bl	800166c <HAL_GetTick>
 800389c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038b4:	7efb      	ldrb	r3, [r7, #27]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d00e      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x6e>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c0:	d106      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x66>
 80038ca:	7efb      	ldrb	r3, [r7, #27]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d003      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80038d6:	e1cd      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x80>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x80>
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80038f0:	e1c0      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d003      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2205      	movs	r2, #5
 8003902:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	887a      	ldrh	r2, [r7, #2]
 8003916:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	887a      	ldrh	r2, [r7, #2]
 800391e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	887a      	ldrh	r2, [r7, #2]
 8003932:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003948:	d802      	bhi.n	8003950 <HAL_SPI_TransmitReceive+0xe6>
 800394a:	8a3b      	ldrh	r3, [r7, #16]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d908      	bls.n	8003962 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	e007      	b.n	8003972 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397c:	2b40      	cmp	r3, #64	@ 0x40
 800397e:	d007      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003998:	d97c      	bls.n	8003a94 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_TransmitReceive+0x13e>
 80039a2:	8a7b      	ldrh	r3, [r7, #18]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d169      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039cc:	e056      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d11b      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x1aa>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d016      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x1aa>
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d113      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11c      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x1f2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a5c:	f7fd fe06 	bl	800166c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d807      	bhi.n	8003a7c <HAL_SPI_TransmitReceive+0x212>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003a7a:	e0fb      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1a3      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x164>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d19d      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x164>
 8003a92:	e0df      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x23a>
 8003a9c:	8a7b      	ldrh	r3, [r7, #18]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 80cb 	bne.w	8003c3a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d912      	bls.n	8003ad4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b02      	subs	r3, #2
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ad2:	e0b2      	b.n	8003c3a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003afa:	e09e      	b.n	8003c3a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d134      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x30a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d02f      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0x30a>
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d12c      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d912      	bls.n	8003b4a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b02      	subs	r3, #2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b48:	e012      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d148      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x3aa>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d042      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d923      	bls.n	8003be2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b02      	subs	r3, #2
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d81f      	bhi.n	8003c10 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	e016      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f103 020c 	add.w	r2, r3, #12
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c14:	f7fd fd2a 	bl	800166c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d803      	bhi.n	8003c2c <HAL_SPI_TransmitReceive+0x3c2>
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x3c8>
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003c38:	e01c      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f47f af5b 	bne.w	8003afc <HAL_SPI_TransmitReceive+0x292>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f47f af54 	bne.w	8003afc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9b3 	bl	8003fc4 <SPI_EndRxTxTransaction>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c70:	e000      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3728      	adds	r7, #40	@ 0x28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ca0:	f7fd fce4 	bl	800166c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cb0:	f7fd fcdc 	bl	800166c <HAL_GetTick>
 8003cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cb6:	4b39      	ldr	r3, [pc, #228]	@ (8003d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	015b      	lsls	r3, r3, #5
 8003cbc:	0d1b      	lsrs	r3, r3, #20
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cc6:	e054      	b.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d050      	beq.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cd0:	f7fd fccc 	bl	800166c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d902      	bls.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d13d      	bne.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cfe:	d111      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d08:	d004      	beq.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d107      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2c:	d10f      	bne.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e017      	b.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	bf0c      	ite	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	2300      	movne	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d19b      	bne.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000018 	.word	0x20000018

08003da0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	@ 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003db2:	f7fd fc5b 	bl	800166c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dc2:	f7fd fc53 	bl	800166c <HAL_GetTick>
 8003dc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00da      	lsls	r2, r3, #3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	0d1b      	lsrs	r3, r3, #20
 8003de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003de8:	e060      	b.n	8003eac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003df0:	d107      	bne.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d050      	beq.n	8003eac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e0a:	f7fd fc2f 	bl	800166c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d902      	bls.n	8003e20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d13d      	bne.n	8003e9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e38:	d111      	bne.n	8003e5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e42:	d004      	beq.n	8003e4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4c:	d107      	bne.n	8003e5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e66:	d10f      	bne.n	8003e88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e010      	b.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d196      	bne.n	8003dea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3728      	adds	r7, #40	@ 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000018 	.word	0x20000018

08003ecc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee0:	d111      	bne.n	8003f06 <SPI_EndRxTransaction+0x3a>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eea:	d004      	beq.n	8003ef6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef4:	d107      	bne.n	8003f06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f0e:	d112      	bne.n	8003f36 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2180      	movs	r1, #128	@ 0x80
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff feb8 	bl	8003c90 <SPI_WaitFlagStateUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d021      	beq.n	8003f6a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e03d      	b.n	8003fb2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f36:	4b21      	ldr	r3, [pc, #132]	@ (8003fbc <SPI_EndRxTransaction+0xf0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a21      	ldr	r2, [pc, #132]	@ (8003fc0 <SPI_EndRxTransaction+0xf4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	0d5b      	lsrs	r3, r3, #21
 8003f42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f62:	2b80      	cmp	r3, #128	@ 0x80
 8003f64:	d0f2      	beq.n	8003f4c <SPI_EndRxTransaction+0x80>
 8003f66:	e000      	b.n	8003f6a <SPI_EndRxTransaction+0x9e>
        break;
 8003f68:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f72:	d11d      	bne.n	8003fb0 <SPI_EndRxTransaction+0xe4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7c:	d004      	beq.n	8003f88 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f86:	d113      	bne.n	8003fb0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff ff03 	bl	8003da0 <SPI_WaitFifoStateUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000018 	.word	0x20000018
 8003fc0:	165e9f81 	.word	0x165e9f81

08003fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff fedf 	bl	8003da0 <SPI_WaitFifoStateUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e046      	b.n	8004086 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ff8:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <SPI_EndRxTxTransaction+0xcc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	@ (8004094 <SPI_EndRxTxTransaction+0xd0>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0d5b      	lsrs	r3, r3, #21
 8004004:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004016:	d112      	bne.n	800403e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	2180      	movs	r1, #128	@ 0x80
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fe34 	bl	8003c90 <SPI_WaitFlagStateUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e023      	b.n	8004086 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3b01      	subs	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004054:	2b80      	cmp	r3, #128	@ 0x80
 8004056:	d0f2      	beq.n	800403e <SPI_EndRxTxTransaction+0x7a>
 8004058:	e000      	b.n	800405c <SPI_EndRxTxTransaction+0x98>
        break;
 800405a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff fe99 	bl	8003da0 <SPI_WaitFifoStateUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e000      	b.n	8004086 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000018 	.word	0x20000018
 8004094:	165e9f81 	.word	0x165e9f81

08004098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e049      	b.n	800413e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f841 	bl	8004146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fa00 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d001      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e054      	b.n	800421e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a26      	ldr	r2, [pc, #152]	@ (800422c <HAL_TIM_Base_Start_IT+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d01d      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <HAL_TIM_Base_Start_IT+0xd4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a21      	ldr	r2, [pc, #132]	@ (8004234 <HAL_TIM_Base_Start_IT+0xd8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <HAL_TIM_Base_Start_IT+0xdc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <HAL_TIM_Base_Start_IT+0xe0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <HAL_TIM_Base_Start_IT+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_TIM_Base_Start_IT+0xe8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d115      	bne.n	8004208 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <HAL_TIM_Base_Start_IT+0xec>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d015      	beq.n	800421a <HAL_TIM_Base_Start_IT+0xbe>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f4:	d011      	beq.n	800421a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	e008      	b.n	800421a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e000      	b.n	800421c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40010400 	.word	0x40010400
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800
 8004248:	00010007 	.word	0x00010007

0800424c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b02      	cmp	r3, #2
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0202 	mvn.w	r2, #2
 8004278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f905 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8f7 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f908 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0204 	mvn.w	r2, #4
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8db 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8cd 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8de 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b08      	cmp	r3, #8
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0208 	mvn.w	r2, #8
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2204      	movs	r2, #4
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8b1 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8a3 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8b4 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b10      	cmp	r3, #16
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2208      	movs	r2, #8
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f887 	bl	800449e <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f879 	bl	800448a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f88a 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d10e      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0201 	mvn.w	r2, #1
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc feae 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043da:	2b80      	cmp	r3, #128	@ 0x80
 80043dc:	d10e      	bne.n	80043fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e8:	2b80      	cmp	r3, #128	@ 0x80
 80043ea:	d107      	bne.n	80043fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f91a 	bl	8004630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440a:	d10e      	bne.n	800442a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004416:	2b80      	cmp	r3, #128	@ 0x80
 8004418:	d107      	bne.n	800442a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f90d 	bl	8004644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d10e      	bne.n	8004456 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d107      	bne.n	8004456 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800444e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f838 	bl	80044c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b20      	cmp	r3, #32
 8004462:	d10e      	bne.n	8004482 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b20      	cmp	r3, #32
 8004470:	d107      	bne.n	8004482 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f06f 0220 	mvn.w	r2, #32
 800447a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8cd 	bl	800461c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a40      	ldr	r2, [pc, #256]	@ (80045f0 <TIM_Base_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3d      	ldr	r2, [pc, #244]	@ (80045f4 <TIM_Base_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3c      	ldr	r2, [pc, #240]	@ (80045f8 <TIM_Base_SetConfig+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3b      	ldr	r2, [pc, #236]	@ (80045fc <TIM_Base_SetConfig+0x120>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3a      	ldr	r2, [pc, #232]	@ (8004600 <TIM_Base_SetConfig+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2f      	ldr	r2, [pc, #188]	@ (80045f0 <TIM_Base_SetConfig+0x114>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d027      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2c      	ldr	r2, [pc, #176]	@ (80045f4 <TIM_Base_SetConfig+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d023      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <TIM_Base_SetConfig+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01f      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2a      	ldr	r2, [pc, #168]	@ (80045fc <TIM_Base_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01b      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a29      	ldr	r2, [pc, #164]	@ (8004600 <TIM_Base_SetConfig+0x124>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d017      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a28      	ldr	r2, [pc, #160]	@ (8004604 <TIM_Base_SetConfig+0x128>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a27      	ldr	r2, [pc, #156]	@ (8004608 <TIM_Base_SetConfig+0x12c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00f      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a26      	ldr	r2, [pc, #152]	@ (800460c <TIM_Base_SetConfig+0x130>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a25      	ldr	r2, [pc, #148]	@ (8004610 <TIM_Base_SetConfig+0x134>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <TIM_Base_SetConfig+0x138>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a23      	ldr	r2, [pc, #140]	@ (8004618 <TIM_Base_SetConfig+0x13c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0a      	ldr	r2, [pc, #40]	@ (80045f0 <TIM_Base_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <TIM_Base_SetConfig+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40010400 	.word	0x40010400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800
 8004610:	40001800 	.word	0x40001800
 8004614:	40001c00 	.word	0x40001c00
 8004618:	40002000 	.word	0x40002000

0800461c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e040      	b.n	80046ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fe0c 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	@ 0x24
 8004684:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f82c 	bl	80046f4 <UART_SetConfig>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e022      	b.n	80046ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa84 	bl	8004bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fb0b 	bl	8004d00 <UART_CheckIdleState>
 80046ea:	4603      	mov	r3, r0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4ba6      	ldr	r3, [pc, #664]	@ (80049b8 <UART_SetConfig+0x2c4>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	430b      	orrs	r3, r1
 800472a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a94      	ldr	r2, [pc, #592]	@ (80049bc <UART_SetConfig+0x2c8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d120      	bne.n	80047b2 <UART_SetConfig+0xbe>
 8004770:	4b93      	ldr	r3, [pc, #588]	@ (80049c0 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d816      	bhi.n	80047ac <UART_SetConfig+0xb8>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x90>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004795 	.word	0x08004795
 8004788:	080047a1 	.word	0x080047a1
 800478c:	0800479b 	.word	0x0800479b
 8004790:	080047a7 	.word	0x080047a7
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e150      	b.n	8004a3c <UART_SetConfig+0x348>
 800479a:	2302      	movs	r3, #2
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e14d      	b.n	8004a3c <UART_SetConfig+0x348>
 80047a0:	2304      	movs	r3, #4
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e14a      	b.n	8004a3c <UART_SetConfig+0x348>
 80047a6:	2308      	movs	r3, #8
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e147      	b.n	8004a3c <UART_SetConfig+0x348>
 80047ac:	2310      	movs	r3, #16
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e144      	b.n	8004a3c <UART_SetConfig+0x348>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a83      	ldr	r2, [pc, #524]	@ (80049c4 <UART_SetConfig+0x2d0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d132      	bne.n	8004822 <UART_SetConfig+0x12e>
 80047bc:	4b80      	ldr	r3, [pc, #512]	@ (80049c0 <UART_SetConfig+0x2cc>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d828      	bhi.n	800481c <UART_SetConfig+0x128>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0xdc>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	08004805 	.word	0x08004805
 80047d4:	0800481d 	.word	0x0800481d
 80047d8:	0800481d 	.word	0x0800481d
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004811 	.word	0x08004811
 80047e4:	0800481d 	.word	0x0800481d
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	0800480b 	.word	0x0800480b
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800481d 	.word	0x0800481d
 8004800:	08004817 	.word	0x08004817
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e118      	b.n	8004a3c <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e115      	b.n	8004a3c <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e112      	b.n	8004a3c <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e10f      	b.n	8004a3c <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e10c      	b.n	8004a3c <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a68      	ldr	r2, [pc, #416]	@ (80049c8 <UART_SetConfig+0x2d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <UART_SetConfig+0x17a>
 800482c:	4b64      	ldr	r3, [pc, #400]	@ (80049c0 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004836:	2b30      	cmp	r3, #48	@ 0x30
 8004838:	d013      	beq.n	8004862 <UART_SetConfig+0x16e>
 800483a:	2b30      	cmp	r3, #48	@ 0x30
 800483c:	d814      	bhi.n	8004868 <UART_SetConfig+0x174>
 800483e:	2b20      	cmp	r3, #32
 8004840:	d009      	beq.n	8004856 <UART_SetConfig+0x162>
 8004842:	2b20      	cmp	r3, #32
 8004844:	d810      	bhi.n	8004868 <UART_SetConfig+0x174>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0x15c>
 800484a:	2b10      	cmp	r3, #16
 800484c:	d006      	beq.n	800485c <UART_SetConfig+0x168>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x174>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0f2      	b.n	8004a3c <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0ef      	b.n	8004a3c <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0ec      	b.n	8004a3c <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0e9      	b.n	8004a3c <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e0e6      	b.n	8004a3c <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a56      	ldr	r2, [pc, #344]	@ (80049cc <UART_SetConfig+0x2d8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0x1c6>
 8004878:	4b51      	ldr	r3, [pc, #324]	@ (80049c0 <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004882:	2bc0      	cmp	r3, #192	@ 0xc0
 8004884:	d013      	beq.n	80048ae <UART_SetConfig+0x1ba>
 8004886:	2bc0      	cmp	r3, #192	@ 0xc0
 8004888:	d814      	bhi.n	80048b4 <UART_SetConfig+0x1c0>
 800488a:	2b80      	cmp	r3, #128	@ 0x80
 800488c:	d009      	beq.n	80048a2 <UART_SetConfig+0x1ae>
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d810      	bhi.n	80048b4 <UART_SetConfig+0x1c0>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <UART_SetConfig+0x1a8>
 8004896:	2b40      	cmp	r3, #64	@ 0x40
 8004898:	d006      	beq.n	80048a8 <UART_SetConfig+0x1b4>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x1c0>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0cc      	b.n	8004a3c <UART_SetConfig+0x348>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0c9      	b.n	8004a3c <UART_SetConfig+0x348>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0c6      	b.n	8004a3c <UART_SetConfig+0x348>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0c3      	b.n	8004a3c <UART_SetConfig+0x348>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0c0      	b.n	8004a3c <UART_SetConfig+0x348>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a44      	ldr	r2, [pc, #272]	@ (80049d0 <UART_SetConfig+0x2dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d125      	bne.n	8004910 <UART_SetConfig+0x21c>
 80048c4:	4b3e      	ldr	r3, [pc, #248]	@ (80049c0 <UART_SetConfig+0x2cc>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d2:	d017      	beq.n	8004904 <UART_SetConfig+0x210>
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d8:	d817      	bhi.n	800490a <UART_SetConfig+0x216>
 80048da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048de:	d00b      	beq.n	80048f8 <UART_SetConfig+0x204>
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e4:	d811      	bhi.n	800490a <UART_SetConfig+0x216>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <UART_SetConfig+0x1fe>
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ee:	d006      	beq.n	80048fe <UART_SetConfig+0x20a>
 80048f0:	e00b      	b.n	800490a <UART_SetConfig+0x216>
 80048f2:	2300      	movs	r3, #0
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e0a1      	b.n	8004a3c <UART_SetConfig+0x348>
 80048f8:	2302      	movs	r3, #2
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e09e      	b.n	8004a3c <UART_SetConfig+0x348>
 80048fe:	2304      	movs	r3, #4
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e09b      	b.n	8004a3c <UART_SetConfig+0x348>
 8004904:	2308      	movs	r3, #8
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e098      	b.n	8004a3c <UART_SetConfig+0x348>
 800490a:	2310      	movs	r3, #16
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e095      	b.n	8004a3c <UART_SetConfig+0x348>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2f      	ldr	r2, [pc, #188]	@ (80049d4 <UART_SetConfig+0x2e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <UART_SetConfig+0x272>
 800491a:	4b29      	ldr	r3, [pc, #164]	@ (80049c0 <UART_SetConfig+0x2cc>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004920:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004928:	d017      	beq.n	800495a <UART_SetConfig+0x266>
 800492a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800492e:	d817      	bhi.n	8004960 <UART_SetConfig+0x26c>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004934:	d00b      	beq.n	800494e <UART_SetConfig+0x25a>
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493a:	d811      	bhi.n	8004960 <UART_SetConfig+0x26c>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x254>
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004944:	d006      	beq.n	8004954 <UART_SetConfig+0x260>
 8004946:	e00b      	b.n	8004960 <UART_SetConfig+0x26c>
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e076      	b.n	8004a3c <UART_SetConfig+0x348>
 800494e:	2302      	movs	r3, #2
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e073      	b.n	8004a3c <UART_SetConfig+0x348>
 8004954:	2304      	movs	r3, #4
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e070      	b.n	8004a3c <UART_SetConfig+0x348>
 800495a:	2308      	movs	r3, #8
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e06d      	b.n	8004a3c <UART_SetConfig+0x348>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e06a      	b.n	8004a3c <UART_SetConfig+0x348>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1b      	ldr	r2, [pc, #108]	@ (80049d8 <UART_SetConfig+0x2e4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d138      	bne.n	80049e2 <UART_SetConfig+0x2ee>
 8004970:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <UART_SetConfig+0x2cc>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004976:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800497a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800497e:	d017      	beq.n	80049b0 <UART_SetConfig+0x2bc>
 8004980:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004984:	d82a      	bhi.n	80049dc <UART_SetConfig+0x2e8>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498a:	d00b      	beq.n	80049a4 <UART_SetConfig+0x2b0>
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004990:	d824      	bhi.n	80049dc <UART_SetConfig+0x2e8>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <UART_SetConfig+0x2aa>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	d006      	beq.n	80049aa <UART_SetConfig+0x2b6>
 800499c:	e01e      	b.n	80049dc <UART_SetConfig+0x2e8>
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e04b      	b.n	8004a3c <UART_SetConfig+0x348>
 80049a4:	2302      	movs	r3, #2
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e048      	b.n	8004a3c <UART_SetConfig+0x348>
 80049aa:	2304      	movs	r3, #4
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e045      	b.n	8004a3c <UART_SetConfig+0x348>
 80049b0:	2308      	movs	r3, #8
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e042      	b.n	8004a3c <UART_SetConfig+0x348>
 80049b6:	bf00      	nop
 80049b8:	efff69f3 	.word	0xefff69f3
 80049bc:	40011000 	.word	0x40011000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40004400 	.word	0x40004400
 80049c8:	40004800 	.word	0x40004800
 80049cc:	40004c00 	.word	0x40004c00
 80049d0:	40005000 	.word	0x40005000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	40007800 	.word	0x40007800
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e02c      	b.n	8004a3c <UART_SetConfig+0x348>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a72      	ldr	r2, [pc, #456]	@ (8004bb0 <UART_SetConfig+0x4bc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d125      	bne.n	8004a38 <UART_SetConfig+0x344>
 80049ec:	4b71      	ldr	r3, [pc, #452]	@ (8004bb4 <UART_SetConfig+0x4c0>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049fa:	d017      	beq.n	8004a2c <UART_SetConfig+0x338>
 80049fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a00:	d817      	bhi.n	8004a32 <UART_SetConfig+0x33e>
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a06:	d00b      	beq.n	8004a20 <UART_SetConfig+0x32c>
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0c:	d811      	bhi.n	8004a32 <UART_SetConfig+0x33e>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <UART_SetConfig+0x326>
 8004a12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a16:	d006      	beq.n	8004a26 <UART_SetConfig+0x332>
 8004a18:	e00b      	b.n	8004a32 <UART_SetConfig+0x33e>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e00d      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a20:	2302      	movs	r3, #2
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e00a      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a26:	2304      	movs	r3, #4
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e007      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e004      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a32:	2310      	movs	r3, #16
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e001      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a44:	d15b      	bne.n	8004afe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x3aa>
 8004a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0x360>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fd ff2c 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	61b8      	str	r0, [r7, #24]
        break;
 8004a7e:	e013      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fd ff3c 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
        break;
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb8 <UART_SetConfig+0x4c4>)
 8004a8a:	61bb      	str	r3, [r7, #24]
        break;
 8004a8c:	e00c      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fd fe0f 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8004a92:	61b8      	str	r0, [r7, #24]
        break;
 8004a94:	e008      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8004aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d074      	beq.n	8004b98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d916      	bls.n	8004af8 <UART_SetConfig+0x404>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad0:	d212      	bcs.n	8004af8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f023 030f 	bic.w	r3, r3, #15
 8004ada:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	89fb      	ldrh	r3, [r7, #14]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	89fa      	ldrh	r2, [r7, #14]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e04f      	b.n	8004b98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	77bb      	strb	r3, [r7, #30]
 8004afc:	e04c      	b.n	8004b98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x462>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x418>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fd fed0 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
        break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fd fee0 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb8 <UART_SetConfig+0x4c4>)
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fd fdb3 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61b8      	str	r0, [r7, #24]
        break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b52:	61bb      	str	r3, [r7, #24]
        break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085a      	lsrs	r2, r3, #1
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d909      	bls.n	8004b94 <UART_SetConfig+0x4a0>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b86:	d205      	bcs.n	8004b94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e001      	b.n	8004b98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40007c00 	.word	0x40007c00
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cba:	d10a      	bne.n	8004cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d10:	f7fc fcac 	bl	800166c <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10e      	bne.n	8004d42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f831 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e027      	b.n	8004d92 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d10e      	bne.n	8004d6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f81b 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e011      	b.n	8004d92 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b09c      	sub	sp, #112	@ 0x70
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004daa:	e0a7      	b.n	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	f000 80a3 	beq.w	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fc fc59 	bl	800166c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x32>
 8004dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d13f      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ddc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dec:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004df0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e6      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e1e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e068      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d050      	beq.n	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e68:	d148      	bne.n	8004efc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e94:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ec6:	623a      	str	r2, [r7, #32]
 8004ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e010      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4013      	ands	r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	f43f af48 	beq.w	8004dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3770      	adds	r7, #112	@ 0x70
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f28:	b084      	sub	sp, #16
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	f107 001c 	add.w	r0, r7, #28
 8004f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d120      	bne.n	8004f82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <USB_CoreInit+0xac>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d105      	bne.n	8004f76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa96 	bl	80054a8 <USB_CoreReset>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e010      	b.n	8004fa4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa8a 	bl	80054a8 <USB_CoreReset>
 8004f94:	4603      	mov	r3, r0
 8004f96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d10b      	bne.n	8004fc2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f043 0206 	orr.w	r2, r3, #6
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fce:	b004      	add	sp, #16
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	ffbdffbf 	.word	0xffbdffbf

08004fd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f023 0201 	bic.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d115      	bne.n	8005048 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005028:	2001      	movs	r0, #1
 800502a:	f7fc fb2b 	bl	8001684 <HAL_Delay>
      ms++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fa29 	bl	800548c <USB_GetMode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b01      	cmp	r3, #1
 800503e:	d01e      	beq.n	800507e <USB_SetCurrentMode+0x84>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b31      	cmp	r3, #49	@ 0x31
 8005044:	d9f0      	bls.n	8005028 <USB_SetCurrentMode+0x2e>
 8005046:	e01a      	b.n	800507e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800505a:	2001      	movs	r0, #1
 800505c:	f7fc fb12 	bl	8001684 <HAL_Delay>
      ms++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa10 	bl	800548c <USB_GetMode>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <USB_SetCurrentMode+0x84>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b31      	cmp	r3, #49	@ 0x31
 8005076:	d9f0      	bls.n	800505a <USB_SetCurrentMode+0x60>
 8005078:	e001      	b.n	800507e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e005      	b.n	800508a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b32      	cmp	r3, #50	@ 0x32
 8005082:	d101      	bne.n	8005088 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b580      	push	{r7, lr}
 8005098:	b086      	sub	sp, #24
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e009      	b.n	80050c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	3340      	adds	r3, #64	@ 0x40
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b0e      	cmp	r3, #14
 80050cc:	d9f2      	bls.n	80050b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11c      	bne.n	800510e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e005      	b.n	800511a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800512c:	4619      	mov	r1, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	461a      	mov	r2, r3
 8005136:	680b      	ldr	r3, [r1, #0]
 8005138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10c      	bne.n	800515a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005146:	2100      	movs	r1, #0
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f965 	bl	8005418 <USB_SetDevSpeed>
 800514e:	e008      	b.n	8005162 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005150:	2101      	movs	r1, #1
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f960 	bl	8005418 <USB_SetDevSpeed>
 8005158:	e003      	b.n	8005162 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800515a:	2103      	movs	r1, #3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f95b 	bl	8005418 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005162:	2110      	movs	r1, #16
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8f3 	bl	8005350 <USB_FlushTxFifo>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f91f 	bl	80053b8 <USB_FlushRxFifo>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518a:	461a      	mov	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e043      	b.n	8005236 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051c4:	d118      	bne.n	80051f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d8:	461a      	mov	r2, r3
 80051da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e013      	b.n	800520a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ee:	461a      	mov	r2, r3
 80051f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e008      	b.n	800520a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	2300      	movs	r3, #0
 8005208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	2300      	movs	r3, #0
 800521a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005228:	461a      	mov	r2, r3
 800522a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800522e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3301      	adds	r3, #1
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	d3b7      	bcc.n	80051ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e043      	b.n	80052cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525a:	d118      	bne.n	800528e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526e:	461a      	mov	r2, r3
 8005270:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e013      	b.n	80052a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	461a      	mov	r2, r3
 8005286:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e008      	b.n	80052a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	2300      	movs	r3, #0
 800529e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ac:	461a      	mov	r2, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	461a      	mov	r2, r3
 80052c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3301      	adds	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d3b7      	bcc.n	8005244 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f043 0210 	orr.w	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <USB_DevInit+0x2b4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f043 0208 	orr.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	4b06      	ldr	r3, [pc, #24]	@ (800534c <USB_DevInit+0x2b8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005344:	b004      	add	sp, #16
 8005346:	4770      	bx	lr
 8005348:	803c3800 	.word	0x803c3800
 800534c:	40000004 	.word	0x40000004

08005350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a13      	ldr	r2, [pc, #76]	@ (80053b4 <USB_FlushTxFifo+0x64>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e01b      	b.n	80053a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	daf2      	bge.n	800535e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	019b      	lsls	r3, r3, #6
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a08      	ldr	r2, [pc, #32]	@ (80053b4 <USB_FlushTxFifo+0x64>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e006      	b.n	80053a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d0f0      	beq.n	8005388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	00030d40 	.word	0x00030d40

080053b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <USB_FlushRxFifo+0x5c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e018      	b.n	8005408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	daf2      	bge.n	80053c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2210      	movs	r2, #16
 80053e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a08      	ldr	r2, [pc, #32]	@ (8005414 <USB_FlushRxFifo+0x5c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e006      	b.n	8005408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d0f0      	beq.n	80053e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	00030d40 	.word	0x00030d40

08005418 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f003 0301 	and.w	r3, r3, #1
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a13      	ldr	r2, [pc, #76]	@ (800550c <USB_CoreReset+0x64>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e01b      	b.n	80054fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	daf2      	bge.n	80054b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f043 0201 	orr.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a09      	ldr	r2, [pc, #36]	@ (800550c <USB_CoreReset+0x64>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d0f0      	beq.n	80054de <USB_CoreReset+0x36>

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	00030d40 	.word	0x00030d40

08005510 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6892      	ldr	r2, [r2, #8]
 800556e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6852      	ldr	r2, [r2, #4]
 8005578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d103      	bne.n	800558c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055b2:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <xTaskGetTickCount+0x1c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055b8:	687b      	ldr	r3, [r7, #4]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000ba8 	.word	0x20000ba8

080055cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d6:	4b50      	ldr	r3, [pc, #320]	@ (8005718 <xTaskIncrementTick+0x14c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 808c 	bne.w	80056f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055e0:	4b4e      	ldr	r3, [pc, #312]	@ (800571c <xTaskIncrementTick+0x150>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055e8:	4a4c      	ldr	r2, [pc, #304]	@ (800571c <xTaskIncrementTick+0x150>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d123      	bne.n	800563c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80055f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005720 <xTaskIncrementTick+0x154>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00d      	beq.n	800561a <xTaskIncrementTick+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	b672      	cpsid	i
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	b662      	cpsie	i
 8005612:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <xTaskIncrementTick+0x4a>
 800561a:	4b41      	ldr	r3, [pc, #260]	@ (8005720 <xTaskIncrementTick+0x154>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	4b40      	ldr	r3, [pc, #256]	@ (8005724 <xTaskIncrementTick+0x158>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a3e      	ldr	r2, [pc, #248]	@ (8005720 <xTaskIncrementTick+0x154>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4a3e      	ldr	r2, [pc, #248]	@ (8005724 <xTaskIncrementTick+0x158>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b3e      	ldr	r3, [pc, #248]	@ (8005728 <xTaskIncrementTick+0x15c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	4a3c      	ldr	r2, [pc, #240]	@ (8005728 <xTaskIncrementTick+0x15c>)
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	f000 f8ec 	bl	8005814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800563c:	4b3b      	ldr	r3, [pc, #236]	@ (800572c <xTaskIncrementTick+0x160>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d349      	bcc.n	80056da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	4b36      	ldr	r3, [pc, #216]	@ (8005720 <xTaskIncrementTick+0x154>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005650:	4b36      	ldr	r3, [pc, #216]	@ (800572c <xTaskIncrementTick+0x160>)
 8005652:	f04f 32ff 	mov.w	r2, #4294967295
 8005656:	601a      	str	r2, [r3, #0]
					break;
 8005658:	e03f      	b.n	80056da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565a:	4b31      	ldr	r3, [pc, #196]	@ (8005720 <xTaskIncrementTick+0x154>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	d203      	bcs.n	800567a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005672:	4a2e      	ldr	r2, [pc, #184]	@ (800572c <xTaskIncrementTick+0x160>)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005678:	e02f      	b.n	80056da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3304      	adds	r3, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ff6a 	bl	8005558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3318      	adds	r3, #24
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff61 	bl	8005558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	4b25      	ldr	r3, [pc, #148]	@ (8005730 <xTaskIncrementTick+0x164>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d903      	bls.n	80056aa <xTaskIncrementTick+0xde>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	4a22      	ldr	r2, [pc, #136]	@ (8005730 <xTaskIncrementTick+0x164>)
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005734 <xTaskIncrementTick+0x168>)
 80056b8:	441a      	add	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7ff ff25 	bl	8005510 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <xTaskIncrementTick+0x16c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3b8      	bcc.n	8005646 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d8:	e7b5      	b.n	8005646 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056da:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <xTaskIncrementTick+0x16c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e0:	4914      	ldr	r1, [pc, #80]	@ (8005734 <xTaskIncrementTick+0x168>)
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d907      	bls.n	8005702 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e004      	b.n	8005702 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056f8:	4b10      	ldr	r3, [pc, #64]	@ (800573c <xTaskIncrementTick+0x170>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	4a0f      	ldr	r2, [pc, #60]	@ (800573c <xTaskIncrementTick+0x170>)
 8005700:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005702:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <xTaskIncrementTick+0x174>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800570e:	697b      	ldr	r3, [r7, #20]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000bc0 	.word	0x20000bc0
 800571c:	20000ba8 	.word	0x20000ba8
 8005720:	20000ba0 	.word	0x20000ba0
 8005724:	20000ba4 	.word	0x20000ba4
 8005728:	20000bb8 	.word	0x20000bb8
 800572c:	20000bbc 	.word	0x20000bbc
 8005730:	20000bac 	.word	0x20000bac
 8005734:	20000740 	.word	0x20000740
 8005738:	2000073c 	.word	0x2000073c
 800573c:	20000bb0 	.word	0x20000bb0
 8005740:	20000bb4 	.word	0x20000bb4

08005744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800574a:	4b2c      	ldr	r3, [pc, #176]	@ (80057fc <vTaskSwitchContext+0xb8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005752:	4b2b      	ldr	r3, [pc, #172]	@ (8005800 <vTaskSwitchContext+0xbc>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005758:	e049      	b.n	80057ee <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800575a:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <vTaskSwitchContext+0xbc>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005760:	4b28      	ldr	r3, [pc, #160]	@ (8005804 <vTaskSwitchContext+0xc0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e013      	b.n	8005790 <vTaskSwitchContext+0x4c>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10d      	bne.n	800578a <vTaskSwitchContext+0x46>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	b672      	cpsid	i
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	b662      	cpsie	i
 8005782:	607b      	str	r3, [r7, #4]
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	e7fd      	b.n	8005786 <vTaskSwitchContext+0x42>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b01      	subs	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	491d      	ldr	r1, [pc, #116]	@ (8005808 <vTaskSwitchContext+0xc4>)
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0e1      	beq.n	8005768 <vTaskSwitchContext+0x24>
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <vTaskSwitchContext+0xc4>)
 80057b0:	4413      	add	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3308      	adds	r3, #8
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d104      	bne.n	80057d4 <vTaskSwitchContext+0x90>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	4a0c      	ldr	r2, [pc, #48]	@ (800580c <vTaskSwitchContext+0xc8>)
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4a09      	ldr	r2, [pc, #36]	@ (8005804 <vTaskSwitchContext+0xc0>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057e4:	4b09      	ldr	r3, [pc, #36]	@ (800580c <vTaskSwitchContext+0xc8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3354      	adds	r3, #84	@ 0x54
 80057ea:	4a09      	ldr	r2, [pc, #36]	@ (8005810 <vTaskSwitchContext+0xcc>)
 80057ec:	6013      	str	r3, [r2, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000bc0 	.word	0x20000bc0
 8005800:	20000bb4 	.word	0x20000bb4
 8005804:	20000bac 	.word	0x20000bac
 8005808:	20000740 	.word	0x20000740
 800580c:	2000073c 	.word	0x2000073c
 8005810:	20000024 	.word	0x20000024

08005814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <prvResetNextTaskUnblockTime+0x38>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005824:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800582c:	e008      	b.n	8005840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582e:	4b07      	ldr	r3, [pc, #28]	@ (800584c <prvResetNextTaskUnblockTime+0x38>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a04      	ldr	r2, [pc, #16]	@ (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	20000ba0 	.word	0x20000ba0
 8005850:	20000bbc 	.word	0x20000bbc
	...

08005860 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
	...

08005890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005890:	f3ef 8009 	mrs	r0, PSP
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <pxCurrentTCBConst>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	f01e 0f10 	tst.w	lr, #16
 80058a0:	bf08      	it	eq
 80058a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	6010      	str	r0, [r2, #0]
 80058ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80058b4:	b672      	cpsid	i
 80058b6:	f380 8811 	msr	BASEPRI, r0
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	b662      	cpsie	i
 80058c4:	f7ff ff3e 	bl	8005744 <vTaskSwitchContext>
 80058c8:	f04f 0000 	mov.w	r0, #0
 80058cc:	f380 8811 	msr	BASEPRI, r0
 80058d0:	bc09      	pop	{r0, r3}
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	f01e 0f10 	tst.w	lr, #16
 80058de:	bf08      	it	eq
 80058e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058e4:	f380 8809 	msr	PSP, r0
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop

080058f0 <pxCurrentTCBConst>:
 80058f0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop

080058f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	b672      	cpsid	i
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	b662      	cpsie	i
 8005912:	607b      	str	r3, [r7, #4]
}
 8005914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005916:	f7ff fe59 	bl	80055cc <xTaskIncrementTick>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005920:	4b06      	ldr	r3, [pc, #24]	@ (800593c <SysTick_Handler+0x44>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	2300      	movs	r3, #0
 800592a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <memset>:
 8005940:	4402      	add	r2, r0
 8005942:	4603      	mov	r3, r0
 8005944:	4293      	cmp	r3, r2
 8005946:	d100      	bne.n	800594a <memset+0xa>
 8005948:	4770      	bx	lr
 800594a:	f803 1b01 	strb.w	r1, [r3], #1
 800594e:	e7f9      	b.n	8005944 <memset+0x4>

08005950 <__libc_init_array>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4d0d      	ldr	r5, [pc, #52]	@ (8005988 <__libc_init_array+0x38>)
 8005954:	4c0d      	ldr	r4, [pc, #52]	@ (800598c <__libc_init_array+0x3c>)
 8005956:	1b64      	subs	r4, r4, r5
 8005958:	10a4      	asrs	r4, r4, #2
 800595a:	2600      	movs	r6, #0
 800595c:	42a6      	cmp	r6, r4
 800595e:	d109      	bne.n	8005974 <__libc_init_array+0x24>
 8005960:	4d0b      	ldr	r5, [pc, #44]	@ (8005990 <__libc_init_array+0x40>)
 8005962:	4c0c      	ldr	r4, [pc, #48]	@ (8005994 <__libc_init_array+0x44>)
 8005964:	f000 f818 	bl	8005998 <_init>
 8005968:	1b64      	subs	r4, r4, r5
 800596a:	10a4      	asrs	r4, r4, #2
 800596c:	2600      	movs	r6, #0
 800596e:	42a6      	cmp	r6, r4
 8005970:	d105      	bne.n	800597e <__libc_init_array+0x2e>
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	f855 3b04 	ldr.w	r3, [r5], #4
 8005978:	4798      	blx	r3
 800597a:	3601      	adds	r6, #1
 800597c:	e7ee      	b.n	800595c <__libc_init_array+0xc>
 800597e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005982:	4798      	blx	r3
 8005984:	3601      	adds	r6, #1
 8005986:	e7f2      	b.n	800596e <__libc_init_array+0x1e>
 8005988:	08005a50 	.word	0x08005a50
 800598c:	08005a50 	.word	0x08005a50
 8005990:	08005a50 	.word	0x08005a50
 8005994:	08005a54 	.word	0x08005a54

08005998 <_init>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr

080059a4 <_fini>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr
